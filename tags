!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AFFECTOR_INC	include/MPE/classes/Affector.hpp	7;"	kind:d
ATTRIBUTE_NAME	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_NAME		            	= 0,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE_LEAVE_ENTITIES	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
Affector	include/MPE/classes/Affector.hpp	/^   Affector(Real      theLifetime);$/;"	kind:p	class:mpe::Affector	access:protected	signature:(Real theLifetime)
Affector	include/MPE/classes/Affector.hpp	/^class Affector: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
Affector	src/MPE/classes/Affector.cpp	/^Affector::Affector(Real theLifetime):$/;"	kind:f	class:mpe::Affector	signature:(Real theLifetime)
AffectorPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Affector> AffectorPtr;$/;"	kind:t	namespace:mpe
Alloc	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void* Alloc() = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:()
Alloc	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void* Alloc()$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
Attribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Attribute( const char* name, const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value = 0 ) const
BUF_SIZE	ext_libs/include/TinyXML2/tinyxml2.h	/^      BUF_SIZE = 200$/;"	kind:e	enum:tinyxml2::XMLPrinter::__anon6
BUF_SIZE	ext_libs/include/TinyXML2/tinyxml2.h	/^   enum { BUF_SIZE = 200 };$/;"	kind:e	enum:tinyxml2::XMLAttribute::__anon4
Block	ext_libs/include/TinyXML2/tinyxml2.h	/^   struct Block$/;"	kind:s	class:tinyxml2::MemPoolT	access:private
BoolAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool	 BoolAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
BoolValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool	 BoolValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
CData	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool CData() const$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:() const
CIRCLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
CLOSED	ext_libs/include/TinyXML2/tinyxml2.h	/^      CLOSED,		\/\/ <foo\/>$/;"	kind:e	enum:tinyxml2::XMLElement::__anon5
CLOSING	ext_libs/include/TinyXML2/tinyxml2.h	/^      CLOSING		\/\/ <\/foo>$/;"	kind:e	enum:tinyxml2::XMLElement::__anon5
COLLAPSE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^      COLLAPSE_WHITESPACE	                = 0x04,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
COLLAPSE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^   COLLAPSE_WHITESPACE$/;"	kind:e	enum:tinyxml2::Whitespace
COMMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^      COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
CONFIG_MPE_INC	include/MPE/Config.hpp	8;"	kind:d
COUNT	ext_libs/include/TinyXML2/tinyxml2.h	/^   enum { COUNT = (4 * 1024) \/ SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	kind:e	enum:tinyxml2::MemPoolT::__anon3
CStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* CStr() const$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:() const
CStrSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   int CStrSize() const$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:() const
Capacity	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Capacity() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
Chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^   union Chunk$/;"	kind:u	class:tinyxml2::MemPoolT	access:private
Clear	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Clear();$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:()
CloseElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   void CloseElement();$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:()
ClosingType	ext_libs/include/TinyXML2/tinyxml2.h	/^   int ClosingType() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
CollapseWhitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void CollapseWhitespace();$/;"	kind:p	class:tinyxml2::StrPair	access:private	signature:()
Color	include/MPE/Config.hpp	/^struct Color$/;"	kind:s	namespace:mpe
ConvertUTF32ToUTF8	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
CurrentAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int CurrentAllocs() const$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:() const
DEBUG	ext_libs/include/TinyXML2/tinyxml2.h	56;"	kind:d
DUMMY	include/MPE/classes/Emitter.hpp	/^   static Emitter DUMMY;$/;"	kind:m	class:mpe::Emitter	access:public
DUMMY	src/MPE/classes/Emitter.cpp	/^Emitter Emitter::DUMMY = Emitter("DUMMY");$/;"	kind:m	class:mpe::Emitter	file:
DeleteAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteAttribute( const char* name );$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
DeleteChild	ext_libs/include/TinyXML2/tinyxml2.h	/^      node->_parent->DeleteChild( node );$/;"	kind:p	signature:( node )
DeleteChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteChild( XMLNode* node );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
DeleteChildren	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteChildren();$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:()
DeleteNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteNode( XMLNode* node )$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
Dispersion	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:g	class:mpe::Emitter	access:public
DoubleAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   double 	 DoubleAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
DoubleValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   double 	 DoubleValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< T, INIT >()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^class DynArray$/;"	kind:c	namespace:tinyxml2
EMITTER_INC	include/MPE/classes/Emitter.hpp	9;"	kind:d
ENTITY_RANGE	ext_libs/include/TinyXML2/tinyxml2.h	/^      ENTITY_RANGE = 64,$/;"	kind:e	enum:tinyxml2::XMLPrinter::__anon6
Emitter	include/MPE/classes/Emitter.hpp	/^   Emitter(EmitterID theID);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(EmitterID theID)
Emitter	include/MPE/classes/Emitter.hpp	/^class Emitter$/;"	kind:c	namespace:mpe
Emitter	src/MPE/classes/Emitter.cpp	/^Emitter::Emitter(EmitterID theID):$/;"	kind:f	class:mpe::Emitter	signature:(EmitterID theID)
EmitterID	include/MPE/Config.hpp	/^typedef std::string EmitterID;$/;"	kind:t	namespace:mpe
Empty	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Empty() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
Empty	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Empty() const$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:() const
EnsureCapacity	ext_libs/include/TinyXML2/tinyxml2.h	/^   void EnsureCapacity( int cap )$/;"	kind:f	class:tinyxml2::DynArray	access:private	signature:( int cap )
Error	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Error() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
ErrorID	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError  ErrorID() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
FOCUS_INC	include/MPE/classes/Focus.hpp	7;"	kind:d
FindAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* FindAttribute( const char* name );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FindAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* FindAttribute( const char* name ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FindOrCreateAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FirstAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* FirstAttribute() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle FirstChild()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		FirstChild()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle FirstChild() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*  FirstChild() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* FirstChildElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle FirstChildElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* value = 0 )
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle FirstChildElement( const char* value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* value = 0 ) const
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* FirstChildElement( const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
FloatAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   float	 FloatAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FloatValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   float	 FloatValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Focus	include/MPE/classes/Focus.hpp	/^   Focus(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
Focus	include/MPE/classes/Focus.hpp	/^class Focus: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
Focus	src/MPE/classes/Focus.cpp	/^Focus::Focus(Real           theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
FocusPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Focus> FocusPtr;$/;"	kind:t	namespace:mpe
Free	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void Free( void* ) = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:( void* )
Free	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void Free( void* mem )$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
GENERATOR_TL9DCTRC	include/MPE/classes/Generator.hpp	2;"	kind:d
GROUP_A	include/MPE/Config.hpp	/^const GroupID GROUP_A = 0x01;$/;"	kind:m	namespace:mpe
GROUP_B	include/MPE/Config.hpp	/^const GroupID GROUP_B = 0x02;$/;"	kind:m	namespace:mpe
GROUP_C	include/MPE/Config.hpp	/^const GroupID GROUP_C = 0x04;$/;"	kind:m	namespace:mpe
GROUP_D	include/MPE/Config.hpp	/^const GroupID GROUP_D = 0x08;$/;"	kind:m	namespace:mpe
GROUP_E	include/MPE/Config.hpp	/^const GroupID GROUP_E = 0x10;$/;"	kind:m	namespace:mpe
GROUP_F	include/MPE/Config.hpp	/^const GroupID GROUP_F = 0x20;$/;"	kind:m	namespace:mpe
GROUP_G	include/MPE/Config.hpp	/^const GroupID GROUP_G = 0x40;$/;"	kind:m	namespace:mpe
GROUP_H	include/MPE/Config.hpp	/^const GroupID GROUP_H = 0x80;$/;"	kind:m	namespace:mpe
Generator	include/MPE/classes/Generator.hpp	/^   Generator();$/;"	kind:p	class:mpe::Generator	access:public	signature:()
Generator	include/MPE/classes/Generator.hpp	/^   Generator(T theMin, T theMax);$/;"	kind:p	class:mpe::Generator	access:public	signature:(T theMin, T theMax)
Generator	include/MPE/classes/Generator.hpp	/^   Generator(T theNumber);$/;"	kind:p	class:mpe::Generator	access:public	signature:(T theNumber)
Generator	include/MPE/classes/Generator.hpp	/^class Generator$/;"	kind:c	namespace:mpe
Generator	src/MPE/classes/Generator.cpp	/^Generator<Integer>::Generator():$/;"	kind:f	class:mpe::Generator	signature:()
Generator	src/MPE/classes/Generator.cpp	/^Generator<Integer>::Generator(Integer theMin, Integer theMax):$/;"	kind:f	class:mpe::Generator	signature:(Integer theMin, Integer theMax)
Generator	src/MPE/classes/Generator.cpp	/^Generator<Real>::Generator():$/;"	kind:f	class:mpe::Generator	signature:()
Generator	src/MPE/classes/Generator.cpp	/^Generator<Real>::Generator(Real theMin, Real theMax):$/;"	kind:f	class:mpe::Generator	signature:(Real theMin, Real theMax)
Generator	src/MPE/classes/Generator.cpp	/^Generator<T>::Generator(T theNumber):$/;"	kind:f	class:mpe::Generator	signature:(T theNumber)
GetCharacterRef	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
GetDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument* GetDocument()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
GetDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLDocument* GetDocument() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
GetErrorStr1	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetErrorStr1() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetErrorStr2	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetErrorStr2() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetStr();$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:()
GetText	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetText() const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:() const
GroupID	include/MPE/Config.hpp	/^typedef unsigned char GroupID;$/;"	kind:t	namespace:mpe
HasBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool HasBOM() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
Identify	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* Identify( char* p, XMLNode** node );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
InsertAfterChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertEndChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* InsertEndChild( XMLNode* addThis );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
InsertFirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
IntAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int		 IntAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
IntValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   int		 IntValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Integer	include/MPE/Config.hpp	/^typedef int Integer;$/;"	kind:t	namespace:mpe
IsNameChar	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool IsNameChar( unsigned char ch )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
IsNameStartChar	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool IsNameStartChar( unsigned char ch )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
IsUTF8Continuation	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static int IsUTF8Continuation( const char p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( const char p )
IsWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool IsWhiteSpace( char p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
ItemSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual int ItemSize() const = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:() const
ItemSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual int ItemSize() const$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:() const
LINEAR	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle LastChild()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		LastChild()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle LastChild()	const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	LastChild() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* LastChildElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle LastChildElement( const char* _value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value = 0 )
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle LastChildElement( const char* _value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value = 0 ) const
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* LastChildElement( const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
LinkEndChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* LinkEndChild( XMLNode* addThis )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
LoadFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError LoadFile( FILE* );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
LoadFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError LoadFile( const char* filename );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
MAX_INTEGER	include/MPE/Config.hpp	/^const Integer MAX_INTEGER = std::numeric_limits<Integer>::max();$/;"	kind:m	namespace:mpe
MORTAL_INC	include/MPE/classes/Mortal.hpp	8;"	kind:d
MPE_INC	include/MPE/MPE.hpp	7;"	kind:d
Mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   T* Mem()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
Mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   const T* Mem() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool() {}$/;"	kind:f	class:tinyxml2::MemPool	access:public	signature:()
MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^class MemPool$/;"	kind:c	namespace:tinyxml2
MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	kind:c	namespace:tinyxml2	inherits:MemPool
Mortal	include/MPE/classes/Mortal.hpp	/^   Mortal(Real theLifetime);$/;"	kind:p	class:mpe::Mortal	access:public	signature:(Real theLifetime)
Mortal	include/MPE/classes/Mortal.hpp	/^class Mortal$/;"	kind:c	namespace:mpe
Mortal	src/MPE/classes/Mortal.cpp	/^Mortal::Mortal(Real theLifetime):$/;"	kind:f	class:mpe::Mortal	signature:(Real theLifetime)
NEEDS_DELETE	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_DELETE = 0x200$/;"	kind:e	enum:tinyxml2::StrPair::__anon2
NEEDS_ENTITY_PROCESSING	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
NEEDS_FLUSH	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_FLUSH = 0x100,$/;"	kind:e	enum:tinyxml2::StrPair::__anon2
NEEDS_NEWLINE_NORMALIZATION	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
NO_GROUP	include/MPE/Config.hpp	/^const GroupID NO_GROUP = 0x00;$/;"	kind:m	namespace:mpe
Name	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Name() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Name	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Name() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
NewComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment* NewComment( const char* comment );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
NewDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration* NewDeclaration( const char* text = 0 );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text = 0 )
NewElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* NewElement( const char* name );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
NewText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText* NewText( const char* text );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
NewUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown* NewUnknown( const char* text );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
Next	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* Next() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle NextSibling()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*	NextSibling()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle NextSibling() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	NextSibling() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement*	NextSiblingElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle NextSiblingElement( const char* _value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value = 0 )
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle NextSiblingElement( const char* _value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value = 0 ) const
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement*	NextSiblingElement( const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
NoChildren	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool NoChildren() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
OPEN	ext_libs/include/TinyXML2/tinyxml2.h	/^      OPEN,		\/\/ <foo>$/;"	kind:e	enum:tinyxml2::XMLElement::__anon5
OpenElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   void OpenElement( const char* name );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name )
PARTICLECONTAINER_N3JXVU09	include/MPE/classes/ParticleContainer.hpp	2;"	kind:d
PARTICLE_INC	include/MPE/classes/Particle.hpp	8;"	kind:d
PRESERVE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^   PRESERVE_WHITESPACE,$/;"	kind:e	enum:tinyxml2::Whitespace
Parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* Parent()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
Parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	Parent() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
Parse	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError Parse( const char* xml, size_t nBytes = (size_t)(-1) );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes = (size_t)(-1) )
ParseAttributes	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseAttributes( char* p );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char* p, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( char* p, StrPair* endTag )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char* p, bool processEntities );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( char*, StrPair* endTag )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( char*, StrPair* endTag )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( char*, StrPair* endTag )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( char*, StrPair* endTag )
ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual char* ParseDeep( char*, StrPair* );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( char*, StrPair* )
ParseName	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseName( char* in );$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:( char* in )
ParseText	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseText( char* in, const char* endTag, int strFlags );$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
Particle	include/MPE/classes/Particle.hpp	/^   Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
Particle	include/MPE/classes/Particle.hpp	/^class Particle: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle():$/;"	kind:f	class:mpe::Particle	signature:()
ParticleContainer	include/MPE/classes/ParticleContainer.hpp	/^   class ParticleContainer $/;"	kind:c	namespace:mpe
ParticleContainer	src/MPE/classes/ParticleContainer.cpp	/^ParticleContainer::ParticleContainer(size_t theSize, bool theFixed):$/;"	kind:f	class:mpe::ParticleContainer	signature:(size_t theSize, bool theFixed)
Pop	ext_libs/include/TinyXML2/tinyxml2.h	/^   T Pop()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
PopArr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PopArr( int count )$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:( int count )
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle PreviousSibling()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*	PreviousSibling()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle PreviousSibling() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	PreviousSibling() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement*	PreviousSiblingElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle PreviousSiblingElement( const char* _value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value = 0 )
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle PreviousSiblingElement( const char* _value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value = 0 ) const
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement*	PreviousSiblingElement( const char* value = 0 ) const ;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
Print	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Print( XMLPrinter* streamer = 0 );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer = 0 )
Print	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Print( const char* format, ... );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:( const char* format, ... )
PrintError	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PrintError() const;$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:() const
PrintSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PrintSpace( int depth );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:( int depth )
PrintString	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
ProcessEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool ProcessEntities() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
Push	ext_libs/include/TinyXML2/tinyxml2.h	/^         _blockPtrs.Push( block );$/;"	kind:p	signature:( block )
Push	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Push( T t )$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:( T t )
PushArr	ext_libs/include/TinyXML2/tinyxml2.h	/^   T* PushArr( int count )$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:( int count )
PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, bool value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, const char* value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, double value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, int value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, unsigned value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
PushComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushComment( const char* comment );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
PushDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushDeclaration( const char* value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
PushHeader	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( bool value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( const char* text, bool cdata = false );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata = false )
PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( double value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( float value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( int value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( unsigned value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
PushUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushUnknown( const char* value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, bool* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, double* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, float* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, unsigned int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryBoolAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolAttribute( const char* name, bool* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryBoolText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolText( bool* bval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
QueryBoolValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolValue( bool* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
QueryDoubleAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleAttribute( const char* name, double* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryDoubleText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleText( double* dval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
QueryDoubleValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleValue( double* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
QueryFloatAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatAttribute( const char* name, float* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryFloatText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatText( float* fval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
QueryFloatValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatValue( float* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
QueryIntAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntAttribute( const char* name, int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryIntText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntText( int* ival ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
QueryIntValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntValue( int* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
QueryUnsignedAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryUnsignedText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
QueryUnsignedValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
RADIAL	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
RANDOM	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
REAL_INFINITY	include/MPE/Config.hpp	/^const Real REAL_INFINITY = std::numeric_limits<Real>::infinity();$/;"	kind:m	namespace:mpe
RECTANGLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
REFLECT	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
ReadBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
Real	include/MPE/Config.hpp	/^typedef float Real;$/;"	kind:t	namespace:mpe
Reset	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Reset();$/;"	kind:p	class:tinyxml2::StrPair	access:private	signature:()
RootElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* RootElement()$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:()
RootElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* RootElement() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
STATIC	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
SYSTEM_INC	include/MPE/classes/System.hpp	7;"	kind:d
SaveFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError SaveFile( FILE* fp, bool compact = false );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
SaveFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError SaveFile( const char* filename, bool compact = false );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
SealElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SealElement();$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:()
Set	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Set( char* start, char* end, int flags )$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^      a->SetAttribute( value );$/;"	kind:p	signature:( value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( bool value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, bool value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, const char* value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, double value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, int value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, unsigned value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( double value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( float value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( int value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( unsigned value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
SetBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetBOM( bool useBOM )$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
SetCData	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetCData( bool isCData )$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
SetError	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetError( XMLError error, const char* str1, const char* str2 );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
SetInternedStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetInternedStr( const char* str )$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
SetName	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetName( const char* name );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
SetName	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetName( const char* str, bool staticMem = false )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem = false )
SetStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetStr( const char* str, int flags = 0 );$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags = 0 )
SetTracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void SetTracked() = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:()
SetTracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetTracked()$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
SetValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetValue( const char* val, bool staticMem = false );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem = false )
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
Shape	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:g	class:mpe::Emitter	access:public
Size	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Size() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
SkipWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static char* SkipWhiteSpace( char* p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
SkipWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* SkipWhiteSpace( const char* p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^   StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:()
StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^class StrPair$/;"	kind:c	namespace:tinyxml2
StringEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool StringEqual( const char* p, const char* q, int nChar = INT_MAX )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar = INT_MAX )
System	include/MPE/classes/System.hpp	/^   System(size_t theNParticles,bool theFixed=true);$/;"	kind:p	class:mpe::System	access:public	signature:(size_t theNParticles,bool theFixed=true)
System	include/MPE/classes/System.hpp	/^class System$/;"	kind:c	namespace:mpe
System	src/MPE/classes/System.cpp	/^System::System (size_t theNParticles,bool theFixed):$/;"	kind:f	class:mpe::System	signature:(size_t theNParticles,bool theFixed)
TEXT_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^      TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
TEXT_ELEMENT_LEAVE_ENTITIES	ext_libs/include/TinyXML2/tinyxml2.h	/^      TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
TINYXML2_INCLUDED	ext_libs/include/TinyXML2/tinyxml2.h	25;"	kind:d
TIXML2_MAJOR_VERSION	ext_libs/include/TinyXML2/tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 1;$/;"	kind:v
TIXML2_MINOR_VERSION	ext_libs/include/TinyXML2/tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	kind:v
TIXML2_PATCH_VERSION	ext_libs/include/TinyXML2/tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 11;$/;"	kind:v
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	63;"	kind:d
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	66;"	kind:d
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	69;"	kind:d
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	72;"	kind:d
TIXML_SNPRINTF	ext_libs/include/TinyXML2/tinyxml2.h	/^inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	kind:f	signature:( char* buffer, size_t size, const char* format, ... )
TIXML_SNPRINTF	ext_libs/include/TinyXML2/tinyxml2.h	97;"	kind:d
TIXML_SSCANF	ext_libs/include/TinyXML2/tinyxml2.h	93;"	kind:d
TIXML_SSCANF	ext_libs/include/TinyXML2/tinyxml2.h	98;"	kind:d
TextRect	include/MPE/Config.hpp	/^struct TextRect$/;"	kind:s	namespace:mpe
ToBool	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool	ToBool( const char* str, bool* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLComment*		ToComment()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLComment*	ToComment()$/;"	kind:f	class:tinyxml2::XMLComment	access:public	signature:()
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLComment*		ToComment() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLComment* ToComment() const$/;"	kind:f	class:tinyxml2::XMLComment	access:public	signature:() const
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration* ToDeclaration()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLDeclaration* ToDeclaration() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDeclaration*	ToDeclaration()$/;"	kind:f	class:tinyxml2::XMLDeclaration	access:public	signature:()
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDeclaration*	ToDeclaration()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDeclaration*	ToDeclaration() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDeclaration* ToDeclaration() const$/;"	kind:f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDocument*	ToDocument()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDocument* ToDocument()$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:()
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDocument*		ToDocument() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDocument* ToDocument() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
ToDouble	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool ToDouble( const char* str, double* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* ToElement()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* ToElement() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLElement*		ToElement()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLElement* ToElement()$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:()
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLElement*		ToElement() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLElement* ToElement() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
ToFloat	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool	ToFloat( const char* str, float* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
ToInt	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool	ToInt( const char* str, int* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
ToNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* ToNode()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
ToNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode* ToNode() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( bool v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( double v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( float v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( int v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText* ToText()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLText* ToText() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLText*		ToText()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLText* ToText()$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:()
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLText*			ToText() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLText* ToText() const$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:() const
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown* ToUnknown()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLUnknown* ToUnknown() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLUnknown*		ToUnknown()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLUnknown*	ToUnknown()$/;"	kind:f	class:tinyxml2::XMLUnknown	access:public	signature:()
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLUnknown*		ToUnknown() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLUnknown* ToUnknown() const$/;"	kind:f	class:tinyxml2::XMLUnknown	access:public	signature:() const
ToUnsigned	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool ToUnsigned( const char* str, unsigned* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
Trace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Trace( const char* name )$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
Unlink	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Unlink( XMLNode* child );$/;"	kind:p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
UnsignedAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   unsigned UnsignedAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
UnsignedValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   unsigned UnsignedValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Untracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Untracked() const$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:() const
VEC2_GSAIH2DS	include/MPE/classes/Vec2.hpp	7;"	kind:d
Value	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Value() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Value	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Value() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(): x(0), y(0) {}$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(Real theX, Real theY):$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
Vec2	include/MPE/classes/Vec2.hpp	/^class Vec2$/;"	kind:c	namespace:mpe
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLComment& \/*comment*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLComment& comment );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLDeclaration& declaration );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLText& \/*text*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLText& text );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLUnknown& \/*unknown*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLUnknown& unknown );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLDocument& \/*doc*\/ )$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLDocument& \/*doc*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLElement& \/*element*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLElement& element );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
Whitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^enum Whitespace$/;"	kind:g	namespace:tinyxml2
WhitespaceMode	ext_libs/include/TinyXML2/tinyxml2.h	/^   Whitespace WhitespaceMode() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute() : _next( 0 ) {}$/;"	kind:f	class:tinyxml2::XMLAttribute	access:private	signature:()
XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLAttribute$/;"	kind:c	namespace:tinyxml2
XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment( const XMLComment& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLComment : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLConstHandle& ref )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLNode& node )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLNode* node )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLConstHandle$/;"	kind:c	namespace:tinyxml2
XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLDeclaration : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLDocument : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement( const XMLElement& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLElement : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
XMLError	ext_libs/include/TinyXML2/tinyxml2.h	/^enum XMLError$/;"	kind:g	namespace:tinyxml2
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( XMLNode& node )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( XMLNode* node )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( const XMLHandle& ref )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLHandle$/;"	kind:c	namespace:tinyxml2
XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode( XMLDocument* );$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode( const XMLNode& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLNode$/;"	kind:c	namespace:tinyxml2
XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLPrinter( FILE* file = 0, bool compact = false );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file = 0, bool compact = false )
XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLPrinter : public XMLVisitor$/;"	kind:c	namespace:tinyxml2	inherits:XMLVisitor
XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	kind:f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText( const XMLText& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLText : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLUnknown : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
XMLUtil	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLUtil$/;"	kind:c	namespace:tinyxml2
XMLVisitor	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLVisitor$/;"	kind:c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_CAN_NOT_CONVERT_TEXT,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_ELEMENT_MISMATCH,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_EMPTY_DOCUMENT,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_NOT_FOUND,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_READ_ERROR,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_IDENTIFYING_TAG,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_MISMATCHED_ELEMENT,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_ATTRIBUTE,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_CDATA,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_COMMENT,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_DECLARATION,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_ELEMENT,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_TEXT,$/;"	kind:e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_UNKNOWN,$/;"	kind:e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_ATTRIBUTE,$/;"	kind:e	enum:tinyxml2::XMLError
XML_NO_ERROR	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_ERROR = 0,$/;"	kind:e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_TEXT_NODE$/;"	kind:e	enum:tinyxml2::XMLError
XML_SUCCESS	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_SUCCESS = 0,$/;"	kind:e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_WRONG_ATTRIBUTE_TYPE,$/;"	kind:e	enum:tinyxml2::XMLError
_accumulator	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< char, 20 > _accumulator;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_allocated	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _allocated;		\/\/ objects allocated$/;"	kind:m	class:tinyxml2::DynArray	access:private
_attributePool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_blockPtrs	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< Block*, 10 > _blockPtrs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
_buffer	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< char, 20 > _buffer;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_charBuffer	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*       _charBuffer;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_closingType	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _closingType;$/;"	kind:m	class:tinyxml2::XMLElement	access:private
_commentPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_compactMode	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _compactMode;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_currentAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _currentAllocs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
_depth	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _depth;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_document	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument*	_document;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_elementJustOpened	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _elementJustOpened;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_elementPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_end	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*   _end;$/;"	kind:m	class:tinyxml2::StrPair	access:private
_entityFlag	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _entityFlag[ENTITY_RANGE];$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_errorID	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError    _errorID;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_errorStr1	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* _errorStr1;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_errorStr2	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* _errorStr2;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_firstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_firstChild;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_firstElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _firstElement;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_flags	ext_libs/include/TinyXML2/tinyxml2.h	/^   int     _flags;$/;"	kind:m	class:tinyxml2::StrPair	access:private
_fp	ext_libs/include/TinyXML2/tinyxml2.h	/^   FILE* _fp;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_isCData	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _isCData;$/;"	kind:m	class:tinyxml2::XMLText	access:private
_lastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_lastChild;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_maxAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _maxAllocs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
_mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   T*  _mem;$/;"	kind:m	class:tinyxml2::DynArray	access:private
_memPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool*		_memPool;$/;"	kind:m	class:tinyxml2::XMLNode	access:private
_memPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool*        _memPool;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
_nAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _nAllocs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
_nUntracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _nUntracked;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
_name	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair _name;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
_next	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute*   _next;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
_next	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_next;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_node	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* _node;$/;"	kind:m	class:tinyxml2::XMLHandle	access:private
_node	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode* _node;$/;"	kind:m	class:tinyxml2::XMLConstHandle	access:private
_parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_parent;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_pool	ext_libs/include/TinyXML2/tinyxml2.h	/^   T   _pool[INIT];$/;"	kind:m	class:tinyxml2::DynArray	access:private
_prev	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_prev;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_processEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool        _processEntities;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_processEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _processEntities;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_restrictedEntityFlag	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_root	ext_libs/include/TinyXML2/tinyxml2.h	/^   Chunk* _root;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
_rootAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* _rootAttribute;$/;"	kind:m	class:tinyxml2::XMLElement	access:private
_size	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _size;			\/\/ number objects in use$/;"	kind:m	class:tinyxml2::DynArray	access:private
_stack	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< const char*, 10 > _stack;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_start	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*   _start;$/;"	kind:m	class:tinyxml2::StrPair	access:private
_textDepth	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _textDepth;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
_textPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_value	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair	_value;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
_value	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair _value;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
_whitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^   Whitespace  _whitespace;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
_writeBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool        _writeBOM;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
a	ext_libs/include/TinyXML2/tinyxml2.h	/^      XMLAttribute* a = FindOrCreateAttribute( name );$/;"	kind:l
a	ext_libs/include/TinyXML2/tinyxml2.h	/^      const XMLAttribute* a = FindAttribute( name );$/;"	kind:l
a	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
aBoolean	tests/tests.cpp	/^   bool aBoolean = aParticleSystem.initFromFile("Emitter.xml");$/;"	kind:l
aCosine	include/MPE/classes/Vec2.hpp	/^      Real aCosine = std::cos(theAngle);$/;"	kind:l
aEmitter	tests/tests.cpp	/^      mpe::Emitter& aEmitter = aParticleSystem.getEmitter("Emitter1");$/;"	kind:l
aFile	src/MPE/classes/System.cpp	/^   tinyxml2::XMLDocument aFile;$/;"	kind:l
aSine	include/MPE/classes/Vec2.hpp	/^      Real aSine = std::sin(theAngle);$/;"	kind:l
addAffector	include/MPE/classes/System.hpp	/^   void     addAffector(AffectorPtr theAffector);$/;"	kind:p	class:mpe::System	access:public	signature:(AffectorPtr theAffector)
addAffector	src/MPE/classes/System.cpp	/^void System::addAffector(AffectorPtr theAffector)$/;"	kind:f	class:mpe::System	signature:(AffectorPtr theAffector)
addEmitter	include/MPE/classes/System.hpp	/^   void     addEmitter(Emitter& theEmitter);$/;"	kind:p	class:mpe::System	access:public	signature:(Emitter& theEmitter)
addEmitter	src/MPE/classes/System.cpp	/^void System::addEmitter(Emitter& theEmitter)$/;"	kind:f	class:mpe::System	signature:(Emitter& theEmitter)
addFocus	include/MPE/classes/System.hpp	/^   void     addFocus(FocusPtr theFocus);$/;"	kind:p	class:mpe::System	access:public	signature:(FocusPtr theFocus)
addFocus	src/MPE/classes/System.cpp	/^void System::addFocus(FocusPtr theFocus)$/;"	kind:f	class:mpe::System	signature:(FocusPtr theFocus)
addFocus	tests/tests.cpp	/^   aParticleSystem.addFocus(aFocus);$/;"	kind:p	file:	signature:(aFocus)
addParticle	include/MPE/classes/ParticleContainer.hpp	/^      Particle* addParticle();$/;"	kind:p	class:mpe::ParticleContainer	access:public	signature:()
addParticle	include/MPE/classes/System.hpp	/^   Particle*  addParticle();$/;"	kind:p	class:mpe::System	access:public	signature:()
addParticle	src/MPE/classes/ParticleContainer.cpp	/^Particle* ParticleContainer::addParticle()            $/;"	kind:f	class:mpe::ParticleContainer	signature:()
addParticle	src/MPE/classes/System.cpp	/^Particle* System::addParticle ()$/;"	kind:f	class:mpe::System	signature:()
affect	include/MPE/classes/Affector.hpp	/^   virtual void affect(Particle& theParticle, Real theElapsedTime) = 0;$/;"	kind:p	class:mpe::Affector	access:public	signature:(Particle& theParticle, Real theElapsedTime)
age	include/MPE/classes/Mortal.hpp	/^   inline void age(Real theElapsedTime)$/;"	kind:f	class:mpe::Mortal	access:public	signature:(Real theElapsedTime)
anEmitterID	src/MPE/classes/System.cpp	/^   EmitterID anEmitterID = theEmitter.getID();$/;"	kind:l
anFocus	src/MPE/classes/Emitter.cpp	/^   FocusPtr anFocus = Focus::create(getFocusTOL(),$/;"	kind:l
anLength	include/MPE/classes/Vec2.hpp	/^      Real anLength = length();$/;"	kind:l
anParticle	src/MPE/classes/Focus.cpp	/^   Particle* anParticle = mEmitter.getSystem()->addParticle();$/;"	kind:l
anPosition	src/MPE/classes/Emitter.cpp	/^   Vec2 anPosition;$/;"	kind:l
anPosition	src/MPE/classes/Focus.cpp	/^      Vec2 anPosition = mEmitter.generatePosition(*this); $/;"	kind:l
anVelocity	src/MPE/classes/Emitter.cpp	/^   Vec2 anVelocity;$/;"	kind:l
anVelocity	src/MPE/classes/Focus.cpp	/^      Vec2 anVelocity = mEmitter.generateVelocity(*this,anPosition); $/;"	kind:l
b	ext_libs/include/TinyXML2/tinyxml2.h	/^      bool b = false;$/;"	kind:l
b	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
begin	include/MPE/classes/ParticleContainer.hpp	/^      const_iterator begin() const {return mParticles;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:() const
begin	include/MPE/classes/ParticleContainer.hpp	/^      iterator begin() {return mParticles;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:()
belongToGroup	include/MPE/classes/Particle.hpp	/^   bool belongToGroup(const GroupID theGroups) const;$/;"	kind:p	class:mpe::Particle	access:public	signature:(const GroupID theGroups) const
belongToGroup	src/MPE/classes/Particle.cpp	/^bool Particle::belongToGroup(const GroupID theGroups) const$/;"	kind:f	class:mpe::Particle	signature:(const GroupID theGroups) const
block	ext_libs/include/TinyXML2/tinyxml2.h	/^         Block* block = new Block();$/;"	kind:l
chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk chunk[COUNT];$/;"	kind:m	struct:tinyxml2::MemPoolT::Block	access:public
chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk* chunk = (Chunk*)mem;$/;"	kind:l
cout	tests/tests.cpp	/^      std::cout << "Particle system init from 'Emitter.xml'";$/;"	kind:m	class:std	file:
cout	tests/tests.cpp	/^      std::cout << "Something was wrong...";$/;"	kind:m	class:std	file:
create	include/MPE/classes/Focus.hpp	/^   static FocusPtr create(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
create	include/MPE/classes/Generator.hpp	/^   static Generator<T> create(T theMin,T theMax);$/;"	kind:p	class:mpe::Generator	access:public	signature:(T theMin,T theMax)
create	src/MPE/classes/Focus.cpp	/^FocusPtr Focus::create(Real    theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
create	src/MPE/classes/Generator.cpp	/^Generator<T> Generator<T>::create(T theMin, T theMax)$/;"	kind:f	class:mpe::Generator	signature:(T theMin, T theMax)
createFocus	include/MPE/classes/Emitter.hpp	/^   FocusPtr createFocus(Vec2 thePosition,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP) const
createFocus	include/MPE/classes/System.hpp	/^   FocusPtr   createFocus(EmitterID theEmitter,$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitter, Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP)
createFocus	src/MPE/classes/Emitter.cpp	/^FocusPtr Emitter::createFocus(Vec2   thePosition,$/;"	kind:f	class:mpe::Emitter	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups) const
createFocus	src/MPE/classes/System.cpp	/^FocusPtr System::createFocus(EmitterID theEmitterID,$/;"	kind:f	class:mpe::System	signature:(EmitterID theEmitterID, Vec2 thePosition, Real theAngle, GroupID theGroups)
createParticle	include/MPE/classes/Focus.hpp	/^   Particle createParticle();$/;"	kind:p	class:mpe::Focus	access:private	signature:()
d	ext_libs/include/TinyXML2/tinyxml2.h	/^      double d = 0;$/;"	kind:l
die	include/MPE/classes/Mortal.hpp	/^   inline void die()$/;"	kind:f	class:mpe::Mortal	access:private	signature:()
drain	include/MPE/classes/Focus.hpp	/^   Integer drain(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theElapsedTime)
drain	src/MPE/classes/Focus.cpp	/^Integer Focus::drain(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
emit	include/MPE/classes/Focus.hpp	/^   void emit(Integer theNParticles);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Integer theNParticles)
emit	src/MPE/classes/Focus.cpp	/^void Focus::emit(Integer theNParticles)$/;"	kind:f	class:mpe::Focus	signature:(Integer theNParticles)
end	include/MPE/classes/ParticleContainer.hpp	/^      const_iterator end() const {return mParticles + mSize;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:() const
end	include/MPE/classes/ParticleContainer.hpp	/^      iterator end() {return mParticles + mSize;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:()
f	ext_libs/include/TinyXML2/tinyxml2.h	/^      float f = 0;$/;"	kind:l
g	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
generatePosition	include/MPE/classes/Emitter.hpp	/^   Vec2 generatePosition(const Focus& theFocus) const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus) const
generatePosition	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generatePosition(const Focus& theFocus) const$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus) const
generateVelocity	include/MPE/classes/Emitter.hpp	/^   Vec2 generateVelocity(const Focus& theFocus,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
generateVelocity	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generateVelocity(const Focus& theFocus,$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
getAge	include/MPE/classes/Mortal.hpp	/^   inline Real getAge() const$/;"	kind:f	class:mpe::Mortal	access:public	signature:() const
getAngle	include/MPE/classes/Focus.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getAngle	include/MPE/classes/Particle.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getAngle	src/MPE/classes/Focus.cpp	/^Real Focus::getAngle() const$/;"	kind:f	class:mpe::Focus	signature:() const
getAngle	src/MPE/classes/Particle.cpp	/^Real Particle::getAngle() const$/;"	kind:f	class:mpe::Particle	signature:() const
getAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real getAngularVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getAngularVelocity	src/MPE/classes/Particle.cpp	/^Real Particle::getAngularVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
getColor	include/MPE/classes/Particle.hpp	/^   Color getColor() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getColor	src/MPE/classes/Particle.cpp	/^Color Particle::getColor() const$/;"	kind:f	class:mpe::Particle	signature:() const
getEmitter	include/MPE/classes/System.hpp	/^   Emitter& getEmitter(EmitterID theEmitterID);$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitterID)
getEmitter	src/MPE/classes/System.cpp	/^Emitter& System::getEmitter ( EmitterID theEmitterID )$/;"	kind:f	class:mpe::System	signature:( EmitterID theEmitterID )
getFocusHeight	include/MPE/classes/Emitter.hpp	/^   Real getFocusHeight() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusHeight() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusNP	include/MPE/classes/Emitter.hpp	/^   Integer getFocusNP() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusNP	src/MPE/classes/Emitter.cpp	/^Integer Emitter::getFocusNP() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusPPS	include/MPE/classes/Emitter.hpp	/^   Real getFocusPPS() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusPPS	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusPPS() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusTOL	include/MPE/classes/Emitter.hpp	/^   Real getFocusTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusWidth	include/MPE/classes/Emitter.hpp	/^   Real getFocusWidth() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusWidth() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getGroups	include/MPE/classes/Particle.hpp	/^   GroupID getGroups() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getGroups	src/MPE/classes/Particle.cpp	/^GroupID Particle::getGroups() const$/;"	kind:f	class:mpe::Particle	signature:() const
getHeight	include/MPE/classes/Focus.hpp	/^   Real getHeight() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getHeight	src/MPE/classes/Focus.cpp	/^Real Focus::getHeight() const$/;"	kind:f	class:mpe::Focus	signature:() const
getID	include/MPE/classes/Emitter.hpp	/^   EmitterID getID() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getID	src/MPE/classes/Emitter.cpp	/^EmitterID Emitter::getID() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2 getLinearVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getLinearVelocity	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getLinearVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
getPPS	include/MPE/classes/Focus.hpp	/^   Real getPPS();$/;"	kind:p	class:mpe::Focus	access:public	signature:()
getPPS	src/MPE/classes/Focus.cpp	/^Real Focus::getPPS ()$/;"	kind:f	class:mpe::Focus	signature:()
getParticleAV	include/MPE/classes/Emitter.hpp	/^   Real getParticleAV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleAV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleAngle	include/MPE/classes/Emitter.hpp	/^   Real getParticleAngle() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleAngle	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAngle() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleAngle	tests/tests.cpp	/^      std::cout << aEmitter.getFocusTOL() << "  " << aEmitter.getParticleAngle() ;$/;"	kind:p	file:	signature:()
getParticleLV	include/MPE/classes/Emitter.hpp	/^   Real getParticleLV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleLV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleLV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleSize	include/MPE/classes/Emitter.hpp	/^   Real getParticleSize() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleSize	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleSize() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleTOL	include/MPE/classes/Emitter.hpp	/^   Real getParticleTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticlesBegin	include/MPE/classes/System.hpp	/^   ParticleContainer::const_iterator getParticlesBegin() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
getParticlesBegin	src/MPE/classes/System.cpp	/^ParticleContainer::const_iterator System::getParticlesBegin() const$/;"	kind:f	class:mpe::System	signature:() const
getParticlesEnd	include/MPE/classes/System.hpp	/^   ParticleContainer::const_iterator getParticlesEnd() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
getParticlesEnd	src/MPE/classes/System.cpp	/^ParticleContainer::const_iterator System::getParticlesEnd() const$/;"	kind:f	class:mpe::System	signature:() const
getParticlesSize	include/MPE/classes/System.hpp	/^   Integer getParticlesSize();$/;"	kind:p	class:mpe::System	access:public	signature:()
getParticlesSize	src/MPE/classes/System.cpp	/^Integer System::getParticlesSize()$/;"	kind:f	class:mpe::System	signature:()
getParticlesSize	tests/tests.cpp	/^      std::cout <<  "\\nNumber of particles:  " << aParticleSystem->getParticlesSize();$/;"	kind:p	file:	signature:()
getPosition	include/MPE/classes/Focus.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getPosition	include/MPE/classes/Particle.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getPosition	src/MPE/classes/Focus.cpp	/^Vec2 Focus::getPosition() const$/;"	kind:f	class:mpe::Focus	signature:() const
getPosition	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getPosition() const$/;"	kind:f	class:mpe::Particle	signature:() const
getSize	include/MPE/classes/Particle.hpp	/^   Real getSize() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getSize	src/MPE/classes/Particle.cpp	/^Real Particle::getSize() const$/;"	kind:f	class:mpe::Particle	signature:() const
getSystem	include/MPE/classes/Emitter.hpp	/^   System* getSystem() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getSystem	src/MPE/classes/Emitter.cpp	/^System* Emitter::getSystem() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getTextRect	include/MPE/classes/Emitter.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getTextRect	include/MPE/classes/Particle.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getTextRect	src/MPE/classes/Emitter.cpp	/^TextRect Emitter::getTextRect() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getTextRect	src/MPE/classes/Particle.cpp	/^TextRect Particle::getTextRect() const$/;"	kind:f	class:mpe::Particle	signature:() const
getWidth	include/MPE/classes/Focus.hpp	/^   Real getWidth() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getWidth	src/MPE/classes/Focus.cpp	/^Real Focus::getWidth() const$/;"	kind:f	class:mpe::Focus	signature:() const
getX	include/MPE/classes/Vec2.hpp	/^   Real getX()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
getXFactor	include/MPE/classes/System.hpp	/^   Real     getXFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
getXFactor	src/MPE/classes/System.cpp	/^Real System::getXFactor() const$/;"	kind:f	class:mpe::System	signature:() const
getY	include/MPE/classes/Vec2.hpp	/^   Real getY()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
getYFactor	include/MPE/classes/System.hpp	/^   Real     getYFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
getYFactor	src/MPE/classes/System.cpp	/^Real System::getYFactor() const$/;"	kind:f	class:mpe::System	signature:() const
grow	include/MPE/classes/ParticleContainer.hpp	/^      bool grow();$/;"	kind:p	class:mpe::ParticleContainer	access:private	signature:()
grow	src/MPE/classes/ParticleContainer.cpp	/^bool ParticleContainer::grow()$/;"	kind:f	class:mpe::ParticleContainer	signature:()
height	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
i	ext_libs/include/TinyXML2/tinyxml2.h	/^      int i = 0;$/;"	kind:l
i	ext_libs/include/TinyXML2/tinyxml2.h	/^      unsigned i = 0;$/;"	kind:l
init	include/MPE/classes/Vec2.hpp	/^   void init(Real theX, Real theY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
initFromFile	include/MPE/classes/System.hpp	/^   bool initFromFile(std::string theFilename);$/;"	kind:p	class:mpe::System	access:public	signature:(std::string theFilename)
initFromFile	src/MPE/classes/System.cpp	/^bool System::initFromFile(std::string theFilename)$/;"	kind:f	class:mpe::System	signature:(std::string theFilename)
initParticle	include/MPE/classes/Focus.hpp	/^   void initParticle();$/;"	kind:p	class:mpe::Focus	access:private	signature:()
initParticle	src/MPE/classes/Focus.cpp	/^void Focus::initParticle()$/;"	kind:f	class:mpe::Focus	signature:()
isAlive	include/MPE/classes/Mortal.hpp	/^   inline bool isAlive()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(anEmitterID);$/;"	kind:l
it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(theEmitterID);$/;"	kind:l
kill	include/MPE/classes/Mortal.hpp	/^   inline void kill()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
length	include/MPE/classes/Vec2.hpp	/^   Real length()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mAffectors	include/MPE/classes/System.hpp	/^   std::list<AffectorPtr>        mAffectors;$/;"	kind:m	class:mpe::System	access:protected
mAge	include/MPE/classes/Mortal.hpp	/^   Real mAge;$/;"	kind:m	class:mpe::Mortal	access:private
mAlive	include/MPE/classes/Mortal.hpp	/^   bool mAlive;$/;"	kind:m	class:mpe::Mortal	access:private
mAngle	include/MPE/classes/Focus.hpp	/^   Real      mAngle;   \/\/\/< Angle.$/;"	kind:m	class:mpe::Focus	access:private
mAngle	include/MPE/classes/Particle.hpp	/^   Real      mAngle;$/;"	kind:m	class:mpe::Particle	access:private
mAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real      mAngularVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mColor	include/MPE/classes/Particle.hpp	/^   Color     mColor;$/;"	kind:m	class:mpe::Particle	access:private
mDispersion	include/MPE/classes/Emitter.hpp	/^   Dispersion  mDispersion;    \/\/\/< Type of paricles' dispersion.$/;"	kind:m	class:mpe::Emitter	access:private
mEP	include/MPE/classes/Focus.hpp	/^   Integer   mEP;      \/\/\/< Particles already emitted by the focus.$/;"	kind:m	class:mpe::Focus	access:private
mEmitter	include/MPE/classes/Focus.hpp	/^   const Emitter&  mEmitter;\/\/\/< The emitter server for the focus.$/;"	kind:m	class:mpe::Focus	access:private
mEmitters	include/MPE/classes/System.hpp	/^   std::map<EmitterID, Emitter>  mEmitters;$/;"	kind:m	class:mpe::System	access:protected
mFixedSize	include/MPE/classes/ParticleContainer.hpp	/^      bool mFixedSize;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mFixedSize	src/MPE/classes/ParticleContainer.cpp	/^   mFixedSize(theFixed)$/;"	kind:f	namespace:mpe	signature:(theFixed)
mFocusses	include/MPE/classes/System.hpp	/^   std::list<FocusPtr>           mFocusses;$/;"	kind:m	class:mpe::System	access:protected
mGenFocHeight	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocHeight;\/\/\/< Generator of focus height.$/;"	kind:m	class:mpe::Emitter	access:private
mGenFocNP	include/MPE/classes/Emitter.hpp	/^   Generator<Integer> mGenFocNP; \/\/\/< Generator of focus number of particles.$/;"	kind:m	class:mpe::Emitter	access:private
mGenFocPPS	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocPPS;   \/\/\/< Generator of focus particles per second.$/;"	kind:m	class:mpe::Emitter	access:private
mGenFocTOL	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocTOL;   \/\/\/< Generator of focus time of life.$/;"	kind:m	class:mpe::Emitter	access:private
mGenFocWidth	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocWidth; \/\/\/< Generator of focus width.$/;"	kind:m	class:mpe::Emitter	access:private
mGenParAV	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParAV;    \/\/\/< Generator of particles angular velocity.$/;"	kind:m	class:mpe::Emitter	access:private
mGenParAngle	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParAngle; \/\/\/< Generator of particles angle.$/;"	kind:m	class:mpe::Emitter	access:private
mGenParLV	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParLV;    \/\/\/< Generator of paricles impulsion.$/;"	kind:m	class:mpe::Emitter	access:private
mGenParSize	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParSize; \/\/\/< Generator of paricles width.$/;"	kind:m	class:mpe::Emitter	access:private
mGenParTOL	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParTOL;   \/\/\/< Generator of particles lifetime.$/;"	kind:m	class:mpe::Emitter	access:private
mGenerator	include/MPE/classes/Generator.hpp	/^   std::function<T()> mGenerator;$/;"	kind:m	class:mpe::Generator	access:private
mGroups	include/MPE/classes/Focus.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Focus	access:private
mGroups	include/MPE/classes/Particle.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Particle	access:private
mHeight	include/MPE/classes/Focus.hpp	/^   Real      mHeight;  \/\/\/< Height.$/;"	kind:m	class:mpe::Focus	access:private
mID	include/MPE/classes/Emitter.hpp	/^   EmitterID   mID;            \/\/\/< Unique EmitterID for the emitter.$/;"	kind:m	class:mpe::Emitter	access:private
mLifetime	include/MPE/classes/Mortal.hpp	/^   Real mLifetime;$/;"	kind:m	class:mpe::Mortal	access:private
mLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2      mLinearVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mMaxSize	include/MPE/classes/ParticleContainer.hpp	/^      size_t mMaxSize;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mPPS	include/MPE/classes/Focus.hpp	/^   Real      mPPS;$/;"	kind:m	class:mpe::Focus	access:private
mParticles	include/MPE/classes/ParticleContainer.hpp	/^      Particle*  mParticles;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mParticles	include/MPE/classes/System.hpp	/^   ParticleContainer             mParticles;$/;"	kind:m	class:mpe::System	access:protected
mPosition	include/MPE/classes/Focus.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Focus	access:private
mPosition	include/MPE/classes/Particle.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Particle	access:private
mRect	include/MPE/classes/Emitter.hpp	/^   TextRect    mRect;$/;"	kind:m	class:mpe::Emitter	access:private
mShape	include/MPE/classes/Emitter.hpp	/^   Shape       mShape;         \/\/\/< The emitter's shape.$/;"	kind:m	class:mpe::Emitter	access:private
mSize	include/MPE/classes/Particle.hpp	/^   Real      mSize;$/;"	kind:m	class:mpe::Particle	access:private
mSize	include/MPE/classes/ParticleContainer.hpp	/^      size_t mSize;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mSystem	include/MPE/classes/Emitter.hpp	/^   System*     mSystem;$/;"	kind:m	class:mpe::Emitter	access:private
mTP	include/MPE/classes/Focus.hpp	/^   Integer   mTP;      \/\/\/< Total number of Particles. -1 = no number limits$/;"	kind:m	class:mpe::Focus	access:private
mTextRect	include/MPE/classes/Particle.hpp	/^   TextRect  mTextRect;$/;"	kind:m	class:mpe::Particle	access:private
mTimeAcum	include/MPE/classes/Focus.hpp	/^   Real      mTimeAcum;$/;"	kind:m	class:mpe::Focus	access:private
mWidth	include/MPE/classes/Focus.hpp	/^   Real      mWidth;   \/\/\/< Width.$/;"	kind:m	class:mpe::Focus	access:private
mXFactor	include/MPE/classes/System.hpp	/^   Real mXFactor;$/;"	kind:m	class:mpe::System	access:protected
mYFactor	include/MPE/classes/System.hpp	/^   Real mYFactor;$/;"	kind:m	class:mpe::System	access:protected
main	tests/tests.cpp	/^int main(void)$/;"	kind:f	signature:(void)
mem	ext_libs/include/TinyXML2/tinyxml2.h	/^      char    mem[SIZE];$/;"	kind:m	union:tinyxml2::MemPoolT::Chunk	access:public
memcpy	src/MPE/classes/ParticleContainer.cpp	/^      std::memcpy(aParticles,mParticles,sizeof(Particle)*mSize);$/;"	kind:p	class:mpe::std	file:	signature:(aParticles,mParticles,sizeof(Particle)*mSize)
mpe	include/MPE/Config.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Affector.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Emitter.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Focus.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Generator.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Mortal.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Particle.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/ParticleContainer.hpp	/^namespace mpe $/;"	kind:n
mpe	include/MPE/classes/System.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Vec2.hpp	/^namespace mpe$/;"	kind:n
mpe	src/MPE/classes/Affector.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Emitter.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Focus.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Generator.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Mortal.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Particle.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/ParticleContainer.cpp	/^namespace mpe $/;"	kind:n	file:
mpe	src/MPE/classes/System.cpp	/^namespace mpe$/;"	kind:n	file:
mpe::Affector	include/MPE/classes/Affector.hpp	/^class Affector: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
mpe::Affector::Affector	include/MPE/classes/Affector.hpp	/^   Affector(Real      theLifetime);$/;"	kind:p	class:mpe::Affector	access:protected	signature:(Real theLifetime)
mpe::Affector::Affector	src/MPE/classes/Affector.cpp	/^Affector::Affector(Real theLifetime):$/;"	kind:f	class:mpe::Affector	signature:(Real theLifetime)
mpe::Affector::affect	include/MPE/classes/Affector.hpp	/^   virtual void affect(Particle& theParticle, Real theElapsedTime) = 0;$/;"	kind:p	class:mpe::Affector	access:public	signature:(Particle& theParticle, Real theElapsedTime)
mpe::Affector::update	include/MPE/classes/Affector.hpp	/^   virtual void update(Real theElapsedtime)$/;"	kind:f	class:mpe::Affector	access:public	signature:(Real theElapsedtime)
mpe::AffectorPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Affector> AffectorPtr;$/;"	kind:t	namespace:mpe
mpe::Color	include/MPE/Config.hpp	/^struct Color$/;"	kind:s	namespace:mpe
mpe::Color::a	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Color::b	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Color::g	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Color::r	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Emitter	include/MPE/classes/Emitter.hpp	/^class Emitter$/;"	kind:c	namespace:mpe
mpe::Emitter::CIRCLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
mpe::Emitter::DUMMY	include/MPE/classes/Emitter.hpp	/^   static Emitter DUMMY;$/;"	kind:m	class:mpe::Emitter	access:public
mpe::Emitter::DUMMY	src/MPE/classes/Emitter.cpp	/^Emitter Emitter::DUMMY = Emitter("DUMMY");$/;"	kind:m	class:mpe::Emitter	file:
mpe::Emitter::Dispersion	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:g	class:mpe::Emitter	access:public
mpe::Emitter::Emitter	include/MPE/classes/Emitter.hpp	/^   Emitter(EmitterID theID);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(EmitterID theID)
mpe::Emitter::Emitter	src/MPE/classes/Emitter.cpp	/^Emitter::Emitter(EmitterID theID):$/;"	kind:f	class:mpe::Emitter	signature:(EmitterID theID)
mpe::Emitter::LINEAR	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::RADIAL	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::RANDOM	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::RECTANGLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
mpe::Emitter::REFLECT	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::STATIC	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::Shape	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:g	class:mpe::Emitter	access:public
mpe::Emitter::createFocus	include/MPE/classes/Emitter.hpp	/^   FocusPtr createFocus(Vec2 thePosition,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP) const
mpe::Emitter::createFocus	src/MPE/classes/Emitter.cpp	/^FocusPtr Emitter::createFocus(Vec2   thePosition,$/;"	kind:f	class:mpe::Emitter	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups) const
mpe::Emitter::generatePosition	include/MPE/classes/Emitter.hpp	/^   Vec2 generatePosition(const Focus& theFocus) const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus) const
mpe::Emitter::generatePosition	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generatePosition(const Focus& theFocus) const$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus) const
mpe::Emitter::generateVelocity	include/MPE/classes/Emitter.hpp	/^   Vec2 generateVelocity(const Focus& theFocus,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
mpe::Emitter::generateVelocity	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generateVelocity(const Focus& theFocus,$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
mpe::Emitter::getFocusHeight	include/MPE/classes/Emitter.hpp	/^   Real getFocusHeight() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusHeight() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusNP	include/MPE/classes/Emitter.hpp	/^   Integer getFocusNP() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusNP	src/MPE/classes/Emitter.cpp	/^Integer Emitter::getFocusNP() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusPPS	include/MPE/classes/Emitter.hpp	/^   Real getFocusPPS() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusPPS	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusPPS() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusTOL	include/MPE/classes/Emitter.hpp	/^   Real getFocusTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusWidth	include/MPE/classes/Emitter.hpp	/^   Real getFocusWidth() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusWidth() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getID	include/MPE/classes/Emitter.hpp	/^   EmitterID getID() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getID	src/MPE/classes/Emitter.cpp	/^EmitterID Emitter::getID() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleAV	include/MPE/classes/Emitter.hpp	/^   Real getParticleAV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleAV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleAngle	include/MPE/classes/Emitter.hpp	/^   Real getParticleAngle() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleAngle	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAngle() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleLV	include/MPE/classes/Emitter.hpp	/^   Real getParticleLV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleLV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleLV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleSize	include/MPE/classes/Emitter.hpp	/^   Real getParticleSize() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleSize	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleSize() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleTOL	include/MPE/classes/Emitter.hpp	/^   Real getParticleTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getSystem	include/MPE/classes/Emitter.hpp	/^   System* getSystem() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getSystem	src/MPE/classes/Emitter.cpp	/^System* Emitter::getSystem() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getTextRect	include/MPE/classes/Emitter.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getTextRect	src/MPE/classes/Emitter.cpp	/^TextRect Emitter::getTextRect() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::mDispersion	include/MPE/classes/Emitter.hpp	/^   Dispersion  mDispersion;    \/\/\/< Type of paricles' dispersion.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenFocHeight	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocHeight;\/\/\/< Generator of focus height.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenFocNP	include/MPE/classes/Emitter.hpp	/^   Generator<Integer> mGenFocNP; \/\/\/< Generator of focus number of particles.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenFocPPS	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocPPS;   \/\/\/< Generator of focus particles per second.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenFocTOL	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocTOL;   \/\/\/< Generator of focus time of life.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenFocWidth	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocWidth; \/\/\/< Generator of focus width.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenParAV	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParAV;    \/\/\/< Generator of particles angular velocity.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenParAngle	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParAngle; \/\/\/< Generator of particles angle.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenParLV	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParLV;    \/\/\/< Generator of paricles impulsion.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenParSize	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParSize; \/\/\/< Generator of paricles width.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mGenParTOL	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParTOL;   \/\/\/< Generator of particles lifetime.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mID	include/MPE/classes/Emitter.hpp	/^   EmitterID   mID;            \/\/\/< Unique EmitterID for the emitter.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRect	include/MPE/classes/Emitter.hpp	/^   TextRect    mRect;$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mShape	include/MPE/classes/Emitter.hpp	/^   Shape       mShape;         \/\/\/< The emitter's shape.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mSystem	include/MPE/classes/Emitter.hpp	/^   System*     mSystem;$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::sRealRandom	include/MPE/classes/Emitter.hpp	/^   static Generator<Real> sRealRandom;$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::setDispersion	include/MPE/classes/Emitter.hpp	/^   void setDispersion(Dispersion theDispersion);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Dispersion theDispersion)
mpe::Emitter::setDispersion	src/MPE/classes/Emitter.cpp	/^void Emitter::setDispersion(Dispersion theDispersion)$/;"	kind:f	class:mpe::Emitter	signature:(Dispersion theDispersion)
mpe::Emitter::setGeneratorFocusHeight	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusHeight(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusHeight(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusNP	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusNP(Integer theMin, Integer theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Integer theMin, Integer theMax)
mpe::Emitter::setGeneratorFocusNP	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusNP(Integer theMin, Integer theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Integer theMin, Integer theMax)
mpe::Emitter::setGeneratorFocusPPS	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusPPS(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusPPS	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusPPS(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusTOL	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusWidth	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusWidth(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorFocusWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusWidth(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleAV	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleAV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleAV	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleAV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleAngle	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleAngle(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleAngle	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleAngle(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleLV	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleLV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleLV	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleLV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleSize	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleSize(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleSize	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleSize(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleTOL	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setGeneratorParticleTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setShape	include/MPE/classes/Emitter.hpp	/^   void setShape(Shape theShape);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Shape theShape)
mpe::Emitter::setShape	src/MPE/classes/Emitter.cpp	/^void Emitter::setShape(Shape theShape)$/;"	kind:f	class:mpe::Emitter	signature:(Shape theShape)
mpe::Emitter::setSystem	include/MPE/classes/Emitter.hpp	/^   void setSystem(System* theSystem);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(System* theSystem)
mpe::Emitter::setSystem	src/MPE/classes/Emitter.cpp	/^void Emitter::setSystem(System* theSystem)$/;"	kind:f	class:mpe::Emitter	signature:(System* theSystem)
mpe::Emitter::setTextRect	include/MPE/classes/Emitter.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(TextRect theTextRect)
mpe::Emitter::setTextRect	src/MPE/classes/Emitter.cpp	/^void Emitter::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Emitter	signature:(TextRect theTextRect)
mpe::EmitterID	include/MPE/Config.hpp	/^typedef std::string EmitterID;$/;"	kind:t	namespace:mpe
mpe::Focus	include/MPE/classes/Focus.hpp	/^class Focus: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
mpe::Focus::Focus	include/MPE/classes/Focus.hpp	/^   Focus(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::Focus	src/MPE/classes/Focus.cpp	/^Focus::Focus(Real           theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::create	include/MPE/classes/Focus.hpp	/^   static FocusPtr create(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::create	src/MPE/classes/Focus.cpp	/^FocusPtr Focus::create(Real    theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::createParticle	include/MPE/classes/Focus.hpp	/^   Particle createParticle();$/;"	kind:p	class:mpe::Focus	access:private	signature:()
mpe::Focus::drain	include/MPE/classes/Focus.hpp	/^   Integer drain(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theElapsedTime)
mpe::Focus::drain	src/MPE/classes/Focus.cpp	/^Integer Focus::drain(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
mpe::Focus::emit	include/MPE/classes/Focus.hpp	/^   void emit(Integer theNParticles);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Integer theNParticles)
mpe::Focus::emit	src/MPE/classes/Focus.cpp	/^void Focus::emit(Integer theNParticles)$/;"	kind:f	class:mpe::Focus	signature:(Integer theNParticles)
mpe::Focus::getAngle	include/MPE/classes/Focus.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getAngle	src/MPE/classes/Focus.cpp	/^Real Focus::getAngle() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::getHeight	include/MPE/classes/Focus.hpp	/^   Real getHeight() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getHeight	src/MPE/classes/Focus.cpp	/^Real Focus::getHeight() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::getPPS	include/MPE/classes/Focus.hpp	/^   Real getPPS();$/;"	kind:p	class:mpe::Focus	access:public	signature:()
mpe::Focus::getPPS	src/MPE/classes/Focus.cpp	/^Real Focus::getPPS ()$/;"	kind:f	class:mpe::Focus	signature:()
mpe::Focus::getPosition	include/MPE/classes/Focus.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getPosition	src/MPE/classes/Focus.cpp	/^Vec2 Focus::getPosition() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::getWidth	include/MPE/classes/Focus.hpp	/^   Real getWidth() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getWidth	src/MPE/classes/Focus.cpp	/^Real Focus::getWidth() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::initParticle	include/MPE/classes/Focus.hpp	/^   void initParticle();$/;"	kind:p	class:mpe::Focus	access:private	signature:()
mpe::Focus::initParticle	src/MPE/classes/Focus.cpp	/^void Focus::initParticle()$/;"	kind:f	class:mpe::Focus	signature:()
mpe::Focus::mAngle	include/MPE/classes/Focus.hpp	/^   Real      mAngle;   \/\/\/< Angle.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mEP	include/MPE/classes/Focus.hpp	/^   Integer   mEP;      \/\/\/< Particles already emitted by the focus.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mEmitter	include/MPE/classes/Focus.hpp	/^   const Emitter&  mEmitter;\/\/\/< The emitter server for the focus.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mGroups	include/MPE/classes/Focus.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mHeight	include/MPE/classes/Focus.hpp	/^   Real      mHeight;  \/\/\/< Height.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mPPS	include/MPE/classes/Focus.hpp	/^   Real      mPPS;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mPosition	include/MPE/classes/Focus.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mTP	include/MPE/classes/Focus.hpp	/^   Integer   mTP;      \/\/\/< Total number of Particles. -1 = no number limits$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mTimeAcum	include/MPE/classes/Focus.hpp	/^   Real      mTimeAcum;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mWidth	include/MPE/classes/Focus.hpp	/^   Real      mWidth;   \/\/\/< Width.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::setAngle	include/MPE/classes/Focus.hpp	/^   void setAngle(Real theAngle);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theAngle)
mpe::Focus::setAngle	src/MPE/classes/Focus.cpp	/^void Focus::setAngle(Real theAngle)$/;"	kind:f	class:mpe::Focus	signature:(Real theAngle)
mpe::Focus::setHeight	include/MPE/classes/Focus.hpp	/^   void setHeight(Real theHeight);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theHeight)
mpe::Focus::setHeight	src/MPE/classes/Focus.cpp	/^void Focus::setHeight(Real theHeight)$/;"	kind:f	class:mpe::Focus	signature:(Real theHeight)
mpe::Focus::setPPS	include/MPE/classes/Focus.hpp	/^   void setPPS(Real thePPS);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real thePPS)
mpe::Focus::setPPS	src/MPE/classes/Focus.cpp	/^void Focus::setPPS(Real thePPS)$/;"	kind:f	class:mpe::Focus	signature:(Real thePPS)
mpe::Focus::setPosition	include/MPE/classes/Focus.hpp	/^   void setPosition(Vec2 thePosition);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Vec2 thePosition)
mpe::Focus::setPosition	src/MPE/classes/Focus.cpp	/^void Focus::setPosition(Vec2 thePosition)$/;"	kind:f	class:mpe::Focus	signature:(Vec2 thePosition)
mpe::Focus::setWidth	include/MPE/classes/Focus.hpp	/^   void setWidth(Real theWidth);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theWidth)
mpe::Focus::setWidth	src/MPE/classes/Focus.cpp	/^void Focus::setWidth(Real theWidth)$/;"	kind:f	class:mpe::Focus	signature:(Real theWidth)
mpe::Focus::update	include/MPE/classes/Focus.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theElapsedTime)
mpe::Focus::update	src/MPE/classes/Focus.cpp	/^void Focus::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
mpe::FocusPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Focus> FocusPtr;$/;"	kind:t	namespace:mpe
mpe::GROUP_A	include/MPE/Config.hpp	/^const GroupID GROUP_A = 0x01;$/;"	kind:m	namespace:mpe
mpe::GROUP_B	include/MPE/Config.hpp	/^const GroupID GROUP_B = 0x02;$/;"	kind:m	namespace:mpe
mpe::GROUP_C	include/MPE/Config.hpp	/^const GroupID GROUP_C = 0x04;$/;"	kind:m	namespace:mpe
mpe::GROUP_D	include/MPE/Config.hpp	/^const GroupID GROUP_D = 0x08;$/;"	kind:m	namespace:mpe
mpe::GROUP_E	include/MPE/Config.hpp	/^const GroupID GROUP_E = 0x10;$/;"	kind:m	namespace:mpe
mpe::GROUP_F	include/MPE/Config.hpp	/^const GroupID GROUP_F = 0x20;$/;"	kind:m	namespace:mpe
mpe::GROUP_G	include/MPE/Config.hpp	/^const GroupID GROUP_G = 0x40;$/;"	kind:m	namespace:mpe
mpe::GROUP_H	include/MPE/Config.hpp	/^const GroupID GROUP_H = 0x80;$/;"	kind:m	namespace:mpe
mpe::Generator	include/MPE/classes/Generator.hpp	/^class Generator$/;"	kind:c	namespace:mpe
mpe::Generator::Generator	include/MPE/classes/Generator.hpp	/^   Generator();$/;"	kind:p	class:mpe::Generator	access:public	signature:()
mpe::Generator::Generator	include/MPE/classes/Generator.hpp	/^   Generator(T theMin, T theMax);$/;"	kind:p	class:mpe::Generator	access:public	signature:(T theMin, T theMax)
mpe::Generator::Generator	include/MPE/classes/Generator.hpp	/^   Generator(T theNumber);$/;"	kind:p	class:mpe::Generator	access:public	signature:(T theNumber)
mpe::Generator::Generator	src/MPE/classes/Generator.cpp	/^Generator<Integer>::Generator():$/;"	kind:f	class:mpe::Generator	signature:()
mpe::Generator::Generator	src/MPE/classes/Generator.cpp	/^Generator<Integer>::Generator(Integer theMin, Integer theMax):$/;"	kind:f	class:mpe::Generator	signature:(Integer theMin, Integer theMax)
mpe::Generator::Generator	src/MPE/classes/Generator.cpp	/^Generator<Real>::Generator():$/;"	kind:f	class:mpe::Generator	signature:()
mpe::Generator::Generator	src/MPE/classes/Generator.cpp	/^Generator<Real>::Generator(Real theMin, Real theMax):$/;"	kind:f	class:mpe::Generator	signature:(Real theMin, Real theMax)
mpe::Generator::Generator	src/MPE/classes/Generator.cpp	/^Generator<T>::Generator(T theNumber):$/;"	kind:f	class:mpe::Generator	signature:(T theNumber)
mpe::Generator::create	include/MPE/classes/Generator.hpp	/^   static Generator<T> create(T theMin,T theMax);$/;"	kind:p	class:mpe::Generator	access:public	signature:(T theMin,T theMax)
mpe::Generator::create	src/MPE/classes/Generator.cpp	/^Generator<T> Generator<T>::create(T theMin, T theMax)$/;"	kind:f	class:mpe::Generator	signature:(T theMin, T theMax)
mpe::Generator::mGenerator	include/MPE/classes/Generator.hpp	/^   std::function<T()> mGenerator;$/;"	kind:m	class:mpe::Generator	access:private
mpe::Generator::operator ()	include/MPE/classes/Generator.hpp	/^   T operator()() const;$/;"	kind:p	class:mpe::Generator	access:public	signature:() const
mpe::Generator::operator ()	src/MPE/classes/Generator.cpp	/^T Generator<T>::operator()() const$/;"	kind:f	class:mpe::Generator	signature:() const
mpe::GroupID	include/MPE/Config.hpp	/^typedef unsigned char GroupID;$/;"	kind:t	namespace:mpe
mpe::Integer	include/MPE/Config.hpp	/^typedef int Integer;$/;"	kind:t	namespace:mpe
mpe::MAX_INTEGER	include/MPE/Config.hpp	/^const Integer MAX_INTEGER = std::numeric_limits<Integer>::max();$/;"	kind:m	namespace:mpe
mpe::Mortal	include/MPE/classes/Mortal.hpp	/^class Mortal$/;"	kind:c	namespace:mpe
mpe::Mortal::Mortal	include/MPE/classes/Mortal.hpp	/^   Mortal(Real theLifetime);$/;"	kind:p	class:mpe::Mortal	access:public	signature:(Real theLifetime)
mpe::Mortal::Mortal	src/MPE/classes/Mortal.cpp	/^Mortal::Mortal(Real theLifetime):$/;"	kind:f	class:mpe::Mortal	signature:(Real theLifetime)
mpe::Mortal::age	include/MPE/classes/Mortal.hpp	/^   inline void age(Real theElapsedTime)$/;"	kind:f	class:mpe::Mortal	access:public	signature:(Real theElapsedTime)
mpe::Mortal::die	include/MPE/classes/Mortal.hpp	/^   inline void die()$/;"	kind:f	class:mpe::Mortal	access:private	signature:()
mpe::Mortal::getAge	include/MPE/classes/Mortal.hpp	/^   inline Real getAge() const$/;"	kind:f	class:mpe::Mortal	access:public	signature:() const
mpe::Mortal::isAlive	include/MPE/classes/Mortal.hpp	/^   inline bool isAlive()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
mpe::Mortal::kill	include/MPE/classes/Mortal.hpp	/^   inline void kill()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
mpe::Mortal::mAge	include/MPE/classes/Mortal.hpp	/^   Real mAge;$/;"	kind:m	class:mpe::Mortal	access:private
mpe::Mortal::mAlive	include/MPE/classes/Mortal.hpp	/^   bool mAlive;$/;"	kind:m	class:mpe::Mortal	access:private
mpe::Mortal::mLifetime	include/MPE/classes/Mortal.hpp	/^   Real mLifetime;$/;"	kind:m	class:mpe::Mortal	access:private
mpe::Mortal::resetLife	include/MPE/classes/Mortal.hpp	/^   inline void resetLife(Real theLifetime)$/;"	kind:f	class:mpe::Mortal	access:public	signature:(Real theLifetime)
mpe::NO_GROUP	include/MPE/Config.hpp	/^const GroupID NO_GROUP = 0x00;$/;"	kind:m	namespace:mpe
mpe::Particle	include/MPE/classes/Particle.hpp	/^class Particle: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
mpe::Particle::Particle	include/MPE/classes/Particle.hpp	/^   Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
mpe::Particle::Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle():$/;"	kind:f	class:mpe::Particle	signature:()
mpe::Particle::belongToGroup	include/MPE/classes/Particle.hpp	/^   bool belongToGroup(const GroupID theGroups) const;$/;"	kind:p	class:mpe::Particle	access:public	signature:(const GroupID theGroups) const
mpe::Particle::belongToGroup	src/MPE/classes/Particle.cpp	/^bool Particle::belongToGroup(const GroupID theGroups) const$/;"	kind:f	class:mpe::Particle	signature:(const GroupID theGroups) const
mpe::Particle::getAngle	include/MPE/classes/Particle.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getAngle	src/MPE/classes/Particle.cpp	/^Real Particle::getAngle() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real getAngularVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getAngularVelocity	src/MPE/classes/Particle.cpp	/^Real Particle::getAngularVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getColor	include/MPE/classes/Particle.hpp	/^   Color getColor() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getColor	src/MPE/classes/Particle.cpp	/^Color Particle::getColor() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getGroups	include/MPE/classes/Particle.hpp	/^   GroupID getGroups() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getGroups	src/MPE/classes/Particle.cpp	/^GroupID Particle::getGroups() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2 getLinearVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getLinearVelocity	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getLinearVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getPosition	include/MPE/classes/Particle.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getPosition	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getPosition() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getSize	include/MPE/classes/Particle.hpp	/^   Real getSize() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getSize	src/MPE/classes/Particle.cpp	/^Real Particle::getSize() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getTextRect	include/MPE/classes/Particle.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getTextRect	src/MPE/classes/Particle.cpp	/^TextRect Particle::getTextRect() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::mAngle	include/MPE/classes/Particle.hpp	/^   Real      mAngle;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real      mAngularVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mColor	include/MPE/classes/Particle.hpp	/^   Color     mColor;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mGroups	include/MPE/classes/Particle.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2      mLinearVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mPosition	include/MPE/classes/Particle.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mSize	include/MPE/classes/Particle.hpp	/^   Real      mSize;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mTextRect	include/MPE/classes/Particle.hpp	/^   TextRect  mTextRect;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::setAngle	include/MPE/classes/Particle.hpp	/^   void setAngle(Real theAngle);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theAngle)
mpe::Particle::setAngle	src/MPE/classes/Particle.cpp	/^void Particle::setAngle(Real theAngle)$/;"	kind:f	class:mpe::Particle	signature:(Real theAngle)
mpe::Particle::setAngularVelocity	include/MPE/classes/Particle.hpp	/^   void setAngularVelocity(Real theAngularVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theAngularVelocity)
mpe::Particle::setAngularVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setAngularVelocity(Real theAngularVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Real theAngularVelocity)
mpe::Particle::setColor	include/MPE/classes/Particle.hpp	/^   void  setColor(Color theColor);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Color theColor)
mpe::Particle::setColor	src/MPE/classes/Particle.cpp	/^void Particle::setColor(Color theColor)$/;"	kind:f	class:mpe::Particle	signature:(Color theColor)
mpe::Particle::setGroups	include/MPE/classes/Particle.hpp	/^   void  setGroups(GroupID theGroup);$/;"	kind:p	class:mpe::Particle	access:public	signature:(GroupID theGroup)
mpe::Particle::setGroups	src/MPE/classes/Particle.cpp	/^void Particle::setGroups(GroupID theGroups)$/;"	kind:f	class:mpe::Particle	signature:(GroupID theGroups)
mpe::Particle::setLinearVelocity	include/MPE/classes/Particle.hpp	/^   void setLinearVelocity(Vec2 theLinearVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Vec2 theLinearVelocity)
mpe::Particle::setLinearVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setLinearVelocity(Vec2 theLinearVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Vec2 theLinearVelocity)
mpe::Particle::setPosition	include/MPE/classes/Particle.hpp	/^   void setPosition(Vec2 thePosition);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Vec2 thePosition)
mpe::Particle::setPosition	src/MPE/classes/Particle.cpp	/^void Particle::setPosition(Vec2 thePosition)$/;"	kind:f	class:mpe::Particle	signature:(Vec2 thePosition)
mpe::Particle::setSize	include/MPE/classes/Particle.hpp	/^   void setSize(Real theSize);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theSize)
mpe::Particle::setSize	src/MPE/classes/Particle.cpp	/^void Particle::setSize(Real theSize)$/;"	kind:f	class:mpe::Particle	signature:(Real theSize)
mpe::Particle::setTextRect	include/MPE/classes/Particle.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Particle	access:public	signature:(TextRect theTextRect)
mpe::Particle::setTextRect	src/MPE/classes/Particle.cpp	/^void Particle::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Particle	signature:(TextRect theTextRect)
mpe::Particle::update	include/MPE/classes/Particle.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theElapsedTime)
mpe::Particle::update	src/MPE/classes/Particle.cpp	/^void Particle::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Particle	signature:(Real theElapsedTime)
mpe::Particle::~Particle	include/MPE/classes/Particle.hpp	/^   ~Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
mpe::Particle::~Particle	src/MPE/classes/Particle.cpp	/^Particle::~Particle() {}$/;"	kind:f	class:mpe::Particle	signature:()
mpe::ParticleContainer	include/MPE/classes/ParticleContainer.hpp	/^   class ParticleContainer $/;"	kind:c	namespace:mpe
mpe::ParticleContainer::ParticleContainer	src/MPE/classes/ParticleContainer.cpp	/^ParticleContainer::ParticleContainer(size_t theSize, bool theFixed):$/;"	kind:f	class:mpe::ParticleContainer	signature:(size_t theSize, bool theFixed)
mpe::ParticleContainer::addParticle	include/MPE/classes/ParticleContainer.hpp	/^      Particle* addParticle();$/;"	kind:p	class:mpe::ParticleContainer	access:public	signature:()
mpe::ParticleContainer::addParticle	src/MPE/classes/ParticleContainer.cpp	/^Particle* ParticleContainer::addParticle()            $/;"	kind:f	class:mpe::ParticleContainer	signature:()
mpe::ParticleContainer::begin	include/MPE/classes/ParticleContainer.hpp	/^      const_iterator begin() const {return mParticles;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:() const
mpe::ParticleContainer::begin	include/MPE/classes/ParticleContainer.hpp	/^      iterator begin() {return mParticles;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:()
mpe::ParticleContainer::end	include/MPE/classes/ParticleContainer.hpp	/^      const_iterator end() const {return mParticles + mSize;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:() const
mpe::ParticleContainer::end	include/MPE/classes/ParticleContainer.hpp	/^      iterator end() {return mParticles + mSize;}$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:()
mpe::ParticleContainer::grow	include/MPE/classes/ParticleContainer.hpp	/^      bool grow();$/;"	kind:p	class:mpe::ParticleContainer	access:private	signature:()
mpe::ParticleContainer::grow	src/MPE/classes/ParticleContainer.cpp	/^bool ParticleContainer::grow()$/;"	kind:f	class:mpe::ParticleContainer	signature:()
mpe::ParticleContainer::mFixedSize	include/MPE/classes/ParticleContainer.hpp	/^      bool mFixedSize;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mpe::ParticleContainer::mMaxSize	include/MPE/classes/ParticleContainer.hpp	/^      size_t mMaxSize;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mpe::ParticleContainer::mParticles	include/MPE/classes/ParticleContainer.hpp	/^      Particle*  mParticles;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mpe::ParticleContainer::mSize	include/MPE/classes/ParticleContainer.hpp	/^      size_t mSize;$/;"	kind:m	class:mpe::ParticleContainer	access:private
mpe::ParticleContainer::removeParticle	include/MPE/classes/ParticleContainer.hpp	/^      void removeParticle(Particle* theParticle);$/;"	kind:p	class:mpe::ParticleContainer	access:public	signature:(Particle* theParticle)
mpe::ParticleContainer::removeParticle	src/MPE/classes/ParticleContainer.cpp	/^void ParticleContainer::removeParticle(Particle* theParticle)$/;"	kind:f	class:mpe::ParticleContainer	signature:(Particle* theParticle)
mpe::ParticleContainer::size	include/MPE/classes/ParticleContainer.hpp	/^      size_t size(){return mSize;};$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:()
mpe::ParticleContainer::~ParticleContainer	include/MPE/classes/ParticleContainer.hpp	/^      ~ParticleContainer ();$/;"	kind:p	class:mpe::ParticleContainer	access:public	signature:()
mpe::ParticleContainer::~ParticleContainer	src/MPE/classes/ParticleContainer.cpp	/^ParticleContainer::~ParticleContainer()$/;"	kind:f	class:mpe::ParticleContainer	signature:()
mpe::REAL_INFINITY	include/MPE/Config.hpp	/^const Real REAL_INFINITY = std::numeric_limits<Real>::infinity();$/;"	kind:m	namespace:mpe
mpe::Real	include/MPE/Config.hpp	/^typedef float Real;$/;"	kind:t	namespace:mpe
mpe::System	include/MPE/classes/System.hpp	/^class System$/;"	kind:c	namespace:mpe
mpe::System::System	include/MPE/classes/System.hpp	/^   System(size_t theNParticles,bool theFixed=true);$/;"	kind:p	class:mpe::System	access:public	signature:(size_t theNParticles,bool theFixed=true)
mpe::System::System	src/MPE/classes/System.cpp	/^System::System (size_t theNParticles,bool theFixed):$/;"	kind:f	class:mpe::System	signature:(size_t theNParticles,bool theFixed)
mpe::System::addAffector	include/MPE/classes/System.hpp	/^   void     addAffector(AffectorPtr theAffector);$/;"	kind:p	class:mpe::System	access:public	signature:(AffectorPtr theAffector)
mpe::System::addAffector	src/MPE/classes/System.cpp	/^void System::addAffector(AffectorPtr theAffector)$/;"	kind:f	class:mpe::System	signature:(AffectorPtr theAffector)
mpe::System::addEmitter	include/MPE/classes/System.hpp	/^   void     addEmitter(Emitter& theEmitter);$/;"	kind:p	class:mpe::System	access:public	signature:(Emitter& theEmitter)
mpe::System::addEmitter	src/MPE/classes/System.cpp	/^void System::addEmitter(Emitter& theEmitter)$/;"	kind:f	class:mpe::System	signature:(Emitter& theEmitter)
mpe::System::addFocus	include/MPE/classes/System.hpp	/^   void     addFocus(FocusPtr theFocus);$/;"	kind:p	class:mpe::System	access:public	signature:(FocusPtr theFocus)
mpe::System::addFocus	src/MPE/classes/System.cpp	/^void System::addFocus(FocusPtr theFocus)$/;"	kind:f	class:mpe::System	signature:(FocusPtr theFocus)
mpe::System::addParticle	include/MPE/classes/System.hpp	/^   Particle*  addParticle();$/;"	kind:p	class:mpe::System	access:public	signature:()
mpe::System::addParticle	src/MPE/classes/System.cpp	/^Particle* System::addParticle ()$/;"	kind:f	class:mpe::System	signature:()
mpe::System::createFocus	include/MPE/classes/System.hpp	/^   FocusPtr   createFocus(EmitterID theEmitter,$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitter, Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP)
mpe::System::createFocus	src/MPE/classes/System.cpp	/^FocusPtr System::createFocus(EmitterID theEmitterID,$/;"	kind:f	class:mpe::System	signature:(EmitterID theEmitterID, Vec2 thePosition, Real theAngle, GroupID theGroups)
mpe::System::getEmitter	include/MPE/classes/System.hpp	/^   Emitter& getEmitter(EmitterID theEmitterID);$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitterID)
mpe::System::getEmitter	src/MPE/classes/System.cpp	/^Emitter& System::getEmitter ( EmitterID theEmitterID )$/;"	kind:f	class:mpe::System	signature:( EmitterID theEmitterID )
mpe::System::getParticlesBegin	include/MPE/classes/System.hpp	/^   ParticleContainer::const_iterator getParticlesBegin() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
mpe::System::getParticlesBegin	src/MPE/classes/System.cpp	/^ParticleContainer::const_iterator System::getParticlesBegin() const$/;"	kind:f	class:mpe::System	signature:() const
mpe::System::getParticlesEnd	include/MPE/classes/System.hpp	/^   ParticleContainer::const_iterator getParticlesEnd() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
mpe::System::getParticlesEnd	src/MPE/classes/System.cpp	/^ParticleContainer::const_iterator System::getParticlesEnd() const$/;"	kind:f	class:mpe::System	signature:() const
mpe::System::getParticlesSize	include/MPE/classes/System.hpp	/^   Integer getParticlesSize();$/;"	kind:p	class:mpe::System	access:public	signature:()
mpe::System::getParticlesSize	src/MPE/classes/System.cpp	/^Integer System::getParticlesSize()$/;"	kind:f	class:mpe::System	signature:()
mpe::System::getXFactor	include/MPE/classes/System.hpp	/^   Real     getXFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
mpe::System::getXFactor	src/MPE/classes/System.cpp	/^Real System::getXFactor() const$/;"	kind:f	class:mpe::System	signature:() const
mpe::System::getYFactor	include/MPE/classes/System.hpp	/^   Real     getYFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
mpe::System::getYFactor	src/MPE/classes/System.cpp	/^Real System::getYFactor() const$/;"	kind:f	class:mpe::System	signature:() const
mpe::System::initFromFile	include/MPE/classes/System.hpp	/^   bool initFromFile(std::string theFilename);$/;"	kind:p	class:mpe::System	access:public	signature:(std::string theFilename)
mpe::System::initFromFile	src/MPE/classes/System.cpp	/^bool System::initFromFile(std::string theFilename)$/;"	kind:f	class:mpe::System	signature:(std::string theFilename)
mpe::System::mAffectors	include/MPE/classes/System.hpp	/^   std::list<AffectorPtr>        mAffectors;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mEmitters	include/MPE/classes/System.hpp	/^   std::map<EmitterID, Emitter>  mEmitters;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mFocusses	include/MPE/classes/System.hpp	/^   std::list<FocusPtr>           mFocusses;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mParticles	include/MPE/classes/System.hpp	/^   ParticleContainer             mParticles;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mXFactor	include/MPE/classes/System.hpp	/^   Real mXFactor;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mYFactor	include/MPE/classes/System.hpp	/^   Real mYFactor;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::setXFactor	include/MPE/classes/System.hpp	/^   void     setXFactor(Real theXFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theXFactor)
mpe::System::setXFactor	src/MPE/classes/System.cpp	/^void System::setXFactor(Real theXFactor)$/;"	kind:f	class:mpe::System	signature:(Real theXFactor)
mpe::System::setYFactor	include/MPE/classes/System.hpp	/^   void     setYFactor(Real theYFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theYFactor)
mpe::System::setYFactor	src/MPE/classes/System.cpp	/^void System::setYFactor(Real theYFactor)$/;"	kind:f	class:mpe::System	signature:(Real theYFactor)
mpe::System::update	include/MPE/classes/System.hpp	/^   void     update(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theElapsedTime)
mpe::System::update	src/MPE/classes/System.cpp	/^void System::update (Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
mpe::System::updateFocusses	include/MPE/classes/System.hpp	/^   void updateFocusses (Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
mpe::System::updateFocusses	src/MPE/classes/System.cpp	/^void System::updateFocusses(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
mpe::System::updateParticles	include/MPE/classes/System.hpp	/^   void updateParticles(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
mpe::System::updateParticles	src/MPE/classes/System.cpp	/^void System::updateParticles(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
mpe::TextRect	include/MPE/Config.hpp	/^struct TextRect$/;"	kind:s	namespace:mpe
mpe::TextRect::height	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::TextRect::width	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::TextRect::x	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::TextRect::y	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::Vec2	include/MPE/classes/Vec2.hpp	/^class Vec2$/;"	kind:c	namespace:mpe
mpe::Vec2::Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(): x(0), y(0) {}$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(Real theX, Real theY):$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
mpe::Vec2::aCosine	include/MPE/classes/Vec2.hpp	/^      Real aCosine = std::cos(theAngle);$/;"	kind:l
mpe::Vec2::aSine	include/MPE/classes/Vec2.hpp	/^      Real aSine = std::sin(theAngle);$/;"	kind:l
mpe::Vec2::anLength	include/MPE/classes/Vec2.hpp	/^      Real anLength = length();$/;"	kind:l
mpe::Vec2::getX	include/MPE/classes/Vec2.hpp	/^   Real getX()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::getY	include/MPE/classes/Vec2.hpp	/^   Real getY()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::init	include/MPE/classes/Vec2.hpp	/^   void init(Real theX, Real theY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
mpe::Vec2::length	include/MPE/classes/Vec2.hpp	/^   Real length()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::normalize	include/MPE/classes/Vec2.hpp	/^   void normalize()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::nx	include/MPE/classes/Vec2.hpp	/^      Real nx = x * aCosine - y * aSine;$/;"	kind:l
mpe::Vec2::ny	include/MPE/classes/Vec2.hpp	/^      Real ny = x * aSine + y * aCosine;$/;"	kind:l
mpe::Vec2::operator *	include/MPE/classes/Vec2.hpp	/^   Vec2 operator*(const Real& theScalar) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar) const
mpe::Vec2::operator *=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator*=(const Real& theScalar)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar)
mpe::Vec2::operator +	include/MPE/classes/Vec2.hpp	/^   Vec2 operator+(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
mpe::Vec2::operator +=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator +=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
mpe::Vec2::operator -	include/MPE/classes/Vec2.hpp	/^   Vec2 operator-(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
mpe::Vec2::operator -=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator -=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
mpe::Vec2::rotate	include/MPE/classes/Vec2.hpp	/^   Vec2& rotate ( Real theAngle )$/;"	kind:f	class:mpe::Vec2	access:public	signature:( Real theAngle )
mpe::Vec2::scale	include/MPE/classes/Vec2.hpp	/^   Vec2& scale(const Real& theScalarX, const Real& theScalarY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalarX, const Real& theScalarY)
mpe::Vec2::squareLength	include/MPE/classes/Vec2.hpp	/^   Real squareLength()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::x	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
mpe::Vec2::y	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
mpe::aFile	src/MPE/classes/System.cpp	/^   tinyxml2::XMLDocument aFile;$/;"	kind:l
mpe::anEmitterID	src/MPE/classes/System.cpp	/^   EmitterID anEmitterID = theEmitter.getID();$/;"	kind:l
mpe::anFocus	src/MPE/classes/Emitter.cpp	/^   FocusPtr anFocus = Focus::create(getFocusTOL(),$/;"	kind:l
mpe::anParticle	src/MPE/classes/Focus.cpp	/^   Particle* anParticle = mEmitter.getSystem()->addParticle();$/;"	kind:l
mpe::anPosition	src/MPE/classes/Emitter.cpp	/^   Vec2 anPosition;$/;"	kind:l
mpe::anPosition	src/MPE/classes/Focus.cpp	/^      Vec2 anPosition = mEmitter.generatePosition(*this); $/;"	kind:l
mpe::anVelocity	src/MPE/classes/Emitter.cpp	/^   Vec2 anVelocity;$/;"	kind:l
mpe::anVelocity	src/MPE/classes/Focus.cpp	/^      Vec2 anVelocity = mEmitter.generateVelocity(*this,anPosition); $/;"	kind:l
mpe::it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(anEmitterID);$/;"	kind:l
mpe::it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(theEmitterID);$/;"	kind:l
mpe::mFixedSize	src/MPE/classes/ParticleContainer.cpp	/^   mFixedSize(theFixed)$/;"	kind:f	namespace:mpe	signature:(theFixed)
mpe::nParticles	src/MPE/classes/Focus.cpp	/^      Integer nParticles = drain(theElapsedTime);$/;"	kind:l
mpe::nParticles	src/MPE/classes/Focus.cpp	/^   Integer nParticles = mTimeAcum * mPPS;$/;"	kind:l
mpe::normalize	src/MPE/classes/Emitter.cpp	/^      anVelocity.normalize();$/;"	kind:p	file:	signature:()
mpe::pair	src/MPE/classes/System.cpp	/^      mEmitters.insert(std::pair<EmitterID, Emitter>(anEmitterID, theEmitter));$/;"	kind:p	file:	signature:(anEmitterID, theEmitter)
mpe::push_back	src/MPE/classes/System.cpp	/^   mAffectors.push_back(theAffector);$/;"	kind:p	file:	signature:(theAffector)
mpe::push_back	src/MPE/classes/System.cpp	/^   mFocusses.push_back(theFocus);$/;"	kind:p	file:	signature:(theFocus)
mpe::removeParticle	src/MPE/classes/System.cpp	/^          mParticles.removeParticle(particle);$/;"	kind:p	file:	signature:(particle)
mpe::resetLife	src/MPE/classes/Focus.cpp	/^      anParticle->resetLife(mEmitter.getParticleTOL());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleTOL())
mpe::rotate	src/MPE/classes/Emitter.cpp	/^   anPosition.rotate(theFocus.getAngle());$/;"	kind:p	file:	signature:(theFocus.getAngle())
mpe::sRealRandom	src/MPE/classes/Emitter.cpp	/^      anPosition.init(sRealRandom(), sRealRandom());$/;"	kind:p	file:	signature:()
mpe::scale	src/MPE/classes/Emitter.cpp	/^   anPosition.scale(theFocus.getWidth(), theFocus.getHeight());$/;"	kind:p	file:	signature:(theFocus.getWidth(), theFocus.getHeight())
mpe::setAngle	src/MPE/classes/Focus.cpp	/^      anParticle->setAngle(mEmitter.getParticleAngle());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleAngle())
mpe::setAngularVelocity	src/MPE/classes/Focus.cpp	/^      anParticle->setAngularVelocity(mEmitter.getParticleAV());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleAV())
mpe::setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::LINEAR);$/;"	kind:p	file:	signature:(Emitter::LINEAR)
mpe::setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::RADIAL);$/;"	kind:p	file:	signature:(Emitter::RADIAL)
mpe::setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::RANDOM);$/;"	kind:p	file:	signature:(Emitter::RANDOM)
mpe::setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::REFLECT);$/;"	kind:p	file:	signature:(Emitter::REFLECT)
mpe::setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::STATIC);$/;"	kind:p	file:	signature:(Emitter::STATIC)
mpe::setGroups	src/MPE/classes/Focus.cpp	/^      anParticle->setGroups(mGroups);                  $/;"	kind:p	file:	signature:(mGroups)
mpe::setLinearVelocity	src/MPE/classes/Focus.cpp	/^      anParticle->setLinearVelocity(anVelocity);                  $/;"	kind:p	file:	signature:(anVelocity)
mpe::setPosition	src/MPE/classes/Focus.cpp	/^      anParticle->setPosition(anPosition);                  $/;"	kind:p	file:	signature:(anPosition)
mpe::setShape	src/MPE/classes/System.cpp	/^         aEmitter.setShape(Emitter::CIRCLE);$/;"	kind:p	file:	signature:(Emitter::CIRCLE)
mpe::setShape	src/MPE/classes/System.cpp	/^         aEmitter.setShape(Emitter::RECTANGLE);$/;"	kind:p	file:	signature:(Emitter::RECTANGLE)
mpe::setSize	src/MPE/classes/Focus.cpp	/^      anParticle->setSize(mEmitter.getParticleSize());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleSize())
mpe::setSystem	src/MPE/classes/System.cpp	/^      theEmitter.setSystem(this);$/;"	kind:p	file:	signature:(this)
mpe::std::memcpy	src/MPE/classes/ParticleContainer.cpp	/^      std::memcpy(aParticles,mParticles,sizeof(Particle)*mSize);$/;"	kind:p	class:mpe::std	file:	signature:(aParticles,mParticles,sizeof(Particle)*mSize)
mpe::update	src/MPE/classes/System.cpp	/^         (*affector)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
mpe::update	src/MPE/classes/System.cpp	/^         (*it)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
mpe::update	src/MPE/classes/System.cpp	/^         particle->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
n	ext_libs/include/TinyXML2/tinyxml2.h	/^      int n = 0;$/;"	kind:l
nParticles	src/MPE/classes/Focus.cpp	/^      Integer nParticles = drain(theElapsedTime);$/;"	kind:l
nParticles	src/MPE/classes/Focus.cpp	/^   Integer nParticles = mTimeAcum * mPPS;$/;"	kind:l
newAllocated	ext_libs/include/TinyXML2/tinyxml2.h	/^         int newAllocated = cap * 2;$/;"	kind:l
newMem	ext_libs/include/TinyXML2/tinyxml2.h	/^         T* newMem = new T[newAllocated];$/;"	kind:l
next	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk*  next;$/;"	kind:m	union:tinyxml2::MemPoolT::Chunk	access:public
normalize	include/MPE/classes/Vec2.hpp	/^   void normalize()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
normalize	src/MPE/classes/Emitter.cpp	/^      anVelocity.normalize();$/;"	kind:p	file:	signature:()
nx	include/MPE/classes/Vec2.hpp	/^      Real nx = x * aCosine - y * aSine;$/;"	kind:l
ny	include/MPE/classes/Vec2.hpp	/^      Real ny = x * aSine + y * aCosine;$/;"	kind:l
operator ()	include/MPE/classes/Generator.hpp	/^   T operator()() const;$/;"	kind:p	class:mpe::Generator	access:public	signature:() const
operator ()	src/MPE/classes/Generator.cpp	/^T Generator<T>::operator()() const$/;"	kind:f	class:mpe::Generator	signature:() const
operator *	include/MPE/classes/Vec2.hpp	/^   Vec2 operator*(const Real& theScalar) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar) const
operator *=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator*=(const Real& theScalar)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar)
operator +	include/MPE/classes/Vec2.hpp	/^   Vec2 operator+(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
operator +=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator +=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
operator -	include/MPE/classes/Vec2.hpp	/^   Vec2 operator-(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
operator -=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator -=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle& operator=( const XMLConstHandle& ref )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle& operator=( const XMLHandle& ref )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   void operator=( const XMLAttribute& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   void operator=( const XMLDocument& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   void operator=( const XMLElement& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
operator []	ext_libs/include/TinyXML2/tinyxml2.h	/^   T& operator[](int i)$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:(int i)
operator []	ext_libs/include/TinyXML2/tinyxml2.h	/^   const T& operator[](int i) const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:(int i) const
pair	src/MPE/classes/System.cpp	/^      mEmitters.insert(std::pair<EmitterID, Emitter>(anEmitterID, theEmitter));$/;"	kind:p	file:	signature:(anEmitterID, theEmitter)
push_back	src/MPE/classes/System.cpp	/^   mAffectors.push_back(theAffector);$/;"	kind:p	file:	signature:(theAffector)
push_back	src/MPE/classes/System.cpp	/^   mFocusses.push_back(theFocus);$/;"	kind:p	file:	signature:(theFocus)
r	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	kind:m	struct:mpe::Color	access:public
removeParticle	include/MPE/classes/ParticleContainer.hpp	/^      void removeParticle(Particle* theParticle);$/;"	kind:p	class:mpe::ParticleContainer	access:public	signature:(Particle* theParticle)
removeParticle	src/MPE/classes/ParticleContainer.cpp	/^void ParticleContainer::removeParticle(Particle* theParticle)$/;"	kind:f	class:mpe::ParticleContainer	signature:(Particle* theParticle)
removeParticle	src/MPE/classes/System.cpp	/^          mParticles.removeParticle(particle);$/;"	kind:p	file:	signature:(particle)
resetLife	include/MPE/classes/Mortal.hpp	/^   inline void resetLife(Real theLifetime)$/;"	kind:f	class:mpe::Mortal	access:public	signature:(Real theLifetime)
resetLife	src/MPE/classes/Focus.cpp	/^      anParticle->resetLife(mEmitter.getParticleTOL());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleTOL())
result	ext_libs/include/TinyXML2/tinyxml2.h	/^      void* result = _root;$/;"	kind:l
result	ext_libs/include/TinyXML2/tinyxml2.h	/^   int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );$/;"	kind:l
ret	ext_libs/include/TinyXML2/tinyxml2.h	/^      T* ret = &_mem[_size];$/;"	kind:l
rotate	include/MPE/classes/Vec2.hpp	/^   Vec2& rotate ( Real theAngle )$/;"	kind:f	class:mpe::Vec2	access:public	signature:( Real theAngle )
rotate	src/MPE/classes/Emitter.cpp	/^   anPosition.rotate(theFocus.getAngle());$/;"	kind:p	file:	signature:(theFocus.getAngle())
sRealRandom	include/MPE/classes/Emitter.hpp	/^   static Generator<Real> sRealRandom;$/;"	kind:m	class:mpe::Emitter	access:private
sRealRandom	src/MPE/classes/Emitter.cpp	/^      anPosition.init(sRealRandom(), sRealRandom());$/;"	kind:p	file:	signature:()
scale	include/MPE/classes/Vec2.hpp	/^   Vec2& scale(const Real& theScalarX, const Real& theScalarY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalarX, const Real& theScalarY)
scale	src/MPE/classes/Emitter.cpp	/^   anPosition.scale(theFocus.getWidth(), theFocus.getHeight());$/;"	kind:p	file:	signature:(theFocus.getWidth(), theFocus.getHeight())
setAngle	include/MPE/classes/Focus.hpp	/^   void setAngle(Real theAngle);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theAngle)
setAngle	include/MPE/classes/Particle.hpp	/^   void setAngle(Real theAngle);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theAngle)
setAngle	src/MPE/classes/Focus.cpp	/^      anParticle->setAngle(mEmitter.getParticleAngle());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleAngle())
setAngle	src/MPE/classes/Focus.cpp	/^void Focus::setAngle(Real theAngle)$/;"	kind:f	class:mpe::Focus	signature:(Real theAngle)
setAngle	src/MPE/classes/Particle.cpp	/^void Particle::setAngle(Real theAngle)$/;"	kind:f	class:mpe::Particle	signature:(Real theAngle)
setAngularVelocity	include/MPE/classes/Particle.hpp	/^   void setAngularVelocity(Real theAngularVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theAngularVelocity)
setAngularVelocity	src/MPE/classes/Focus.cpp	/^      anParticle->setAngularVelocity(mEmitter.getParticleAV());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleAV())
setAngularVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setAngularVelocity(Real theAngularVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Real theAngularVelocity)
setColor	include/MPE/classes/Particle.hpp	/^   void  setColor(Color theColor);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Color theColor)
setColor	src/MPE/classes/Particle.cpp	/^void Particle::setColor(Color theColor)$/;"	kind:f	class:mpe::Particle	signature:(Color theColor)
setDispersion	include/MPE/classes/Emitter.hpp	/^   void setDispersion(Dispersion theDispersion);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Dispersion theDispersion)
setDispersion	src/MPE/classes/Emitter.cpp	/^void Emitter::setDispersion(Dispersion theDispersion)$/;"	kind:f	class:mpe::Emitter	signature:(Dispersion theDispersion)
setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::LINEAR);$/;"	kind:p	file:	signature:(Emitter::LINEAR)
setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::RADIAL);$/;"	kind:p	file:	signature:(Emitter::RADIAL)
setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::RANDOM);$/;"	kind:p	file:	signature:(Emitter::RANDOM)
setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::REFLECT);$/;"	kind:p	file:	signature:(Emitter::REFLECT)
setDispersion	src/MPE/classes/System.cpp	/^         aEmitter.setDispersion(Emitter::STATIC);$/;"	kind:p	file:	signature:(Emitter::STATIC)
setGeneratorFocusHeight	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusHeight(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorFocusHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusHeight(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorFocusNP	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusNP(Integer theMin, Integer theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Integer theMin, Integer theMax)
setGeneratorFocusNP	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusNP(Integer theMin, Integer theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Integer theMin, Integer theMax)
setGeneratorFocusPPS	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusPPS(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorFocusPPS	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusPPS(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorFocusTOL	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorFocusTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorFocusWidth	include/MPE/classes/Emitter.hpp	/^   void setGeneratorFocusWidth(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorFocusWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusWidth(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorParticleAV	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleAV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorParticleAV	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleAV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorParticleAngle	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleAngle(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorParticleAngle	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleAngle(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorParticleLV	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleLV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorParticleLV	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleLV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorParticleSize	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleSize(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorParticleSize	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleSize(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGeneratorParticleTOL	include/MPE/classes/Emitter.hpp	/^   void setGeneratorParticleTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setGeneratorParticleTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setGroups	include/MPE/classes/Particle.hpp	/^   void  setGroups(GroupID theGroup);$/;"	kind:p	class:mpe::Particle	access:public	signature:(GroupID theGroup)
setGroups	src/MPE/classes/Focus.cpp	/^      anParticle->setGroups(mGroups);                  $/;"	kind:p	file:	signature:(mGroups)
setGroups	src/MPE/classes/Particle.cpp	/^void Particle::setGroups(GroupID theGroups)$/;"	kind:f	class:mpe::Particle	signature:(GroupID theGroups)
setHeight	include/MPE/classes/Focus.hpp	/^   void setHeight(Real theHeight);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theHeight)
setHeight	src/MPE/classes/Focus.cpp	/^void Focus::setHeight(Real theHeight)$/;"	kind:f	class:mpe::Focus	signature:(Real theHeight)
setLinearVelocity	include/MPE/classes/Particle.hpp	/^   void setLinearVelocity(Vec2 theLinearVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Vec2 theLinearVelocity)
setLinearVelocity	src/MPE/classes/Focus.cpp	/^      anParticle->setLinearVelocity(anVelocity);                  $/;"	kind:p	file:	signature:(anVelocity)
setLinearVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setLinearVelocity(Vec2 theLinearVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Vec2 theLinearVelocity)
setPPS	include/MPE/classes/Focus.hpp	/^   void setPPS(Real thePPS);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real thePPS)
setPPS	src/MPE/classes/Focus.cpp	/^void Focus::setPPS(Real thePPS)$/;"	kind:f	class:mpe::Focus	signature:(Real thePPS)
setPosition	include/MPE/classes/Focus.hpp	/^   void setPosition(Vec2 thePosition);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Vec2 thePosition)
setPosition	include/MPE/classes/Particle.hpp	/^   void setPosition(Vec2 thePosition);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Vec2 thePosition)
setPosition	src/MPE/classes/Focus.cpp	/^      anParticle->setPosition(anPosition);                  $/;"	kind:p	file:	signature:(anPosition)
setPosition	src/MPE/classes/Focus.cpp	/^void Focus::setPosition(Vec2 thePosition)$/;"	kind:f	class:mpe::Focus	signature:(Vec2 thePosition)
setPosition	src/MPE/classes/Particle.cpp	/^void Particle::setPosition(Vec2 thePosition)$/;"	kind:f	class:mpe::Particle	signature:(Vec2 thePosition)
setShape	include/MPE/classes/Emitter.hpp	/^   void setShape(Shape theShape);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Shape theShape)
setShape	src/MPE/classes/Emitter.cpp	/^void Emitter::setShape(Shape theShape)$/;"	kind:f	class:mpe::Emitter	signature:(Shape theShape)
setShape	src/MPE/classes/System.cpp	/^         aEmitter.setShape(Emitter::CIRCLE);$/;"	kind:p	file:	signature:(Emitter::CIRCLE)
setShape	src/MPE/classes/System.cpp	/^         aEmitter.setShape(Emitter::RECTANGLE);$/;"	kind:p	file:	signature:(Emitter::RECTANGLE)
setSize	include/MPE/classes/Particle.hpp	/^   void setSize(Real theSize);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theSize)
setSize	src/MPE/classes/Focus.cpp	/^      anParticle->setSize(mEmitter.getParticleSize());                  $/;"	kind:p	file:	signature:(mEmitter.getParticleSize())
setSize	src/MPE/classes/Particle.cpp	/^void Particle::setSize(Real theSize)$/;"	kind:f	class:mpe::Particle	signature:(Real theSize)
setSystem	include/MPE/classes/Emitter.hpp	/^   void setSystem(System* theSystem);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(System* theSystem)
setSystem	src/MPE/classes/Emitter.cpp	/^void Emitter::setSystem(System* theSystem)$/;"	kind:f	class:mpe::Emitter	signature:(System* theSystem)
setSystem	src/MPE/classes/System.cpp	/^      theEmitter.setSystem(this);$/;"	kind:p	file:	signature:(this)
setTextRect	include/MPE/classes/Emitter.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(TextRect theTextRect)
setTextRect	include/MPE/classes/Particle.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Particle	access:public	signature:(TextRect theTextRect)
setTextRect	src/MPE/classes/Emitter.cpp	/^void Emitter::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Emitter	signature:(TextRect theTextRect)
setTextRect	src/MPE/classes/Particle.cpp	/^void Particle::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Particle	signature:(TextRect theTextRect)
setWidth	include/MPE/classes/Focus.hpp	/^   void setWidth(Real theWidth);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theWidth)
setWidth	src/MPE/classes/Focus.cpp	/^void Focus::setWidth(Real theWidth)$/;"	kind:f	class:mpe::Focus	signature:(Real theWidth)
setXFactor	include/MPE/classes/System.hpp	/^   void     setXFactor(Real theXFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theXFactor)
setXFactor	src/MPE/classes/System.cpp	/^void System::setXFactor(Real theXFactor)$/;"	kind:f	class:mpe::System	signature:(Real theXFactor)
setYFactor	include/MPE/classes/System.hpp	/^   void     setYFactor(Real theYFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theYFactor)
setYFactor	src/MPE/classes/System.cpp	/^void System::setYFactor(Real theYFactor)$/;"	kind:f	class:mpe::System	signature:(Real theYFactor)
size	include/MPE/classes/ParticleContainer.hpp	/^      size_t size(){return mSize;};$/;"	kind:f	class:mpe::ParticleContainer	access:public	signature:()
sizeof	tests/tests.cpp	/^   std::cout <<  "\\nParticle size: " <<sizeof(mpe::Particle);$/;"	kind:p	file:	signature:(mpe::Particle)
squareLength	include/MPE/classes/Vec2.hpp	/^   Real squareLength()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
std::cout	tests/tests.cpp	/^      std::cout << "Particle system init from 'Emitter.xml'";$/;"	kind:m	class:std	file:
std::cout	tests/tests.cpp	/^      std::cout << "Something was wrong...";$/;"	kind:m	class:std	file:
test1	tests/tests.cpp	/^int test1()$/;"	kind:f	signature:()
test2	tests/tests.cpp	/^int test2()$/;"	kind:f	signature:()
test3	tests/tests.cpp	/^int test3()$/;"	kind:f	signature:()
tinyxml2	ext_libs/include/TinyXML2/tinyxml2.h	/^namespace tinyxml2$/;"	kind:n
tinyxml2::COLLAPSE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^   COLLAPSE_WHITESPACE$/;"	kind:e	enum:tinyxml2::Whitespace
tinyxml2::DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^class DynArray$/;"	kind:c	namespace:tinyxml2
tinyxml2::DynArray::Capacity	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Capacity() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< T, INIT >()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Empty	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Empty() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::EnsureCapacity	ext_libs/include/TinyXML2/tinyxml2.h	/^   void EnsureCapacity( int cap )$/;"	kind:f	class:tinyxml2::DynArray	access:private	signature:( int cap )
tinyxml2::DynArray::Mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   T* Mem()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   const T* Mem() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::Pop	ext_libs/include/TinyXML2/tinyxml2.h	/^   T Pop()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::PopArr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PopArr( int count )$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Push	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Push( T t )$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:( T t )
tinyxml2::DynArray::PushArr	ext_libs/include/TinyXML2/tinyxml2.h	/^   T* PushArr( int count )$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Size	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Size() const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::_allocated	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _allocated;		\/\/ objects allocated$/;"	kind:m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   T*  _mem;$/;"	kind:m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_pool	ext_libs/include/TinyXML2/tinyxml2.h	/^   T   _pool[INIT];$/;"	kind:m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_size	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _size;			\/\/ number objects in use$/;"	kind:m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::newAllocated	ext_libs/include/TinyXML2/tinyxml2.h	/^         int newAllocated = cap * 2;$/;"	kind:l
tinyxml2::DynArray::newMem	ext_libs/include/TinyXML2/tinyxml2.h	/^         T* newMem = new T[newAllocated];$/;"	kind:l
tinyxml2::DynArray::operator []	ext_libs/include/TinyXML2/tinyxml2.h	/^   T& operator[](int i)$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:(int i)
tinyxml2::DynArray::operator []	ext_libs/include/TinyXML2/tinyxml2.h	/^   const T& operator[](int i) const$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:(int i) const
tinyxml2::DynArray::ret	ext_libs/include/TinyXML2/tinyxml2.h	/^      T* ret = &_mem[_size];$/;"	kind:l
tinyxml2::DynArray::~DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~DynArray()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^class MemPool$/;"	kind:c	namespace:tinyxml2
tinyxml2::MemPool::Alloc	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void* Alloc() = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::Free	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void Free( void* ) = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:( void* )
tinyxml2::MemPool::ItemSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual int ItemSize() const = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:() const
tinyxml2::MemPool::MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool() {}$/;"	kind:f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::SetTracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void SetTracked() = 0;$/;"	kind:p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::~MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~MemPool() {}$/;"	kind:f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	kind:c	namespace:tinyxml2	inherits:MemPool
tinyxml2::MemPoolT::Alloc	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void* Alloc()$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Block	ext_libs/include/TinyXML2/tinyxml2.h	/^   struct Block$/;"	kind:s	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Block::chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk chunk[COUNT];$/;"	kind:m	struct:tinyxml2::MemPoolT::Block	access:public
tinyxml2::MemPoolT::COUNT	ext_libs/include/TinyXML2/tinyxml2.h	/^   enum { COUNT = (4 * 1024) \/ SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	kind:e	enum:tinyxml2::MemPoolT::__anon3
tinyxml2::MemPoolT::Chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^   union Chunk$/;"	kind:u	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Chunk::mem	ext_libs/include/TinyXML2/tinyxml2.h	/^      char    mem[SIZE];$/;"	kind:m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::Chunk::next	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk*  next;$/;"	kind:m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::CurrentAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int CurrentAllocs() const$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::Free	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void Free( void* mem )$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
tinyxml2::MemPoolT::ItemSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual int ItemSize() const$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Push	ext_libs/include/TinyXML2/tinyxml2.h	/^         _blockPtrs.Push( block );$/;"	kind:p	signature:( block )
tinyxml2::MemPoolT::SetTracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetTracked()$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Trace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Trace( const char* name )$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
tinyxml2::MemPoolT::Untracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Untracked() const$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::_blockPtrs	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< Block*, 10 > _blockPtrs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_currentAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _currentAllocs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_maxAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _maxAllocs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _nAllocs;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nUntracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _nUntracked;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_root	ext_libs/include/TinyXML2/tinyxml2.h	/^   Chunk* _root;$/;"	kind:m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::block	ext_libs/include/TinyXML2/tinyxml2.h	/^         Block* block = new Block();$/;"	kind:l
tinyxml2::MemPoolT::chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk* chunk = (Chunk*)mem;$/;"	kind:l
tinyxml2::MemPoolT::result	ext_libs/include/TinyXML2/tinyxml2.h	/^      void* result = _root;$/;"	kind:l
tinyxml2::MemPoolT::~MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~MemPoolT()$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::PRESERVE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^   PRESERVE_WHITESPACE,$/;"	kind:e	enum:tinyxml2::Whitespace
tinyxml2::StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^class StrPair$/;"	kind:c	namespace:tinyxml2
tinyxml2::StrPair::ATTRIBUTE_NAME	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_NAME		            	= 0,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::ATTRIBUTE_VALUE	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::COLLAPSE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^      COLLAPSE_WHITESPACE	                = 0x04,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::COMMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^      COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::CollapseWhitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void CollapseWhitespace();$/;"	kind:p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Empty	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Empty() const$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:() const
tinyxml2::StrPair::GetStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetStr();$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::NEEDS_DELETE	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_DELETE = 0x200$/;"	kind:e	enum:tinyxml2::StrPair::__anon2
tinyxml2::StrPair::NEEDS_ENTITY_PROCESSING	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::NEEDS_FLUSH	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_FLUSH = 0x100,$/;"	kind:e	enum:tinyxml2::StrPair::__anon2
tinyxml2::StrPair::NEEDS_NEWLINE_NORMALIZATION	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::ParseName	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseName( char* in );$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:( char* in )
tinyxml2::StrPair::ParseText	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseText( char* in, const char* endTag, int strFlags );$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
tinyxml2::StrPair::Reset	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Reset();$/;"	kind:p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Set	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Set( char* start, char* end, int flags )$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
tinyxml2::StrPair::SetInternedStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetInternedStr( const char* str )$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
tinyxml2::StrPair::SetStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetStr( const char* str, int flags = 0 );$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags = 0 )
tinyxml2::StrPair::StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^   StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	kind:f	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::TEXT_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^      TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::TEXT_ELEMENT_LEAVE_ENTITIES	ext_libs/include/TinyXML2/tinyxml2.h	/^      TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	kind:e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::_end	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*   _end;$/;"	kind:m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_flags	ext_libs/include/TinyXML2/tinyxml2.h	/^   int     _flags;$/;"	kind:m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_start	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*   _start;$/;"	kind:m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::~StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~StrPair();$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::Whitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^enum Whitespace$/;"	kind:g	namespace:tinyxml2
tinyxml2::XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLAttribute$/;"	kind:c	namespace:tinyxml2
tinyxml2::XMLAttribute::BUF_SIZE	ext_libs/include/TinyXML2/tinyxml2.h	/^   enum { BUF_SIZE = 200 };$/;"	kind:e	enum:tinyxml2::XMLAttribute::__anon4
tinyxml2::XMLAttribute::BoolValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool	 BoolValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::DoubleValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   double 	 DoubleValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::FloatValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   float	 FloatValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::IntValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   int		 IntValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Name	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Name() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Next	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* Next() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char* p, bool processEntities );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::QueryBoolValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolValue( bool* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleValue( double* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatValue( float* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryIntValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntValue( int* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( bool value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
tinyxml2::XMLAttribute::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
tinyxml2::XMLAttribute::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( double value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
tinyxml2::XMLAttribute::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( float value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
tinyxml2::XMLAttribute::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( int value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
tinyxml2::XMLAttribute::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( unsigned value );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
tinyxml2::XMLAttribute::SetName	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetName( const char* name );$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
tinyxml2::XMLAttribute::UnsignedValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   unsigned UnsignedValue() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Value	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Value() const$/;"	kind:f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute() : _next( 0 ) {}$/;"	kind:f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLAttribute::_memPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool*        _memPool;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_name	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair _name;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_next	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute*   _next;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_value	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair _value;$/;"	kind:m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::b	ext_libs/include/TinyXML2/tinyxml2.h	/^      bool b = false;$/;"	kind:l
tinyxml2::XMLAttribute::d	ext_libs/include/TinyXML2/tinyxml2.h	/^      double d = 0;$/;"	kind:l
tinyxml2::XMLAttribute::f	ext_libs/include/TinyXML2/tinyxml2.h	/^      float f = 0;$/;"	kind:l
tinyxml2::XMLAttribute::i	ext_libs/include/TinyXML2/tinyxml2.h	/^      int i = 0;$/;"	kind:l
tinyxml2::XMLAttribute::i	ext_libs/include/TinyXML2/tinyxml2.h	/^      unsigned i = 0;$/;"	kind:l
tinyxml2::XMLAttribute::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   void operator=( const XMLAttribute& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::~XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLAttribute()	{}$/;"	kind:f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLComment : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLComment::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLComment::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLComment::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLComment*	ToComment()$/;"	kind:f	class:tinyxml2::XMLComment	access:public	signature:()
tinyxml2::XMLComment::ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLComment* ToComment() const$/;"	kind:f	class:tinyxml2::XMLComment	access:public	signature:() const
tinyxml2::XMLComment::XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment( const XMLComment& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
tinyxml2::XMLComment::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
tinyxml2::XMLComment::~XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLComment();$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:()
tinyxml2::XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLConstHandle$/;"	kind:c	namespace:tinyxml2
tinyxml2::XMLConstHandle::FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle FirstChild() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle FirstChildElement( const char* value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* value = 0 ) const
tinyxml2::XMLConstHandle::LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle LastChild()	const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle LastChildElement( const char* _value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value = 0 ) const
tinyxml2::XMLConstHandle::NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle NextSibling() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle NextSiblingElement( const char* _value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value = 0 ) const
tinyxml2::XMLConstHandle::PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle PreviousSibling() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle PreviousSiblingElement( const char* _value = 0 ) const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value = 0 ) const
tinyxml2::XMLConstHandle::ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLDeclaration* ToDeclaration() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* ToElement() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode* ToNode() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLText* ToText() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLUnknown* ToUnknown() const$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLConstHandle& ref )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLConstHandle::XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLNode& node )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
tinyxml2::XMLConstHandle::XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLNode* node )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
tinyxml2::XMLConstHandle::_node	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode* _node;$/;"	kind:m	class:tinyxml2::XMLConstHandle	access:private
tinyxml2::XMLConstHandle::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle& operator=( const XMLConstHandle& ref )$/;"	kind:f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLDeclaration : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDeclaration::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLDeclaration::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLDeclaration::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDeclaration*	ToDeclaration()$/;"	kind:f	class:tinyxml2::XMLDeclaration	access:public	signature:()
tinyxml2::XMLDeclaration::ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDeclaration* ToDeclaration() const$/;"	kind:f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
tinyxml2::XMLDeclaration::XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::~XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLDeclaration();$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
tinyxml2::XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLDocument : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDocument::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::Clear	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Clear();$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::DeleteChild	ext_libs/include/TinyXML2/tinyxml2.h	/^      node->_parent->DeleteChild( node );$/;"	kind:p	signature:( node )
tinyxml2::XMLDocument::DeleteNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteNode( XMLNode* node )$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
tinyxml2::XMLDocument::Error	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Error() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ErrorID	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError  ErrorID() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr1	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetErrorStr1() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr2	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetErrorStr2() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::HasBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool HasBOM() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::Identify	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* Identify( char* p, XMLNode** node );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::LoadFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError LoadFile( FILE* );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
tinyxml2::XMLDocument::LoadFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError LoadFile( const char* filename );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
tinyxml2::XMLDocument::NewComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLComment* NewComment( const char* comment );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
tinyxml2::XMLDocument::NewDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration* NewDeclaration( const char* text = 0 );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text = 0 )
tinyxml2::XMLDocument::NewElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* NewElement( const char* name );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
tinyxml2::XMLDocument::NewText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText* NewText( const char* text );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::NewUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown* NewUnknown( const char* text );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::Parse	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError Parse( const char* xml, size_t nBytes = (size_t)(-1) );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes = (size_t)(-1) )
tinyxml2::XMLDocument::Print	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Print( XMLPrinter* streamer = 0 );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer = 0 )
tinyxml2::XMLDocument::PrintError	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PrintError() const;$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ProcessEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool ProcessEntities() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::RootElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* RootElement()$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::RootElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* RootElement() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::SaveFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError SaveFile( FILE* fp, bool compact = false );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
tinyxml2::XMLDocument::SaveFile	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError SaveFile( const char* filename, bool compact = false );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
tinyxml2::XMLDocument::SetBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetBOM( bool useBOM )$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
tinyxml2::XMLDocument::SetError	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetError( XMLError error, const char* str1, const char* str2 );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
tinyxml2::XMLDocument::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
tinyxml2::XMLDocument::ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDocument* ToDocument()$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDocument* ToDocument() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::WhitespaceMode	ext_libs/include/TinyXML2/tinyxml2.h	/^   Whitespace WhitespaceMode() const$/;"	kind:f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
tinyxml2::XMLDocument::XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::_attributePool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_charBuffer	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*       _charBuffer;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_commentPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_elementPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorID	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError    _errorID;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr1	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* _errorStr1;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr2	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* _errorStr2;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_processEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool        _processEntities;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_textPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_whitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^   Whitespace  _whitespace;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_writeBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool        _writeBOM;$/;"	kind:m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   void operator=( const XMLDocument& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::~XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~XMLDocument();$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLElement : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLElement::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Attribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Attribute( const char* name, const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value = 0 ) const
tinyxml2::XMLElement::BoolAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool	 BoolAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::CLOSED	ext_libs/include/TinyXML2/tinyxml2.h	/^      CLOSED,		\/\/ <foo\/>$/;"	kind:e	enum:tinyxml2::XMLElement::__anon5
tinyxml2::XMLElement::CLOSING	ext_libs/include/TinyXML2/tinyxml2.h	/^      CLOSING		\/\/ <\/foo>$/;"	kind:e	enum:tinyxml2::XMLElement::__anon5
tinyxml2::XMLElement::ClosingType	ext_libs/include/TinyXML2/tinyxml2.h	/^   int ClosingType() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::DeleteAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteAttribute( const char* name );$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
tinyxml2::XMLElement::DoubleAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   double 	 DoubleAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* FindAttribute( const char* name );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FindAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* FindAttribute( const char* name ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindOrCreateAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FirstAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* FirstAttribute() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::FloatAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   float	 FloatAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::GetText	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetText() const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::IntAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int		 IntAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::Name	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Name() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::OPEN	ext_libs/include/TinyXML2/tinyxml2.h	/^      OPEN,		\/\/ <foo>$/;"	kind:e	enum:tinyxml2::XMLElement::__anon5
tinyxml2::XMLElement::ParseAttributes	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseAttributes( char* p );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
tinyxml2::XMLElement::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char* p, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( char* p, StrPair* endTag )
tinyxml2::XMLElement::QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, bool* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, double* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, float* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, unsigned int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryBoolAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolAttribute( const char* name, bool* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryBoolText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolText( bool* bval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryDoubleAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleAttribute( const char* name, double* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryDoubleText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleText( double* dval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
tinyxml2::XMLElement::QueryFloatAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatAttribute( const char* name, float* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryFloatText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatText( float* fval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
tinyxml2::XMLElement::QueryIntAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntAttribute( const char* name, int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryIntText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntText( int* ival ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
tinyxml2::XMLElement::QueryUnsignedAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryUnsignedText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
tinyxml2::XMLElement::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^      a->SetAttribute( value );$/;"	kind:p	signature:( value )
tinyxml2::XMLElement::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, bool value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
tinyxml2::XMLElement::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, const char* value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLElement::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, double value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
tinyxml2::XMLElement::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, int value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
tinyxml2::XMLElement::SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, unsigned value )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLElement::SetName	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetName( const char* str, bool staticMem = false )$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem = false )
tinyxml2::XMLElement::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLElement::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLElement* ToElement()$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:()
tinyxml2::XMLElement::ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLElement* ToElement() const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::UnsignedAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   unsigned UnsignedAttribute( const char* name ) const$/;"	kind:f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement( const XMLElement& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::_closingType	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _closingType;$/;"	kind:m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::_rootAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* _rootAttribute;$/;"	kind:m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::a	ext_libs/include/TinyXML2/tinyxml2.h	/^      XMLAttribute* a = FindOrCreateAttribute( name );$/;"	kind:l
tinyxml2::XMLElement::a	ext_libs/include/TinyXML2/tinyxml2.h	/^      const XMLAttribute* a = FindAttribute( name );$/;"	kind:l
tinyxml2::XMLElement::b	ext_libs/include/TinyXML2/tinyxml2.h	/^      bool b = false;$/;"	kind:l
tinyxml2::XMLElement::d	ext_libs/include/TinyXML2/tinyxml2.h	/^      double d = 0;$/;"	kind:l
tinyxml2::XMLElement::f	ext_libs/include/TinyXML2/tinyxml2.h	/^      float f = 0;$/;"	kind:l
tinyxml2::XMLElement::i	ext_libs/include/TinyXML2/tinyxml2.h	/^      int i = 0;$/;"	kind:l
tinyxml2::XMLElement::i	ext_libs/include/TinyXML2/tinyxml2.h	/^      unsigned i = 0;$/;"	kind:l
tinyxml2::XMLElement::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   void operator=( const XMLElement& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::~XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLElement();$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:()
tinyxml2::XMLError	ext_libs/include/TinyXML2/tinyxml2.h	/^enum XMLError$/;"	kind:g	namespace:tinyxml2
tinyxml2::XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLHandle$/;"	kind:c	namespace:tinyxml2
tinyxml2::XMLHandle::FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle FirstChild()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle FirstChildElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* value = 0 )
tinyxml2::XMLHandle::LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle LastChild()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle LastChildElement( const char* _value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value = 0 )
tinyxml2::XMLHandle::NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle NextSibling()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle NextSiblingElement( const char* _value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value = 0 )
tinyxml2::XMLHandle::PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle PreviousSibling()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle PreviousSiblingElement( const char* _value = 0 )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value = 0 )
tinyxml2::XMLHandle::ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration* ToDeclaration()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* ToElement()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* ToNode()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText* ToText()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown* ToUnknown()$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( XMLNode& node )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
tinyxml2::XMLHandle::XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( XMLNode* node )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
tinyxml2::XMLHandle::XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( const XMLHandle& ref )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLHandle::_node	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* _node;$/;"	kind:m	class:tinyxml2::XMLHandle	access:private
tinyxml2::XMLHandle::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle& operator=( const XMLHandle& ref )$/;"	kind:f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLNode$/;"	kind:c	namespace:tinyxml2
tinyxml2::XMLNode::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLNode::DeleteChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteChild( XMLNode* node );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChildren	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteChildren();$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		FirstChild()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*  FirstChild() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* FirstChildElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
tinyxml2::XMLNode::FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* FirstChildElement( const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
tinyxml2::XMLNode::GetDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument* GetDocument()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::GetDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLDocument* GetDocument() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::InsertAfterChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertEndChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* InsertEndChild( XMLNode* addThis );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		LastChild()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	LastChild() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* LastChildElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
tinyxml2::XMLNode::LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* LastChildElement( const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
tinyxml2::XMLNode::LinkEndChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* LinkEndChild( XMLNode* addThis )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*	NextSibling()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	NextSibling() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement*	NextSiblingElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
tinyxml2::XMLNode::NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement*	NextSiblingElement( const char* value = 0 ) const;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
tinyxml2::XMLNode::NoChildren	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool NoChildren() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* Parent()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::Parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	Parent() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual char* ParseDeep( char*, StrPair* );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( char*, StrPair* )
tinyxml2::XMLNode::PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*	PreviousSibling()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	PreviousSibling() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement*	PreviousSiblingElement( const char* value = 0 )$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 )
tinyxml2::XMLNode::PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement*	PreviousSiblingElement( const char* value = 0 ) const ;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* value = 0 ) const
tinyxml2::XMLNode::SetValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetValue( const char* val, bool staticMem = false );$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem = false )
tinyxml2::XMLNode::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLNode::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	kind:p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLNode::ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLComment*		ToComment()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLComment*		ToComment() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDeclaration*	ToDeclaration()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDeclaration*	ToDeclaration() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDocument*	ToDocument()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDocument*		ToDocument() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLElement*		ToElement()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLElement*		ToElement() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLText*		ToText()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLText*			ToText() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLUnknown*		ToUnknown()$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLUnknown*		ToUnknown() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Unlink	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Unlink( XMLNode* child );$/;"	kind:p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
tinyxml2::XMLNode::Value	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Value() const$/;"	kind:f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode( XMLDocument* );$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
tinyxml2::XMLNode::XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode( const XMLNode& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
tinyxml2::XMLNode::_document	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument*	_document;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_firstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_firstChild;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_lastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_lastChild;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_memPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool*		_memPool;$/;"	kind:m	class:tinyxml2::XMLNode	access:private
tinyxml2::XMLNode::_next	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_next;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_parent;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_prev	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_prev;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_value	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair	_value;$/;"	kind:m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
tinyxml2::XMLNode::~XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLNode();$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:()
tinyxml2::XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLPrinter : public XMLVisitor$/;"	kind:c	namespace:tinyxml2	inherits:XMLVisitor
tinyxml2::XMLPrinter::BUF_SIZE	ext_libs/include/TinyXML2/tinyxml2.h	/^      BUF_SIZE = 200$/;"	kind:e	enum:tinyxml2::XMLPrinter::__anon6
tinyxml2::XMLPrinter::CStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* CStr() const$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::CStrSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   int CStrSize() const$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::CloseElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   void CloseElement();$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLPrinter::ENTITY_RANGE	ext_libs/include/TinyXML2/tinyxml2.h	/^      ENTITY_RANGE = 64,$/;"	kind:e	enum:tinyxml2::XMLPrinter::__anon6
tinyxml2::XMLPrinter::OpenElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   void OpenElement( const char* name );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name )
tinyxml2::XMLPrinter::Print	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Print( const char* format, ... );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:( const char* format, ... )
tinyxml2::XMLPrinter::PrintSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PrintSpace( int depth );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:( int depth )
tinyxml2::XMLPrinter::PrintString	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
tinyxml2::XMLPrinter::PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, bool value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
tinyxml2::XMLPrinter::PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, const char* value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, double value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
tinyxml2::XMLPrinter::PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, int value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
tinyxml2::XMLPrinter::PushAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushAttribute( const char* name, unsigned value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLPrinter::PushComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushComment( const char* comment );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
tinyxml2::XMLPrinter::PushDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushDeclaration( const char* value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::PushHeader	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
tinyxml2::XMLPrinter::PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( bool value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
tinyxml2::XMLPrinter::PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( const char* text, bool cdata = false );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata = false )
tinyxml2::XMLPrinter::PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( double value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
tinyxml2::XMLPrinter::PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( float value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
tinyxml2::XMLPrinter::PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( int value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
tinyxml2::XMLPrinter::PushText	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushText( unsigned value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
tinyxml2::XMLPrinter::PushUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PushUnknown( const char* value );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::SealElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SealElement();$/;"	kind:p	class:tinyxml2::XMLPrinter	access:private	signature:()
tinyxml2::XMLPrinter::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLComment& comment );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLDeclaration& declaration );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLText& text );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLUnknown& unknown );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLDocument& \/*doc*\/ )$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLElement& element );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
tinyxml2::XMLPrinter::XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLPrinter( FILE* file = 0, bool compact = false );$/;"	kind:p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file = 0, bool compact = false )
tinyxml2::XMLPrinter::_accumulator	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< char, 20 > _accumulator;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_buffer	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< char, 20 > _buffer;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_compactMode	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _compactMode;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_depth	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _depth;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_elementJustOpened	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _elementJustOpened;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_entityFlag	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _entityFlag[ENTITY_RANGE];$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_firstElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _firstElement;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_fp	ext_libs/include/TinyXML2/tinyxml2.h	/^   FILE* _fp;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_processEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _processEntities;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_restrictedEntityFlag	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_stack	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< const char*, 10 > _stack;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_textDepth	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _textDepth;$/;"	kind:m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::~XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~XMLPrinter()	{}$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLText : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLText::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::CData	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool CData() const$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLText::SetCData	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetCData( bool isCData )$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
tinyxml2::XMLText::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLText::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLText* ToText()$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:()
tinyxml2::XMLText::ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLText* ToText() const$/;"	kind:f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	kind:f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLText::XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText( const XMLText& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
tinyxml2::XMLText::_isCData	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _isCData;$/;"	kind:m	class:tinyxml2::XMLText	access:private
tinyxml2::XMLText::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
tinyxml2::XMLText::~XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLText()												{}$/;"	kind:f	class:tinyxml2::XMLText	access:protected	signature:()
tinyxml2::XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLUnknown : public XMLNode$/;"	kind:c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLUnknown::Accept	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Accept( XMLVisitor* visitor ) const;$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::ParseDeep	ext_libs/include/TinyXML2/tinyxml2.h	/^   char* ParseDeep( char*, StrPair* endTag );$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLUnknown::ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLUnknown::ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	kind:p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLUnknown*	ToUnknown()$/;"	kind:f	class:tinyxml2::XMLUnknown	access:public	signature:()
tinyxml2::XMLUnknown::ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLUnknown* ToUnknown() const$/;"	kind:f	class:tinyxml2::XMLUnknown	access:public	signature:() const
tinyxml2::XMLUnknown::XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown( XMLDocument* doc );$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::~XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLUnknown();$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:()
tinyxml2::XMLUtil	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLUtil$/;"	kind:c	namespace:tinyxml2
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::GetCharacterRef	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::IsNameChar	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool IsNameChar( unsigned char ch )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
tinyxml2::XMLUtil::IsNameStartChar	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool IsNameStartChar( unsigned char ch )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
tinyxml2::XMLUtil::IsUTF8Continuation	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static int IsUTF8Continuation( const char p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( const char p )
tinyxml2::XMLUtil::IsWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool IsWhiteSpace( char p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
tinyxml2::XMLUtil::ReadBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
tinyxml2::XMLUtil::SkipWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static char* SkipWhiteSpace( char* p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
tinyxml2::XMLUtil::SkipWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* SkipWhiteSpace( const char* p )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
tinyxml2::XMLUtil::StringEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool StringEqual( const char* p, const char* q, int nChar = INT_MAX )$/;"	kind:f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar = INT_MAX )
tinyxml2::XMLUtil::ToBool	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool	ToBool( const char* str, bool* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToDouble	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool ToDouble( const char* str, double* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToFloat	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool	ToFloat( const char* str, float* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToInt	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool	ToInt( const char* str, int* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( bool v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( double v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( float v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( int v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToUnsigned	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool ToUnsigned( const char* str, unsigned* value );$/;"	kind:p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
tinyxml2::XMLUtil::n	ext_libs/include/TinyXML2/tinyxml2.h	/^      int n = 0;$/;"	kind:l
tinyxml2::XMLVisitor	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLVisitor$/;"	kind:c	namespace:tinyxml2
tinyxml2::XMLVisitor::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLComment& \/*comment*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
tinyxml2::XMLVisitor::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
tinyxml2::XMLVisitor::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLText& \/*text*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
tinyxml2::XMLVisitor::Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLUnknown& \/*unknown*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
tinyxml2::XMLVisitor::VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
tinyxml2::XMLVisitor::VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLDocument& \/*doc*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLElement& \/*element*\/ )$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
tinyxml2::XMLVisitor::~XMLVisitor	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLVisitor() {}$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:()
tinyxml2::XML_CAN_NOT_CONVERT_TEXT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_CAN_NOT_CONVERT_TEXT,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_ELEMENT_MISMATCH	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_ELEMENT_MISMATCH,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_EMPTY_DOCUMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_EMPTY_DOCUMENT,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_COULD_NOT_BE_OPENED	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_NOT_FOUND	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_NOT_FOUND,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_READ_ERROR	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_READ_ERROR,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_IDENTIFYING_TAG	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_IDENTIFYING_TAG,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_MISMATCHED_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_MISMATCHED_ELEMENT,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ATTRIBUTE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_ATTRIBUTE,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_CDATA	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_CDATA,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_COMMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_COMMENT,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_DECLARATION	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_DECLARATION,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_ELEMENT,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_TEXT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_TEXT,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_UNKNOWN	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_UNKNOWN,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ATTRIBUTE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_ATTRIBUTE,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ERROR	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_ERROR = 0,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_TEXT_NODE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_TEXT_NODE$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_SUCCESS	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_SUCCESS = 0,$/;"	kind:e	enum:tinyxml2::XMLError
tinyxml2::XML_WRONG_ATTRIBUTE_TYPE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_WRONG_ATTRIBUTE_TYPE,$/;"	kind:e	enum:tinyxml2::XMLError
update	include/MPE/classes/Affector.hpp	/^   virtual void update(Real theElapsedtime)$/;"	kind:f	class:mpe::Affector	access:public	signature:(Real theElapsedtime)
update	include/MPE/classes/Focus.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theElapsedTime)
update	include/MPE/classes/Particle.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theElapsedTime)
update	include/MPE/classes/System.hpp	/^   void     update(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theElapsedTime)
update	src/MPE/classes/Focus.cpp	/^void Focus::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
update	src/MPE/classes/Particle.cpp	/^void Particle::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Particle	signature:(Real theElapsedTime)
update	src/MPE/classes/System.cpp	/^         (*affector)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
update	src/MPE/classes/System.cpp	/^         (*it)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
update	src/MPE/classes/System.cpp	/^         particle->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
update	src/MPE/classes/System.cpp	/^void System::update (Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
updateFocusses	include/MPE/classes/System.hpp	/^   void updateFocusses (Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
updateFocusses	src/MPE/classes/System.cpp	/^void System::updateFocusses(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
updateParticles	include/MPE/classes/System.hpp	/^   void updateParticles(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
updateParticles	src/MPE/classes/System.cpp	/^void System::updateParticles(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
va	ext_libs/include/TinyXML2/tinyxml2.h	/^   va_list va;$/;"	kind:l
width	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
x	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
x	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
y	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	kind:m	struct:mpe::TextRect	access:public
y	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
~DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~DynArray()$/;"	kind:f	class:tinyxml2::DynArray	access:public	signature:()
~MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~MemPool() {}$/;"	kind:f	class:tinyxml2::MemPool	access:public	signature:()
~MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~MemPoolT()$/;"	kind:f	class:tinyxml2::MemPoolT	access:public	signature:()
~Particle	include/MPE/classes/Particle.hpp	/^   ~Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
~Particle	src/MPE/classes/Particle.cpp	/^Particle::~Particle() {}$/;"	kind:f	class:mpe::Particle	signature:()
~ParticleContainer	include/MPE/classes/ParticleContainer.hpp	/^      ~ParticleContainer ();$/;"	kind:p	class:mpe::ParticleContainer	access:public	signature:()
~ParticleContainer	src/MPE/classes/ParticleContainer.cpp	/^ParticleContainer::~ParticleContainer()$/;"	kind:f	class:mpe::ParticleContainer	signature:()
~StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~StrPair();$/;"	kind:p	class:tinyxml2::StrPair	access:public	signature:()
~XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLAttribute()	{}$/;"	kind:f	class:tinyxml2::XMLAttribute	access:private	signature:()
~XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLComment();$/;"	kind:p	class:tinyxml2::XMLComment	access:protected	signature:()
~XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLDeclaration();$/;"	kind:p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
~XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~XMLDocument();$/;"	kind:p	class:tinyxml2::XMLDocument	access:public	signature:()
~XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLElement();$/;"	kind:p	class:tinyxml2::XMLElement	access:private	signature:()
~XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLNode();$/;"	kind:p	class:tinyxml2::XMLNode	access:protected	signature:()
~XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~XMLPrinter()	{}$/;"	kind:f	class:tinyxml2::XMLPrinter	access:public	signature:()
~XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLText()												{}$/;"	kind:f	class:tinyxml2::XMLText	access:protected	signature:()
~XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLUnknown();$/;"	kind:p	class:tinyxml2::XMLUnknown	access:protected	signature:()
~XMLVisitor	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLVisitor() {}$/;"	kind:f	class:tinyxml2::XMLVisitor	access:public	signature:()
