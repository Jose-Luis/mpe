!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AFFECTOR_INC	include/MPE/classes/Affector.hpp	7;"	d
ATTRIBUTE_NAME	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE_LEAVE_ENTITIES	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE	ext_libs/include/TinyXML2/tinyxml2.h	/^      ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
AffectorPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Affector> AffectorPtr;$/;"	t	namespace:mpe
Affector	include/MPE/classes/Affector.hpp	/^class Affector: public Mortal$/;"	c	namespace:mpe
Affector	src/MPE/classes/Affector.cpp	/^Affector::Affector(Real theLifetime):$/;"	f	class:mpe::Affector
Alloc	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void* Alloc()$/;"	f	class:tinyxml2::MemPoolT
BUF_SIZE	ext_libs/include/TinyXML2/tinyxml2.h	/^      BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon6
BUF_SIZE	ext_libs/include/TinyXML2/tinyxml2.h	/^   enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon4
Block	ext_libs/include/TinyXML2/tinyxml2.h	/^   struct Block$/;"	s	class:tinyxml2::MemPoolT
BoolAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool	 BoolAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
BoolValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool	 BoolValue() const$/;"	f	class:tinyxml2::XMLAttribute
CData	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool CData() const$/;"	f	class:tinyxml2::XMLText
CIRCLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	e	enum:mpe::Emitter::Shape
CLOSED	ext_libs/include/TinyXML2/tinyxml2.h	/^      CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon5
CLOSING	ext_libs/include/TinyXML2/tinyxml2.h	/^      CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
COLLAPSE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^      COLLAPSE_WHITESPACE	                = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon1
COLLAPSE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^   COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
COMMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^      COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon1
CONFIG_MPE_INC	include/MPE/Config.hpp	8;"	d
COUNT	ext_libs/include/TinyXML2/tinyxml2.h	/^   enum { COUNT = (4 * 1024) \/ SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon3
CStrSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   int CStrSize() const$/;"	f	class:tinyxml2::XMLPrinter
CStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* CStr() const$/;"	f	class:tinyxml2::XMLPrinter
Capacity	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Capacity() const$/;"	f	class:tinyxml2::DynArray
Chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^   union Chunk$/;"	u	class:tinyxml2::MemPoolT
ClosingType	ext_libs/include/TinyXML2/tinyxml2.h	/^   int ClosingType() const$/;"	f	class:tinyxml2::XMLElement
Color	include/MPE/Config.hpp	/^struct Color$/;"	s	namespace:mpe
CurrentAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int CurrentAllocs() const$/;"	f	class:tinyxml2::MemPoolT
DEBUG	ext_libs/include/TinyXML2/tinyxml2.h	56;"	d
DUMMY	include/MPE/classes/Emitter.hpp	/^   static Emitter DUMMY;$/;"	m	class:mpe::Emitter
DUMMY	src/MPE/classes/Emitter.cpp	/^Emitter Emitter::DUMMY = Emitter("DUMMY");$/;"	m	class:mpe::Emitter	file:
DeleteNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   void DeleteNode( XMLNode* node )$/;"	f	class:tinyxml2::XMLDocument
Dispersion	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	g	class:mpe::Emitter
DoubleAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   double 	 DoubleAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
DoubleValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   double 	 DoubleValue() const$/;"	f	class:tinyxml2::XMLAttribute
DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< T, INIT >()$/;"	f	class:tinyxml2::DynArray
EMITTER_INC	include/MPE/classes/Emitter.hpp	9;"	d
ENTITY_RANGE	ext_libs/include/TinyXML2/tinyxml2.h	/^      ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon6
EmitterID	include/MPE/Config.hpp	/^typedef std::string EmitterID;$/;"	t	namespace:mpe
Emitter	include/MPE/classes/Emitter.hpp	/^class Emitter$/;"	c	namespace:mpe
Emitter	src/MPE/classes/Emitter.cpp	/^Emitter::Emitter(EmitterID theID):$/;"	f	class:mpe::Emitter
Empty	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Empty() const$/;"	f	class:tinyxml2::DynArray
Empty	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Empty() const$/;"	f	class:tinyxml2::StrPair
EnsureCapacity	ext_libs/include/TinyXML2/tinyxml2.h	/^   void EnsureCapacity( int cap )$/;"	f	class:tinyxml2::DynArray
ErrorID	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError  ErrorID() const$/;"	f	class:tinyxml2::XMLDocument
Error	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool Error() const$/;"	f	class:tinyxml2::XMLDocument
FIXED	include/MPE/Config.hpp	/^const bool FIXED = true;$/;"	m	namespace:mpe
FOCUS_INC	include/MPE/classes/Focus.hpp	7;"	d
FirstAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* FirstAttribute() const$/;"	f	class:tinyxml2::XMLElement
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* FirstChildElement( const char* value = 0 )$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle FirstChildElement( const char* value = 0 )$/;"	f	class:tinyxml2::XMLHandle
FirstChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle FirstChildElement( const char* value = 0 ) const$/;"	f	class:tinyxml2::XMLConstHandle
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle FirstChild()$/;"	f	class:tinyxml2::XMLHandle
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		FirstChild()$/;"	f	class:tinyxml2::XMLNode
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle FirstChild() const$/;"	f	class:tinyxml2::XMLConstHandle
FirstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*  FirstChild() const$/;"	f	class:tinyxml2::XMLNode
FloatAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   float	 FloatAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
FloatValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   float	 FloatValue() const$/;"	f	class:tinyxml2::XMLAttribute
FocusPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Focus> FocusPtr;$/;"	t	namespace:mpe
Focus	include/MPE/classes/Focus.hpp	/^class Focus: public Mortal$/;"	c	namespace:mpe
Focus	src/MPE/classes/Focus.cpp	/^Focus::Focus(const Emitter& theEmitter):$/;"	f	class:mpe::Focus
Free	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual void Free( void* mem )$/;"	f	class:tinyxml2::MemPoolT
GENERATOR_TL9DCTRC	include/MPE/classes/Generator.hpp	2;"	d
GROUP_A	include/MPE/Config.hpp	/^const GroupID GROUP_A = 0x01;$/;"	m	namespace:mpe
GROUP_B	include/MPE/Config.hpp	/^const GroupID GROUP_B = 0x02;$/;"	m	namespace:mpe
GROUP_C	include/MPE/Config.hpp	/^const GroupID GROUP_C = 0x04;$/;"	m	namespace:mpe
GROUP_D	include/MPE/Config.hpp	/^const GroupID GROUP_D = 0x08;$/;"	m	namespace:mpe
GROUP_E	include/MPE/Config.hpp	/^const GroupID GROUP_E = 0x10;$/;"	m	namespace:mpe
GROUP_F	include/MPE/Config.hpp	/^const GroupID GROUP_F = 0x20;$/;"	m	namespace:mpe
GROUP_G	include/MPE/Config.hpp	/^const GroupID GROUP_G = 0x40;$/;"	m	namespace:mpe
GROUP_H	include/MPE/Config.hpp	/^const GroupID GROUP_H = 0x80;$/;"	m	namespace:mpe
Generator	include/MPE/classes/Generator.hpp	/^class Generator$/;"	c	namespace:mpe
Generator	src/MPE/classes/Generator.cpp	/^Generator<Integer>::Generator():$/;"	f	class:mpe::Generator
Generator	src/MPE/classes/Generator.cpp	/^Generator<Integer>::Generator(Integer theMin, Integer theMax):$/;"	f	class:mpe::Generator
Generator	src/MPE/classes/Generator.cpp	/^Generator<Real>::Generator():$/;"	f	class:mpe::Generator
Generator	src/MPE/classes/Generator.cpp	/^Generator<Real>::Generator(Real theMin, Real theMax):$/;"	f	class:mpe::Generator
Generator	src/MPE/classes/Generator.cpp	/^Generator<T>::Generator(T theNumber):$/;"	f	class:mpe::Generator
GetDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument* GetDocument()$/;"	f	class:tinyxml2::XMLNode
GetDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLDocument* GetDocument() const$/;"	f	class:tinyxml2::XMLNode
GetErrorStr1	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetErrorStr1() const$/;"	f	class:tinyxml2::XMLDocument
GetErrorStr2	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* GetErrorStr2() const$/;"	f	class:tinyxml2::XMLDocument
GroupID	include/MPE/Config.hpp	/^typedef unsigned char GroupID;$/;"	t	namespace:mpe
HasBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool HasBOM() const$/;"	f	class:tinyxml2::XMLDocument
IntAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int		 IntAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
IntValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   int		 IntValue() const$/;"	f	class:tinyxml2::XMLAttribute
Integer	include/MPE/Config.hpp	/^typedef int Integer;$/;"	t	namespace:mpe
IsNameChar	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool IsNameChar( unsigned char ch )$/;"	f	class:tinyxml2::XMLUtil
IsNameStartChar	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool IsNameStartChar( unsigned char ch )$/;"	f	class:tinyxml2::XMLUtil
IsUTF8Continuation	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static int IsUTF8Continuation( const char p )$/;"	f	class:tinyxml2::XMLUtil
IsWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static bool IsWhiteSpace( char p )$/;"	f	class:tinyxml2::XMLUtil
ItemSize	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual int ItemSize() const$/;"	f	class:tinyxml2::MemPoolT
LINEAR	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* LastChildElement( const char* value = 0 )$/;"	f	class:tinyxml2::XMLNode
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle LastChildElement( const char* _value = 0 )$/;"	f	class:tinyxml2::XMLHandle
LastChildElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle LastChildElement( const char* _value = 0 ) const$/;"	f	class:tinyxml2::XMLConstHandle
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle LastChild()$/;"	f	class:tinyxml2::XMLHandle
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		LastChild()$/;"	f	class:tinyxml2::XMLNode
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle LastChild()	const$/;"	f	class:tinyxml2::XMLConstHandle
LastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	LastChild() const$/;"	f	class:tinyxml2::XMLNode
LinkEndChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* LinkEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
MAX_INTEGER	include/MPE/Config.hpp	/^const Integer MAX_INTEGER = std::numeric_limits<Integer>::max();$/;"	m	namespace:mpe
MORTAL_INC	include/MPE/classes/Mortal.hpp	8;"	d
MPE_INC	include/MPE/MPE.hpp	7;"	d
MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2
MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT
MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool() {}$/;"	f	class:tinyxml2::MemPool
Mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   T* Mem()$/;"	f	class:tinyxml2::DynArray
Mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   const T* Mem() const$/;"	f	class:tinyxml2::DynArray
Mortal	include/MPE/classes/Mortal.hpp	/^class Mortal$/;"	c	namespace:mpe
Mortal	src/MPE/classes/Mortal.cpp	/^Mortal::Mortal(Real theLifetime):$/;"	f	class:mpe::Mortal
NEEDS_DELETE	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon2
NEEDS_ENTITY_PROCESSING	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon1
NEEDS_FLUSH	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon2
NEEDS_NEWLINE_NORMALIZATION	ext_libs/include/TinyXML2/tinyxml2.h	/^      NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon1
NON_FIXED	include/MPE/Config.hpp	/^const bool NON_FIXED = false;$/;"	m	namespace:mpe
NO_GROUP	include/MPE/Config.hpp	/^const GroupID NO_GROUP = 0x00;$/;"	m	namespace:mpe
Name	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Name() const$/;"	f	class:tinyxml2::XMLAttribute
Name	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Name() const$/;"	f	class:tinyxml2::XMLElement
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement*	NextSiblingElement( const char* value = 0 )$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle NextSiblingElement( const char* _value = 0 )$/;"	f	class:tinyxml2::XMLHandle
NextSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle NextSiblingElement( const char* _value = 0 ) const$/;"	f	class:tinyxml2::XMLConstHandle
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle NextSibling()$/;"	f	class:tinyxml2::XMLHandle
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*	NextSibling()$/;"	f	class:tinyxml2::XMLNode
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle NextSibling() const$/;"	f	class:tinyxml2::XMLConstHandle
NextSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	NextSibling() const$/;"	f	class:tinyxml2::XMLNode
Next	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLAttribute* Next() const$/;"	f	class:tinyxml2::XMLAttribute
NoChildren	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool NoChildren() const$/;"	f	class:tinyxml2::XMLNode
OPEN	ext_libs/include/TinyXML2/tinyxml2.h	/^      OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
PARTICLECONTAINER_N3JXVU09	include/MPE/classes/ParticleContainer.hpp	2;"	d
PARTICLE_INC	include/MPE/classes/Particle.hpp	8;"	d
PRESERVE_WHITESPACE	ext_libs/include/TinyXML2/tinyxml2.h	/^   PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
Parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* Parent()$/;"	f	class:tinyxml2::XMLNode
Parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	Parent() const$/;"	f	class:tinyxml2::XMLNode
ParticleContainer	include/MPE/classes/ParticleContainer.hpp	/^   class ParticleContainer $/;"	c	namespace:mpe
ParticleContainer	src/MPE/classes/ParticleContainer.cpp	/^ParticleContainer::ParticleContainer(size_t theSize, bool theFixed):$/;"	f	class:mpe::ParticleContainer
Particle	include/MPE/classes/Particle.hpp	/^class Particle: public Mortal$/;"	c	namespace:mpe
Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle():$/;"	f	class:mpe::Particle
PopArr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void PopArr( int count )$/;"	f	class:tinyxml2::DynArray
Pop	ext_libs/include/TinyXML2/tinyxml2.h	/^   T Pop()$/;"	f	class:tinyxml2::DynArray
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement*	PreviousSiblingElement( const char* value = 0 )$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle PreviousSiblingElement( const char* _value = 0 )$/;"	f	class:tinyxml2::XMLHandle
PreviousSiblingElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle PreviousSiblingElement( const char* _value = 0 ) const$/;"	f	class:tinyxml2::XMLConstHandle
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle PreviousSibling()$/;"	f	class:tinyxml2::XMLHandle
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*	PreviousSibling()$/;"	f	class:tinyxml2::XMLNode
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLConstHandle PreviousSibling() const$/;"	f	class:tinyxml2::XMLConstHandle
PreviousSibling	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode*	PreviousSibling() const$/;"	f	class:tinyxml2::XMLNode
ProcessEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool ProcessEntities() const$/;"	f	class:tinyxml2::XMLDocument
PushArr	ext_libs/include/TinyXML2/tinyxml2.h	/^   T* PushArr( int count )$/;"	f	class:tinyxml2::DynArray
Push	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Push( T t )$/;"	f	class:tinyxml2::DynArray
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, bool* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, double* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, float* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, int* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   int QueryAttribute( const char* name, unsigned int* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryBoolAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryBoolAttribute( const char* name, bool* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryDoubleAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryDoubleAttribute( const char* name, double* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryFloatAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryFloatAttribute( const char* name, float* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryIntAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryIntAttribute( const char* name, int* value ) const$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const$/;"	f	class:tinyxml2::XMLElement
RADIAL	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
RANDOM	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
REAL_INFINITY	include/MPE/Config.hpp	/^const Real REAL_INFINITY = std::numeric_limits<Real>::infinity();$/;"	m	namespace:mpe
RECTANGLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	e	enum:mpe::Emitter::Shape
REFLECT	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
Real	include/MPE/Config.hpp	/^typedef float Real;$/;"	t	namespace:mpe
RootElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* RootElement()$/;"	f	class:tinyxml2::XMLDocument
RootElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* RootElement() const$/;"	f	class:tinyxml2::XMLDocument
STATIC	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
SYSTEM_INC	include/MPE/classes/System.hpp	7;"	d
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, bool value )$/;"	f	class:tinyxml2::XMLElement
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLElement
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, double value )$/;"	f	class:tinyxml2::XMLElement
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, int value )$/;"	f	class:tinyxml2::XMLElement
SetAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetAttribute( const char* name, unsigned value )$/;"	f	class:tinyxml2::XMLElement
SetBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetBOM( bool useBOM )$/;"	f	class:tinyxml2::XMLDocument
SetCData	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetCData( bool isCData )$/;"	f	class:tinyxml2::XMLText
SetInternedStr	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetInternedStr( const char* str )$/;"	f	class:tinyxml2::StrPair
SetName	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetName( const char* str, bool staticMem = false )$/;"	f	class:tinyxml2::XMLElement
SetTracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   void SetTracked()$/;"	f	class:tinyxml2::MemPoolT
Set	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Set( char* start, char* end, int flags )$/;"	f	class:tinyxml2::StrPair
ShallowClone	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const$/;"	f	class:tinyxml2::XMLDocument
ShallowEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const$/;"	f	class:tinyxml2::XMLDocument
Shape	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	g	class:mpe::Emitter
Size	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Size() const$/;"	f	class:tinyxml2::DynArray
SkipWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static char* SkipWhiteSpace( char* p )$/;"	f	class:tinyxml2::XMLUtil
SkipWhiteSpace	ext_libs/include/TinyXML2/tinyxml2.h	/^   static const char* SkipWhiteSpace( const char* p )$/;"	f	class:tinyxml2::XMLUtil
StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
StrPair	ext_libs/include/TinyXML2/tinyxml2.h	/^   StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair
StringEqual	ext_libs/include/TinyXML2/tinyxml2.h	/^   inline static bool StringEqual( const char* p, const char* q, int nChar = INT_MAX )$/;"	f	class:tinyxml2::XMLUtil
System	include/MPE/classes/System.hpp	/^class System$/;"	c	namespace:mpe
System	src/MPE/classes/System.cpp	/^System::System ():$/;"	f	class:mpe::System
System	src/MPE/classes/System.cpp	/^System::System (size_t theNParticles,bool theFixed):$/;"	f	class:mpe::System
TEXT_ELEMENT_LEAVE_ENTITIES	ext_libs/include/TinyXML2/tinyxml2.h	/^      TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
TEXT_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^      TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
TINYXML2_INCLUDED	ext_libs/include/TinyXML2/tinyxml2.h	25;"	d
TIXML2_MAJOR_VERSION	ext_libs/include/TinyXML2/tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 1;$/;"	v
TIXML2_MINOR_VERSION	ext_libs/include/TinyXML2/tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	v
TIXML2_PATCH_VERSION	ext_libs/include/TinyXML2/tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 11;$/;"	v
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	63;"	d
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	66;"	d
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	69;"	d
TIXMLASSERT	ext_libs/include/TinyXML2/tinyxml2.h	72;"	d
TIXML_SNPRINTF	ext_libs/include/TinyXML2/tinyxml2.h	97;"	d
TIXML_SNPRINTF	ext_libs/include/TinyXML2/tinyxml2.h	/^inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f
TIXML_SSCANF	ext_libs/include/TinyXML2/tinyxml2.h	93;"	d
TIXML_SSCANF	ext_libs/include/TinyXML2/tinyxml2.h	98;"	d
TextRect	include/MPE/Config.hpp	/^struct TextRect$/;"	s	namespace:mpe
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLComment*		ToComment()$/;"	f	class:tinyxml2::XMLNode
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLComment*	ToComment()$/;"	f	class:tinyxml2::XMLComment
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLComment*		ToComment() const$/;"	f	class:tinyxml2::XMLNode
ToComment	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLComment* ToComment() const$/;"	f	class:tinyxml2::XMLComment
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDeclaration* ToDeclaration()$/;"	f	class:tinyxml2::XMLHandle
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLDeclaration* ToDeclaration() const$/;"	f	class:tinyxml2::XMLConstHandle
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDeclaration*	ToDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDeclaration*	ToDeclaration()$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDeclaration*	ToDeclaration() const$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDeclaration* ToDeclaration() const$/;"	f	class:tinyxml2::XMLDeclaration
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDocument*	ToDocument()$/;"	f	class:tinyxml2::XMLNode
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLDocument* ToDocument()$/;"	f	class:tinyxml2::XMLDocument
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDocument*		ToDocument() const$/;"	f	class:tinyxml2::XMLNode
ToDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLDocument* ToDocument() const$/;"	f	class:tinyxml2::XMLDocument
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLElement* ToElement()$/;"	f	class:tinyxml2::XMLHandle
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLElement* ToElement() const$/;"	f	class:tinyxml2::XMLConstHandle
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLElement*		ToElement()$/;"	f	class:tinyxml2::XMLNode
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLElement* ToElement()$/;"	f	class:tinyxml2::XMLElement
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLElement*		ToElement() const$/;"	f	class:tinyxml2::XMLNode
ToElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLElement* ToElement() const$/;"	f	class:tinyxml2::XMLElement
ToNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* ToNode()$/;"	f	class:tinyxml2::XMLHandle
ToNode	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode* ToNode() const$/;"	f	class:tinyxml2::XMLConstHandle
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText* ToText()$/;"	f	class:tinyxml2::XMLHandle
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLText* ToText() const$/;"	f	class:tinyxml2::XMLConstHandle
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLText*		ToText()$/;"	f	class:tinyxml2::XMLNode
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLText* ToText()$/;"	f	class:tinyxml2::XMLText
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLText*			ToText() const$/;"	f	class:tinyxml2::XMLNode
ToText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLText* ToText() const$/;"	f	class:tinyxml2::XMLText
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLUnknown* ToUnknown()$/;"	f	class:tinyxml2::XMLHandle
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLUnknown* ToUnknown() const$/;"	f	class:tinyxml2::XMLConstHandle
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLUnknown*		ToUnknown()$/;"	f	class:tinyxml2::XMLNode
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual XMLUnknown*	ToUnknown()$/;"	f	class:tinyxml2::XMLUnknown
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLUnknown*		ToUnknown() const$/;"	f	class:tinyxml2::XMLNode
ToUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual const XMLUnknown* ToUnknown() const$/;"	f	class:tinyxml2::XMLUnknown
Trace	ext_libs/include/TinyXML2/tinyxml2.h	/^   void Trace( const char* name )$/;"	f	class:tinyxml2::MemPoolT
UnsignedAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   unsigned UnsignedAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
UnsignedValue	ext_libs/include/TinyXML2/tinyxml2.h	/^   unsigned UnsignedValue() const$/;"	f	class:tinyxml2::XMLAttribute
Untracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   int Untracked() const$/;"	f	class:tinyxml2::MemPoolT
VEC2_GSAIH2DS	include/MPE/classes/Vec2.hpp	7;"	d
Value	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Value() const$/;"	f	class:tinyxml2::XMLAttribute
Value	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* Value() const$/;"	f	class:tinyxml2::XMLNode
Vec2	include/MPE/classes/Vec2.hpp	/^class Vec2$/;"	c	namespace:mpe
Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(): x(0), y(0) {}$/;"	f	class:mpe::Vec2
Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(Real theX, Real theY):$/;"	f	class:mpe::Vec2
VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLDocument& \/*doc*\/ )$/;"	f	class:tinyxml2::XMLPrinter
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLDocument& \/*doc*\/ )$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool VisitExit( const XMLElement& \/*element*\/ )$/;"	f	class:tinyxml2::XMLVisitor
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLComment& \/*comment*\/ )$/;"	f	class:tinyxml2::XMLVisitor
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )$/;"	f	class:tinyxml2::XMLVisitor
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLText& \/*text*\/ )$/;"	f	class:tinyxml2::XMLVisitor
Visit	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual bool Visit( const XMLUnknown& \/*unknown*\/ )$/;"	f	class:tinyxml2::XMLVisitor
WhitespaceMode	ext_libs/include/TinyXML2/tinyxml2.h	/^   Whitespace WhitespaceMode() const$/;"	f	class:tinyxml2::XMLDocument
Whitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^enum Whitespace$/;"	g	namespace:tinyxml2
XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLAttribute$/;"	c	namespace:tinyxml2
XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute() : _next( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute
XMLComment	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLComment : public XMLNode$/;"	c	namespace:tinyxml2
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLConstHandle$/;"	c	namespace:tinyxml2
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLConstHandle& ref )$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLNode& node )$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle( const XMLNode* node )$/;"	f	class:tinyxml2::XMLConstHandle
XMLDeclaration	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2
XMLDocument	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2
XMLElement	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLElement : public XMLNode$/;"	c	namespace:tinyxml2
XMLError	ext_libs/include/TinyXML2/tinyxml2.h	/^enum XMLError$/;"	g	namespace:tinyxml2
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLHandle$/;"	c	namespace:tinyxml2
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( XMLNode& node )$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( XMLNode* node )$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle( const XMLHandle& ref )$/;"	f	class:tinyxml2::XMLHandle
XMLNode	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLNode$/;"	c	namespace:tinyxml2
XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2
XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLText : public XMLNode$/;"	c	namespace:tinyxml2
XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText
XMLUnknown	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2
XMLUtil	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	ext_libs/include/TinyXML2/tinyxml2.h	/^class XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ERROR	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_NO_TEXT_NODE$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	ext_libs/include/TinyXML2/tinyxml2.h	/^   XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
_accumulator	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< char, 20 > _accumulator;$/;"	m	class:tinyxml2::XMLPrinter
_allocated	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray
_attributePool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument
_blockPtrs	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT
_buffer	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter
_charBuffer	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument
_closingType	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _closingType;$/;"	m	class:tinyxml2::XMLElement
_commentPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument
_compactMode	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter
_currentAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT
_depth	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _depth;$/;"	m	class:tinyxml2::XMLPrinter
_document	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode
_elementJustOpened	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter
_elementPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument
_end	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*   _end;$/;"	m	class:tinyxml2::StrPair
_entityFlag	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_errorID	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument
_errorStr1	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument
_errorStr2	ext_libs/include/TinyXML2/tinyxml2.h	/^   const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument
_firstChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode
_firstElement	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter
_flags	ext_libs/include/TinyXML2/tinyxml2.h	/^   int     _flags;$/;"	m	class:tinyxml2::StrPair
_fp	ext_libs/include/TinyXML2/tinyxml2.h	/^   FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter
_isCData	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _isCData;$/;"	m	class:tinyxml2::XMLText
_lastChild	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode
_maxAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT
_memPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode
_memPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute
_mem	ext_libs/include/TinyXML2/tinyxml2.h	/^   T*  _mem;$/;"	m	class:tinyxml2::DynArray
_nAllocs	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT
_nUntracked	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT
_name	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute
_next	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute
_next	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode
_node	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle
_node	ext_libs/include/TinyXML2/tinyxml2.h	/^   const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle
_parent	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode
_pool	ext_libs/include/TinyXML2/tinyxml2.h	/^   T   _pool[INIT];$/;"	m	class:tinyxml2::DynArray
_prev	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode
_processEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument
_processEntities	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter
_restrictedEntityFlag	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_rootAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement
_root	ext_libs/include/TinyXML2/tinyxml2.h	/^   Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT
_size	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray
_stack	ext_libs/include/TinyXML2/tinyxml2.h	/^   DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter
_start	ext_libs/include/TinyXML2/tinyxml2.h	/^   char*   _start;$/;"	m	class:tinyxml2::StrPair
_textDepth	ext_libs/include/TinyXML2/tinyxml2.h	/^   int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter
_textPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument
_value	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode
_value	ext_libs/include/TinyXML2/tinyxml2.h	/^   mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute
_whitespace	ext_libs/include/TinyXML2/tinyxml2.h	/^   Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument
_writeBOM	ext_libs/include/TinyXML2/tinyxml2.h	/^   bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument
aBoolean	tests/tests.cpp	/^   bool aBoolean = aParticleSystem.initFromFile("Emitter.xml");$/;"	l
aCosine	include/MPE/classes/Vec2.hpp	/^      Real aCosine = std::cos(theAngle);$/;"	l
aEmitter	tests/tests.cpp	/^      mpe::Emitter& aEmitter = aParticleSystem.getEmitter("Emitter1");$/;"	l
aFile	src/MPE/classes/System.cpp	/^   tinyxml2::XMLDocument aFile;$/;"	l
aSine	include/MPE/classes/Vec2.hpp	/^      Real aSine = std::sin(theAngle);$/;"	l
aSize	src/MPE/classes/ParticleContainer.cpp	/^      size_t aSize = theNumberOfParticles>mSize?mSize:theNumberOfParticles;$/;"	l
addAffector	src/MPE/classes/System.cpp	/^void System::addAffector(AffectorPtr theAffector)$/;"	f	class:mpe::System
addEmitter	src/MPE/classes/System.cpp	/^void System::addEmitter(Emitter& theEmitter)$/;"	f	class:mpe::System
addFocus	src/MPE/classes/System.cpp	/^void System::addFocus(FocusPtr theFocus)$/;"	f	class:mpe::System
addGroups	src/MPE/classes/Focus.cpp	/^void Focus::addGroups(GroupID theGroups)$/;"	f	class:mpe::Focus
addParticle	src/MPE/classes/ParticleContainer.cpp	/^Particle* ParticleContainer::addParticle()            $/;"	f	class:mpe::ParticleContainer
addParticle	src/MPE/classes/System.cpp	/^Particle* System::addParticle ()$/;"	f	class:mpe::System
age	include/MPE/classes/Mortal.hpp	/^   inline void age(Real theElapsedTime)$/;"	f	class:mpe::Mortal
a	ext_libs/include/TinyXML2/tinyxml2.h	/^      XMLAttribute* a = FindOrCreateAttribute( name );$/;"	l
a	ext_libs/include/TinyXML2/tinyxml2.h	/^      const XMLAttribute* a = FindAttribute( name );$/;"	l
a	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	m	struct:mpe::Color
anAlpha	src/MPE/classes/Particle.cpp	/^   int anAlpha = mColor.a + theAlphaInc;$/;"	l
anEmitterID	src/MPE/classes/System.cpp	/^   EmitterID anEmitterID = theEmitter.getID();$/;"	l
anFocus	src/MPE/classes/Emitter.cpp	/^   FocusPtr anFocus = Focus::create((*this));$/;"	l
anLength	include/MPE/classes/Vec2.hpp	/^      Real anLength = length();$/;"	l
anParticle	src/MPE/classes/Focus.cpp	/^   Particle* anParticle = mEmitter.getSystem()->addParticle();$/;"	l
anPosition	src/MPE/classes/Emitter.cpp	/^   Vec2 anPosition;$/;"	l
anPosition	src/MPE/classes/Focus.cpp	/^      Vec2 anPosition = mEmitter.generatePosition(*this); $/;"	l
anVelocity	src/MPE/classes/Emitter.cpp	/^   Vec2 anVelocity;$/;"	l
anVelocity	src/MPE/classes/Focus.cpp	/^      Vec2 anVelocity = mEmitter.generateVelocity(*this,anPosition); $/;"	l
begin	include/MPE/classes/ParticleContainer.hpp	/^      const_iterator begin() const {return mParticles;}$/;"	f	class:mpe::ParticleContainer
begin	include/MPE/classes/ParticleContainer.hpp	/^      iterator begin() {return mParticles;}$/;"	f	class:mpe::ParticleContainer
belongToGroup	src/MPE/classes/Particle.cpp	/^bool Particle::belongToGroup(const GroupID theGroups) const$/;"	f	class:mpe::Particle
b	ext_libs/include/TinyXML2/tinyxml2.h	/^      bool b = false;$/;"	l
block	ext_libs/include/TinyXML2/tinyxml2.h	/^         Block* block = new Block();$/;"	l
b	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	m	struct:mpe::Color
chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk* chunk = (Chunk*)mem;$/;"	l
chunk	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block
cout	tests/tests.cpp	/^      std::cout << "Particle system init from 'Emitter.xml'";$/;"	m	class:std	file:
cout	tests/tests.cpp	/^      std::cout << "Something was wrong...";$/;"	m	class:std	file:
createFocus	src/MPE/classes/Emitter.cpp	/^FocusPtr Emitter::createFocus() const$/;"	f	class:mpe::Emitter
createFocus	src/MPE/classes/System.cpp	/^FocusPtr System::createFocus(EmitterID theEmitterID)$/;"	f	class:mpe::System
create	src/MPE/classes/Focus.cpp	/^FocusPtr Focus::create(const Emitter&  theEmitter)$/;"	f	class:mpe::Focus
create	src/MPE/classes/Generator.cpp	/^Generator<T> Generator<T>::create(T theMin, T theMax)$/;"	f	class:mpe::Generator
die	include/MPE/classes/Mortal.hpp	/^   inline void die()$/;"	f	class:mpe::Mortal
d	ext_libs/include/TinyXML2/tinyxml2.h	/^      double d = 0;$/;"	l
drain	src/MPE/classes/Focus.cpp	/^Integer Focus::drain(Real theElapsedTime)$/;"	f	class:mpe::Focus
emit	src/MPE/classes/Focus.cpp	/^void Focus::emit(Integer theNParticles)$/;"	f	class:mpe::Focus
end	include/MPE/classes/ParticleContainer.hpp	/^      const_iterator end() const {return mParticles + mSize;}$/;"	f	class:mpe::ParticleContainer
end	include/MPE/classes/ParticleContainer.hpp	/^      iterator end() {return mParticles + mSize;}$/;"	f	class:mpe::ParticleContainer
f	ext_libs/include/TinyXML2/tinyxml2.h	/^      float f = 0;$/;"	l
generatePosition	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generatePosition(const Focus& theFocus) const$/;"	f	class:mpe::Emitter
generateVelocity	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generateVelocity(const Focus& theFocus,$/;"	f	class:mpe::Emitter
getAge	include/MPE/classes/Mortal.hpp	/^   inline Real getAge() const$/;"	f	class:mpe::Mortal
getAngle	src/MPE/classes/Focus.cpp	/^Real Focus::getAngle() const$/;"	f	class:mpe::Focus
getAngle	src/MPE/classes/Particle.cpp	/^Real Particle::getAngle() const$/;"	f	class:mpe::Particle
getAngularVelocity	src/MPE/classes/Particle.cpp	/^Real Particle::getAngularVelocity() const$/;"	f	class:mpe::Particle
getColor	src/MPE/classes/Particle.cpp	/^Color Particle::getColor() const$/;"	f	class:mpe::Particle
getEmitter	src/MPE/classes/System.cpp	/^Emitter& System::getEmitter ( EmitterID theEmitterID )$/;"	f	class:mpe::System
getFocusHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusHeight() const$/;"	f	class:mpe::Emitter
getFocusNP	src/MPE/classes/Emitter.cpp	/^Integer Emitter::getFocusNP() const$/;"	f	class:mpe::Emitter
getFocusPPS	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusPPS() const$/;"	f	class:mpe::Emitter
getFocusTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusTOL() const$/;"	f	class:mpe::Emitter
getFocusWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusWidth() const$/;"	f	class:mpe::Emitter
getGroups	src/MPE/classes/Particle.cpp	/^GroupID Particle::getGroups() const$/;"	f	class:mpe::Particle
getHeight	src/MPE/classes/Focus.cpp	/^Real Focus::getHeight() const$/;"	f	class:mpe::Focus
getID	src/MPE/classes/Emitter.cpp	/^EmitterID Emitter::getID() const$/;"	f	class:mpe::Emitter
getLinearVelocity	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getLinearVelocity() const$/;"	f	class:mpe::Particle
getPPS	src/MPE/classes/Focus.cpp	/^Real Focus::getPPS ()$/;"	f	class:mpe::Focus
getParticleAV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAV() const$/;"	f	class:mpe::Emitter
getParticleAngle	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAngle() const$/;"	f	class:mpe::Emitter
getParticleLV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleLV() const$/;"	f	class:mpe::Emitter
getParticleSize	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleSize() const$/;"	f	class:mpe::Emitter
getParticleTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleTOL() const$/;"	f	class:mpe::Emitter
getParticlesBegin	src/MPE/classes/System.cpp	/^ParticleContainer::const_iterator System::getParticlesBegin() const$/;"	f	class:mpe::System
getParticlesEnd	src/MPE/classes/System.cpp	/^ParticleContainer::const_iterator System::getParticlesEnd() const$/;"	f	class:mpe::System
getParticlesSize	src/MPE/classes/System.cpp	/^Integer System::getParticlesSize()$/;"	f	class:mpe::System
getPosition	src/MPE/classes/Focus.cpp	/^Vec2 Focus::getPosition() const$/;"	f	class:mpe::Focus
getPosition	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getPosition() const$/;"	f	class:mpe::Particle
getSize	src/MPE/classes/Particle.cpp	/^Real Particle::getSize() const$/;"	f	class:mpe::Particle
getSystem	src/MPE/classes/Emitter.cpp	/^System* Emitter::getSystem() const$/;"	f	class:mpe::Emitter
getTextRect	src/MPE/classes/Emitter.cpp	/^TextRect Emitter::getTextRect() const$/;"	f	class:mpe::Emitter
getTextRect	src/MPE/classes/Particle.cpp	/^TextRect Particle::getTextRect() const$/;"	f	class:mpe::Particle
getWidth	src/MPE/classes/Focus.cpp	/^Real Focus::getWidth() const$/;"	f	class:mpe::Focus
getXFactor	src/MPE/classes/System.cpp	/^Real System::getXFactor() const$/;"	f	class:mpe::System
getX	include/MPE/classes/Vec2.hpp	/^   Real getX()$/;"	f	class:mpe::Vec2
getYFactor	src/MPE/classes/System.cpp	/^Real System::getYFactor() const$/;"	f	class:mpe::System
getY	include/MPE/classes/Vec2.hpp	/^   Real getY()$/;"	f	class:mpe::Vec2
g	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	m	struct:mpe::Color
grow	src/MPE/classes/ParticleContainer.cpp	/^bool ParticleContainer::grow()$/;"	f	class:mpe::ParticleContainer
height	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	m	struct:mpe::TextRect
i	ext_libs/include/TinyXML2/tinyxml2.h	/^      int i = 0;$/;"	l
i	ext_libs/include/TinyXML2/tinyxml2.h	/^      unsigned i = 0;$/;"	l
initFromFile	src/MPE/classes/System.cpp	/^bool System::initFromFile(std::string theFilename)$/;"	f	class:mpe::System
initParticle	src/MPE/classes/Focus.cpp	/^void Focus::initParticle()$/;"	f	class:mpe::Focus
init	include/MPE/classes/Vec2.hpp	/^   void init(Real theX, Real theY)$/;"	f	class:mpe::Vec2
isAlive	include/MPE/classes/Mortal.hpp	/^   inline bool isAlive()$/;"	f	class:mpe::Mortal
isTransparent	src/MPE/classes/Particle.cpp	/^bool Particle::isTransparent()$/;"	f	class:mpe::Particle
it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(anEmitterID);$/;"	l
it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(theEmitterID);$/;"	l
kill	include/MPE/classes/Mortal.hpp	/^   inline void kill()$/;"	f	class:mpe::Mortal
length	include/MPE/classes/Vec2.hpp	/^   Real length()$/;"	f	class:mpe::Vec2
mAffectors	include/MPE/classes/System.hpp	/^   std::list<AffectorPtr>        mAffectors;$/;"	m	class:mpe::System
mAge	include/MPE/classes/Mortal.hpp	/^   Real mAge;$/;"	m	class:mpe::Mortal
mAlive	include/MPE/classes/Mortal.hpp	/^   bool mAlive;$/;"	m	class:mpe::Mortal
mAngle	include/MPE/classes/Focus.hpp	/^   Real      mAngle;$/;"	m	class:mpe::Focus
mAngle	include/MPE/classes/Particle.hpp	/^   Real      mAngle;$/;"	m	class:mpe::Particle
mAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real      mAngularVelocity;$/;"	m	class:mpe::Particle
mColor	include/MPE/classes/Particle.hpp	/^   Color     mColor;$/;"	m	class:mpe::Particle
mDispersion	include/MPE/classes/Emitter.hpp	/^   Dispersion  mDispersion;    \/\/\/< Type of paricles' dispersion.$/;"	m	class:mpe::Emitter
mEP	include/MPE/classes/Focus.hpp	/^   Integer   mEP; $/;"	m	class:mpe::Focus
mEmitter	include/MPE/classes/Focus.hpp	/^   const Emitter&  mEmitter;$/;"	m	class:mpe::Focus
mEmitters	include/MPE/classes/System.hpp	/^   std::map<EmitterID, Emitter>  mEmitters;$/;"	m	class:mpe::System
mFixedSize	src/MPE/classes/ParticleContainer.cpp	/^   mFixedSize(theFixed)$/;"	f	namespace:mpe
mFixedSize	include/MPE/classes/ParticleContainer.hpp	/^      bool mFixedSize;$/;"	m	class:mpe::ParticleContainer
mFocusses	include/MPE/classes/System.hpp	/^   std::list<FocusPtr>           mFocusses;$/;"	m	class:mpe::System
mGenFocHeight	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocHeight;\/\/\/< Generator of focus height.$/;"	m	class:mpe::Emitter
mGenFocNP	include/MPE/classes/Emitter.hpp	/^   Generator<Integer> mGenFocNP; \/\/\/< Generator of focus number of particles.$/;"	m	class:mpe::Emitter
mGenFocPPS	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocPPS;   \/\/\/< Generator of focus particles per second.$/;"	m	class:mpe::Emitter
mGenFocTOL	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocTOL;   \/\/\/< Generator of focus time of life.$/;"	m	class:mpe::Emitter
mGenFocWidth	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenFocWidth; \/\/\/< Generator of focus width.$/;"	m	class:mpe::Emitter
mGenParAV	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParAV;    \/\/\/< Generator of particles angular velocity.$/;"	m	class:mpe::Emitter
mGenParAngle	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParAngle; \/\/\/< Generator of particles angle.$/;"	m	class:mpe::Emitter
mGenParLV	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParLV;    \/\/\/< Generator of paricles impulsion.$/;"	m	class:mpe::Emitter
mGenParSize	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParSize; \/\/\/< Generator of paricles width.$/;"	m	class:mpe::Emitter
mGenParTOL	include/MPE/classes/Emitter.hpp	/^   Generator<Real> mGenParTOL;   \/\/\/< Generator of particles lifetime.$/;"	m	class:mpe::Emitter
mGenerator	include/MPE/classes/Generator.hpp	/^   std::function<T()> mGenerator;$/;"	m	class:mpe::Generator
mGroups	include/MPE/classes/Focus.hpp	/^   GroupID   mGroups;$/;"	m	class:mpe::Focus
mGroups	include/MPE/classes/Particle.hpp	/^   GroupID   mGroups;$/;"	m	class:mpe::Particle
mHeight	include/MPE/classes/Focus.hpp	/^   Real      mHeight;$/;"	m	class:mpe::Focus
mID	include/MPE/classes/Emitter.hpp	/^   EmitterID   mID;            \/\/\/< Unique EmitterID for the emitter.$/;"	m	class:mpe::Emitter
mLifetime	include/MPE/classes/Mortal.hpp	/^   Real mLifetime;$/;"	m	class:mpe::Mortal
mLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2      mLinearVelocity;$/;"	m	class:mpe::Particle
mMaxSize	include/MPE/classes/ParticleContainer.hpp	/^      size_t mMaxSize;$/;"	m	class:mpe::ParticleContainer
mPPS	include/MPE/classes/Focus.hpp	/^   Real      mPPS;$/;"	m	class:mpe::Focus
mParticles	include/MPE/classes/ParticleContainer.hpp	/^      Particle*  mParticles;$/;"	m	class:mpe::ParticleContainer
mParticles	include/MPE/classes/System.hpp	/^   ParticleContainer             mParticles;$/;"	m	class:mpe::System
mPosition	include/MPE/classes/Focus.hpp	/^   Vec2      mPosition;$/;"	m	class:mpe::Focus
mPosition	include/MPE/classes/Particle.hpp	/^   Vec2      mPosition;$/;"	m	class:mpe::Particle
mRect	include/MPE/classes/Emitter.hpp	/^   TextRect    mRect;$/;"	m	class:mpe::Emitter
mShape	include/MPE/classes/Emitter.hpp	/^   Shape       mShape;         \/\/\/< The emitter's shape.$/;"	m	class:mpe::Emitter
mSize	include/MPE/classes/Particle.hpp	/^   Real      mSize;$/;"	m	class:mpe::Particle
mSize	include/MPE/classes/ParticleContainer.hpp	/^      size_t mSize;$/;"	m	class:mpe::ParticleContainer
mSystem	include/MPE/classes/Emitter.hpp	/^   System*     mSystem;$/;"	m	class:mpe::Emitter
mTP	include/MPE/classes/Focus.hpp	/^   Integer   mTP;  $/;"	m	class:mpe::Focus
mTextRect	include/MPE/classes/Particle.hpp	/^   TextRect  mTextRect;$/;"	m	class:mpe::Particle
mTimeAcum	include/MPE/classes/Focus.hpp	/^   Real      mTimeAcum;$/;"	m	class:mpe::Focus
mWidth	include/MPE/classes/Focus.hpp	/^   Real      mWidth; $/;"	m	class:mpe::Focus
mXFactor	include/MPE/classes/System.hpp	/^   Real mXFactor;$/;"	m	class:mpe::System
mYFactor	include/MPE/classes/System.hpp	/^   Real mYFactor;$/;"	m	class:mpe::System
main	tests/tests.cpp	/^int main(void)$/;"	f
mem	ext_libs/include/TinyXML2/tinyxml2.h	/^      char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk
modifyAlpha	src/MPE/classes/Particle.cpp	/^void Particle::modifyAlpha ( int theAlphaInc )$/;"	f	class:mpe::Particle
mpe	include/MPE/Config.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Affector.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Emitter.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Focus.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Generator.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Mortal.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Particle.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/ParticleContainer.hpp	/^namespace mpe $/;"	n
mpe	include/MPE/classes/System.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/classes/Vec2.hpp	/^namespace mpe$/;"	n
mpe	src/MPE/classes/Affector.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/classes/Emitter.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/classes/Focus.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/classes/Generator.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/classes/Mortal.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/classes/Particle.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/classes/ParticleContainer.cpp	/^namespace mpe $/;"	n	file:
mpe	src/MPE/classes/System.cpp	/^namespace mpe$/;"	n	file:
nParticles	src/MPE/classes/Focus.cpp	/^      Integer nParticles = drain(theElapsedTime);$/;"	l
nParticles	src/MPE/classes/Focus.cpp	/^   Integer nParticles = mTimeAcum * mPPS;$/;"	l
newAllocated	ext_libs/include/TinyXML2/tinyxml2.h	/^         int newAllocated = cap * 2;$/;"	l
newMem	ext_libs/include/TinyXML2/tinyxml2.h	/^         T* newMem = new T[newAllocated];$/;"	l
next	ext_libs/include/TinyXML2/tinyxml2.h	/^      Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk
n	ext_libs/include/TinyXML2/tinyxml2.h	/^      int n = 0;$/;"	l
normalize	include/MPE/classes/Vec2.hpp	/^   void normalize()$/;"	f	class:mpe::Vec2
nx	include/MPE/classes/Vec2.hpp	/^      Real nx = x * aCosine - y * aSine;$/;"	l
ny	include/MPE/classes/Vec2.hpp	/^      Real ny = x * aSine + y * aCosine;$/;"	l
operator ()	src/MPE/classes/Generator.cpp	/^T Generator<T>::operator()() const$/;"	f	class:mpe::Generator
operator *=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator*=(const Real& theScalar)$/;"	f	class:mpe::Vec2
operator *	include/MPE/classes/Vec2.hpp	/^   Vec2 operator*(const Real& theScalar) const$/;"	f	class:mpe::Vec2
operator +=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator +=(const Vec2& theVector)$/;"	f	class:mpe::Vec2
operator +	include/MPE/classes/Vec2.hpp	/^   Vec2 operator+(const Vec2& theVector) const$/;"	f	class:mpe::Vec2
operator -=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator -=(const Vec2& theVector)$/;"	f	class:mpe::Vec2
operator -	include/MPE/classes/Vec2.hpp	/^   Vec2 operator-(const Vec2& theVector) const$/;"	f	class:mpe::Vec2
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLConstHandle& operator=( const XMLConstHandle& ref )$/;"	f	class:tinyxml2::XMLConstHandle
operator =	ext_libs/include/TinyXML2/tinyxml2.h	/^   XMLHandle& operator=( const XMLHandle& ref )$/;"	f	class:tinyxml2::XMLHandle
operator []	ext_libs/include/TinyXML2/tinyxml2.h	/^   T& operator[](int i)$/;"	f	class:tinyxml2::DynArray
operator []	ext_libs/include/TinyXML2/tinyxml2.h	/^   const T& operator[](int i) const$/;"	f	class:tinyxml2::DynArray
removeFromAllGroups	src/MPE/classes/Focus.cpp	/^void Focus::removeFromAllGroups()$/;"	f	class:mpe::Focus
removeGroups	src/MPE/classes/Focus.cpp	/^void Focus::removeGroups(GroupID theGroups)$/;"	f	class:mpe::Focus
removeParticle	src/MPE/classes/ParticleContainer.cpp	/^void ParticleContainer::removeParticle(Particle* theParticle)$/;"	f	class:mpe::ParticleContainer
resetLife	include/MPE/classes/Mortal.hpp	/^   inline void resetLife(Real theLifetime)$/;"	f	class:mpe::Mortal
resetNP	src/MPE/classes/Focus.cpp	/^void Focus::resetNP(Real theNP)$/;"	f	class:mpe::Focus
result	ext_libs/include/TinyXML2/tinyxml2.h	/^      void* result = _root;$/;"	l
result	ext_libs/include/TinyXML2/tinyxml2.h	/^   int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );$/;"	l
ret	ext_libs/include/TinyXML2/tinyxml2.h	/^      T* ret = &_mem[_size];$/;"	l
r	include/MPE/Config.hpp	/^   Integer r, g, b, a;$/;"	m	struct:mpe::Color
rotate	include/MPE/classes/Vec2.hpp	/^   Vec2& rotate ( Real theAngle )$/;"	f	class:mpe::Vec2
sRealRandom	include/MPE/classes/Emitter.hpp	/^   static Generator<Real> sRealRandom;$/;"	m	class:mpe::Emitter
scale	include/MPE/classes/Vec2.hpp	/^   Vec2& scale(const Real& theScalarX, const Real& theScalarY)$/;"	f	class:mpe::Vec2
setAngle	src/MPE/classes/Focus.cpp	/^void Focus::setAngle(Real theAngle)$/;"	f	class:mpe::Focus
setAngle	src/MPE/classes/Particle.cpp	/^void Particle::setAngle(Real theAngle)$/;"	f	class:mpe::Particle
setAngularVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setAngularVelocity(Real theAngularVelocity)$/;"	f	class:mpe::Particle
setColor	src/MPE/classes/Particle.cpp	/^void Particle::setColor(Color theColor)$/;"	f	class:mpe::Particle
setDispersion	src/MPE/classes/Emitter.cpp	/^void Emitter::setDispersion(Dispersion theDispersion)$/;"	f	class:mpe::Emitter
setGeneratorFocusHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusHeight(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorFocusNP	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusNP(Integer theMin, Integer theMax)$/;"	f	class:mpe::Emitter
setGeneratorFocusPPS	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusPPS(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorFocusTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusTOL(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorFocusWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorFocusWidth(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorParticleAV	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleAV(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorParticleAngle	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleAngle(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorParticleLV	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleLV(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorParticleSize	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleSize(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGeneratorParticleTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setGeneratorParticleTOL(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setGroups	src/MPE/classes/Particle.cpp	/^void Particle::setGroups(GroupID theGroups)$/;"	f	class:mpe::Particle
setHeight	src/MPE/classes/Focus.cpp	/^void Focus::setHeight(Real theHeight)$/;"	f	class:mpe::Focus
setLinearVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setLinearVelocity(Vec2 theLinearVelocity)$/;"	f	class:mpe::Particle
setPPS	src/MPE/classes/Focus.cpp	/^void Focus::setPPS(Real thePPS)$/;"	f	class:mpe::Focus
setPosition	src/MPE/classes/Focus.cpp	/^void Focus::setPosition(Vec2 thePosition)$/;"	f	class:mpe::Focus
setPosition	src/MPE/classes/Particle.cpp	/^void Particle::setPosition(Vec2 thePosition)$/;"	f	class:mpe::Particle
setShape	src/MPE/classes/Emitter.cpp	/^void Emitter::setShape(Shape theShape)$/;"	f	class:mpe::Emitter
setSize	src/MPE/classes/Particle.cpp	/^void Particle::setSize(Real theSize)$/;"	f	class:mpe::Particle
setSize	src/MPE/classes/ParticleContainer.cpp	/^bool ParticleContainer::setSize(size_t theNumberOfParticles)$/;"	f	class:mpe::ParticleContainer
setSize	src/MPE/classes/System.cpp	/^bool System::setSize(size_t theNumberOfParticles)$/;"	f	class:mpe::System
setSystem	src/MPE/classes/Emitter.cpp	/^void Emitter::setSystem(System* theSystem)$/;"	f	class:mpe::Emitter
setTextRect	src/MPE/classes/Emitter.cpp	/^void Emitter::setTextRect(TextRect theTextRect)$/;"	f	class:mpe::Emitter
setTextRect	src/MPE/classes/Particle.cpp	/^void Particle::setTextRect(TextRect theTextRect)$/;"	f	class:mpe::Particle
setWidth	src/MPE/classes/Focus.cpp	/^void Focus::setWidth(Real theWidth)$/;"	f	class:mpe::Focus
setXFactor	src/MPE/classes/System.cpp	/^void System::setXFactor(Real theXFactor)$/;"	f	class:mpe::System
setYFactor	src/MPE/classes/System.cpp	/^void System::setYFactor(Real theYFactor)$/;"	f	class:mpe::System
size	include/MPE/classes/ParticleContainer.hpp	/^      size_t size(){return mSize;};$/;"	f	class:mpe::ParticleContainer
squareLength	include/MPE/classes/Vec2.hpp	/^   Real squareLength()$/;"	f	class:mpe::Vec2
test1	tests/tests.cpp	/^int test1()$/;"	f
test2	tests/tests.cpp	/^int test2()$/;"	f
test3	tests/tests.cpp	/^int test3()$/;"	f
tinyxml2	ext_libs/include/TinyXML2/tinyxml2.h	/^namespace tinyxml2$/;"	n
updateFocusses	src/MPE/classes/System.cpp	/^void System::updateFocusses(Real theElapsedTime)$/;"	f	class:mpe::System
updateParticles	src/MPE/classes/System.cpp	/^void System::updateParticles(Real theElapsedTime)$/;"	f	class:mpe::System
update	include/MPE/classes/Affector.hpp	/^   virtual void update(Real theElapsedtime)$/;"	f	class:mpe::Affector
update	src/MPE/classes/Focus.cpp	/^void Focus::update(Real theElapsedTime)$/;"	f	class:mpe::Focus
update	src/MPE/classes/Particle.cpp	/^void Particle::update(Real theElapsedTime)$/;"	f	class:mpe::Particle
update	src/MPE/classes/System.cpp	/^void System::update (Real theElapsedTime)$/;"	f	class:mpe::System
va	ext_libs/include/TinyXML2/tinyxml2.h	/^   va_list va;$/;"	l
width	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	m	struct:mpe::TextRect
x	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	m	struct:mpe::TextRect
x	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	m	class:mpe::Vec2
y	include/MPE/Config.hpp	/^   Integer x, y, width, height;$/;"	m	struct:mpe::TextRect
y	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	m	class:mpe::Vec2
~DynArray	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~DynArray()$/;"	f	class:tinyxml2::DynArray
~MemPoolT	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~MemPoolT()$/;"	f	class:tinyxml2::MemPoolT
~MemPool	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool
~ParticleContainer	src/MPE/classes/ParticleContainer.cpp	/^ParticleContainer::~ParticleContainer()$/;"	f	class:mpe::ParticleContainer
~Particle	src/MPE/classes/Particle.cpp	/^Particle::~Particle() {}$/;"	f	class:mpe::Particle
~XMLAttribute	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute
~XMLPrinter	ext_libs/include/TinyXML2/tinyxml2.h	/^   ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter
~XMLText	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText
~XMLVisitor	ext_libs/include/TinyXML2/tinyxml2.h	/^   virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor
