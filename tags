!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANGLE_INC	ext_libs/include/GT/Angle.hpp	7;"	d
Angle	ext_libs/include/GT/Angle.hpp	/^   class Angle$/;"	c	namespace:gt
CIRCLE	include/MPE/Emitter.hpp	/^      enum Shape{RECTANGLE,CIRCLE};$/;"	e	enum:mpe::Emitter::Shape
CONFIG_INC	ext_libs/include/GT/Config.hpp	3;"	d
Dispersion	include/MPE/Emitter.hpp	/^      enum Dispersion{LINEAR,RADIAL,REFLECT,RANDOM,STATIC};$/;"	g	class:mpe::Emitter
EMITTER_INC	include/MPE/Emitter.hpp	9;"	d
Emitter	include/MPE/Emitter.hpp	/^class Emitter$/;"	c	namespace:mpe
Emitter	src/MPE/Emitter.cpp	/^Emitter::Emitter(Emitter::ID theID):$/;"	f	class:mpe::Emitter
FOCUS_INC	include/MPE/Focus.hpp	7;"	d
Focus	include/MPE/Focus.hpp	/^class Focus$/;"	c	namespace:mpe
Focus	src/MPE/Focus.cpp	/^Focus::Focus($/;"	f	class:mpe::Focus
GT_INC	ext_libs/include/GT/GT.hpp	7;"	d
ID	include/MPE/Emitter.hpp	/^      typedef std::string ID;$/;"	t	class:mpe::Emitter
Integer	ext_libs/include/GT/Config.hpp	/^typedef int Integer;$/;"	t
LINEAR	include/MPE/Emitter.hpp	/^      enum Dispersion{LINEAR,RADIAL,REFLECT,RANDOM,STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
PARTICLES_INFINITY	include/MPE/Focus.hpp	/^      const static Integer PARTICLES_INFINITY;$/;"	m	class:mpe::Focus
PARTICLES_INFINITY	include/MPE/Focus.hpp	/^const static Integer PARTICLES_INFINITY = std::numeric_limits<Integer>::max();$/;"	m	namespace:mpe
PARTICLE_INC	include/MPE/Particle.hpp	8;"	d
PI	ext_libs/include/GT/Angle.hpp	/^         const static Real PI;$/;"	m	class:gt::Angle
PI	ext_libs/include/GT/Angle.hpp	/^   const static Real PI = 3.14159265f;$/;"	m	namespace:gt
Particle	include/MPE/Particle.hpp	/^class Particle$/;"	c	namespace:mpe
Particle	src/MPE/Particle.cpp	/^   Particle::Particle$/;"	f	class:mpe::Particle
Ptr	include/MPE/Emitter.hpp	/^      typedef boost::shared_ptr<Emitter> Ptr;$/;"	t	class:mpe::Emitter
RADIAL	include/MPE/Emitter.hpp	/^      enum Dispersion{LINEAR,RADIAL,REFLECT,RANDOM,STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
RANDOMIZER_INC	ext_libs/include/GT/Randomizer.hpp	7;"	d
RANDOM	include/MPE/Emitter.hpp	/^      enum Dispersion{LINEAR,RADIAL,REFLECT,RANDOM,STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
RECTANGLE	include/MPE/Emitter.hpp	/^      enum Shape{RECTANGLE,CIRCLE};$/;"	e	enum:mpe::Emitter::Shape
REFLECT	include/MPE/Emitter.hpp	/^      enum Dispersion{LINEAR,RADIAL,REFLECT,RANDOM,STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
Randomizer	ext_libs/include/GT/Randomizer.hpp	/^class Randomizer$/;"	c	namespace:gt
Real	ext_libs/include/GT/Config.hpp	/^typedef float Real;$/;"	t
STATIC	include/MPE/Emitter.hpp	/^      enum Dispersion{LINEAR,RADIAL,REFLECT,RANDOM,STATIC};$/;"	e	enum:mpe::Emitter::Dispersion
SYSTEM_INC	include/MPE/System.hpp	7;"	d
Shape	include/MPE/Emitter.hpp	/^      enum Shape{RECTANGLE,CIRCLE};$/;"	g	class:mpe::Emitter
System	include/MPE/System.hpp	/^   class System$/;"	c	namespace:mpe
System	src/MPE/System.cpp	/^System::System ( Real theFactor ):$/;"	f	class:mpe::System
TIME_INFINITY	include/MPE/Focus.hpp	/^      const static Real TIME_INFINITY;$/;"	m	class:mpe::Focus
TIME_INFINITY	include/MPE/Focus.hpp	/^const static Real TIME_INFINITY = std::numeric_limits<Real>::max();$/;"	m	namespace:mpe
VEC2D_INC	ext_libs/include/GT/Vec2D.hpp	7;"	d
Vec2D	ext_libs/include/GT/Vec2D.hpp	/^class Vec2D$/;"	c	namespace:gt
age	include/MPE/Focus.hpp	/^inline void Focus::age(Real theElapsedTime)$/;"	f	class:mpe::Focus
anParticle	src/MPE/Focus.cpp	/^   Particle anParticle = Particle($/;"	l
anPosition	src/MPE/Emitter.cpp	/^   gt::Vec2D anPosition;$/;"	l
anPosition	src/MPE/Focus.cpp	/^   gt::Vec2D anPosition = mEmitter->generateParticlePosition(*this);$/;"	l
anResult	src/MPE/System.cpp	/^   Emitter::Ptr anResult;$/;"	l
anVelocity	src/MPE/Emitter.cpp	/^   gt::Vec2D anVelocity;$/;"	l
anVelocity	src/MPE/Focus.cpp	/^   gt::Vec2D anVelocity = mEmitter->generateParticleVelocity(*this,anPosition);$/;"	l
createFocus	src/MPE/Emitter.cpp	/^Focus Emitter::createFocus(System&   theSystem,$/;"	f	class:mpe::Emitter
createParticle	src/MPE/Focus.cpp	/^Particle Focus::createParticle ()$/;"	f	class:mpe::Focus
create	src/MPE/Emitter.cpp	/^Emitter::Ptr Emitter::create(Emitter::ID theID)$/;"	f	class:mpe::Emitter
drain	include/MPE/Focus.hpp	/^inline Integer Focus::drain(Real theElapsedTime)$/;"	f	class:mpe::Focus
emit	src/MPE/Focus.cpp	/^void Focus::emit ()$/;"	f	class:mpe::Focus
generatePosition	src/MPE/Emitter.cpp	/^gt::Vec2D Emitter::generatePosition(const Focus& theFocus) const$/;"	f	class:mpe::Emitter
generateVelocity	src/MPE/Emitter.cpp	/^gt::Vec2D Emitter::generateVelocity(const Focus& theFocus, $/;"	f	class:mpe::Emitter
getAngle	include/MPE/Focus.hpp	/^inline gt::Angle Focus::getAngle() const $/;"	f	class:mpe::Focus
getCos	ext_libs/include/GT/Angle.hpp	/^         inline Real getCos ( ) const {return mCos;};$/;"	f	class:gt::Angle
getEmitter	src/MPE/System.cpp	/^Emitter::Ptr System::getEmitter ( Emitter::ID theEmitterID ) const$/;"	f	class:mpe::System
getFocusHeight	include/MPE/Emitter.hpp	/^inline Real Emitter::getFocusHeight() const $/;"	f	class:mpe::Emitter
getFocusNP	include/MPE/Emitter.hpp	/^inline Integer Emitter::getFocusNP() const $/;"	f	class:mpe::Emitter
getFocusPPS	include/MPE/Emitter.hpp	/^inline Real Emitter::getFocusPPS() const $/;"	f	class:mpe::Emitter
getFocusTOL	include/MPE/Emitter.hpp	/^inline Real Emitter::getFocusTOL() const $/;"	f	class:mpe::Emitter
getFocusWidth	include/MPE/Emitter.hpp	/^inline Real Emitter::getFocusWidth() const $/;"	f	class:mpe::Emitter
getHeight	include/MPE/Focus.hpp	/^inline Real Focus::getHeight() const $/;"	f	class:mpe::Focus
getID	include/MPE/Emitter.hpp	/^inline Emitter::ID Emitter::getID() const$/;"	f	class:mpe::Emitter
getParticlePOW	include/MPE/Emitter.hpp	/^inline Real Emitter::getParticlePOW() const $/;"	f	class:mpe::Emitter
getParticleTOL	include/MPE/Emitter.hpp	/^inline Real Emitter::getParticleTOL() const $/;"	f	class:mpe::Emitter
getPosition	include/MPE/Focus.hpp	/^inline gt::Vec2D Focus::getPosition() const $/;"	f	class:mpe::Focus
getSin	ext_libs/include/GT/Angle.hpp	/^         inline Real getSin ( ) const {return mSin;};$/;"	f	class:gt::Angle
getTexture	include/MPE/Emitter.hpp	/^inline sf::Texture Emitter::getTexture() const$/;"	f	class:mpe::Emitter
getValue	ext_libs/include/GT/Angle.hpp	/^         inline Real getValue ( ) const {return mValue;};$/;"	f	class:gt::Angle
getWidth	include/MPE/Focus.hpp	/^inline Real Focus::getWidth() const $/;"	f	class:mpe::Focus
gt	ext_libs/include/GT/Angle.hpp	/^namespace gt$/;"	n
gt	ext_libs/include/GT/Randomizer.hpp	/^namespace gt$/;"	n
gt	ext_libs/include/GT/Vec2D.hpp	/^namespace gt$/;"	n
isAlive	include/MPE/Focus.hpp	/^inline bool Focus::isAlive() const $/;"	f	class:mpe::Focus
isAlive	include/MPE/Particle.hpp	/^inline bool Particle::isAlive()$/;"	f	class:mpe::Particle
it	src/MPE/System.cpp	/^   auto it = mEmitters.find(theEmitterID);$/;"	l
kill	include/MPE/Focus.hpp	/^inline void Focus::kill()$/;"	f	class:mpe::Focus
mAlive	include/MPE/Focus.hpp	/^      bool      mAlive;   \/\/\/< Life state.$/;"	m	class:mpe::Focus
mAlive	include/MPE/Particle.hpp	/^      bool        mAlive;$/;"	m	class:mpe::Particle
mAngle	include/MPE/Focus.hpp	/^      gt::Angle mAngle;   \/\/\/< Angle.$/;"	m	class:mpe::Focus
mAngularVelocity	include/MPE/Particle.hpp	/^      Real        mAngularVelocity;$/;"	m	class:mpe::Particle
mCos	ext_libs/include/GT/Angle.hpp	/^         Real mCos;$/;"	m	class:gt::Angle
mDispersion	include/MPE/Emitter.hpp	/^      Dispersion  mDispersion;       \/\/\/< Type of paricles' dispersion.$/;"	m	class:mpe::Emitter
mEP	include/MPE/Focus.hpp	/^      Integer   mEP;      \/\/\/< Particles already emitted by the focus.$/;"	m	class:mpe::Focus
mET	include/MPE/Focus.hpp	/^      Real      mET;      \/\/\/< Elapsed time.$/;"	m	class:mpe::Focus
mEmitter	include/MPE/Focus.hpp	/^      Emitter::Ptr mEmitter;\/\/\/< The emitter server for the focus.$/;"	m	class:mpe::Focus
mEmitters	include/MPE/System.hpp	/^         std::map<Emitter::ID,Emitter::Ptr> mEmitters;$/;"	m	class:mpe::System
mFocusses	include/MPE/System.hpp	/^         std::list<Focus>                   mFocusses;$/;"	m	class:mpe::System
mHeight	include/MPE/Focus.hpp	/^      Real      mHeight;  \/\/\/< Height.$/;"	m	class:mpe::Focus
mID	include/MPE/Emitter.hpp	/^      ID          mID;               \/\/\/< Unique ID for the emitter.$/;"	m	class:mpe::Emitter
mLinearVelocity	include/MPE/Particle.hpp	/^      gt::Vec2D   mLinearVelocity;$/;"	m	class:mpe::Particle
mMax	ext_libs/include/GT/Randomizer.hpp	/^      Real mMax;$/;"	m	class:gt::Randomizer
mMin	ext_libs/include/GT/Randomizer.hpp	/^      Real mMin;$/;"	m	class:gt::Randomizer
mPPS	include/MPE/Focus.hpp	/^      Real      mPPS;$/;"	m	class:mpe::Focus
mParticles	include/MPE/Focus.hpp	/^      std::list<Particle> mParticles;$/;"	m	class:mpe::Focus
mParticles	include/MPE/System.hpp	/^         std::list<Particle>                mParticles;$/;"	m	class:mpe::System
mPosition	include/MPE/Focus.hpp	/^      gt::Vec2D mPosition;\/\/\/< Position.$/;"	m	class:mpe::Focus
mRangeFocusHeight	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeFocusHeight; \/\/\/< Range of focus height.$/;"	m	class:mpe::Emitter
mRangeFocusNP	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeFocusNP;     \/\/\/< Range of focus number of particles.$/;"	m	class:mpe::Emitter
mRangeFocusPPS	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeFocusPPS;    \/\/\/< Range of focus particles per second.$/;"	m	class:mpe::Emitter
mRangeFocusTOL	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeFocusTOL;    \/\/\/< Range of focus time of life.$/;"	m	class:mpe::Emitter
mRangeFocusWidth	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeFocusWidth;  \/\/\/< Range of focus width.$/;"	m	class:mpe::Emitter
mRangeParticlePOW	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeParticlePOW; \/\/\/< Range of paricles impulsion.$/;"	m	class:mpe::Emitter
mRangeParticleTOL	include/MPE/Emitter.hpp	/^      gt::Randomizer  mRangeParticleTOL; \/\/\/< Range of particles lifetime.$/;"	m	class:mpe::Emitter
mShape	include/MPE/Emitter.hpp	/^      Shape       mShape;            \/\/\/< The emitter's shape.$/;"	m	class:mpe::Emitter
mSin	ext_libs/include/GT/Angle.hpp	/^         Real mSin;$/;"	m	class:gt::Angle
mSprite	include/MPE/Particle.hpp	/^      sf::Sprite  mSprite;$/;"	m	class:mpe::Particle
mSystem	include/MPE/Focus.hpp	/^      System&   mSystem;$/;"	m	class:mpe::Focus
mTOL	include/MPE/Particle.hpp	/^      Real        mTOL;$/;"	m	class:mpe::Particle
mTP	include/MPE/Focus.hpp	/^      Integer   mTP;      \/\/\/< Total number of Particles. -1 = no number limits$/;"	m	class:mpe::Focus
mTT	include/MPE/Focus.hpp	/^      Real      mTT;      \/\/\/< Time the focus will live. -1 = no time limits$/;"	m	class:mpe::Focus
mTexture	include/MPE/Emitter.hpp	/^      sf::Texture mTexture;          \/\/\/< The texture to make an Sprite.$/;"	m	class:mpe::Emitter
mValue	ext_libs/include/GT/Angle.hpp	/^         Real mValue;$/;"	m	class:gt::Angle
mWidth	include/MPE/Focus.hpp	/^      Real      mWidth;   \/\/\/< Width.$/;"	m	class:mpe::Focus
mXFactor	include/MPE/System.hpp	/^         Real mXFactor;$/;"	m	class:mpe::System
mYFactor	include/MPE/System.hpp	/^         Real mYFactor;$/;"	m	class:mpe::System
mpe	include/MPE/Emitter.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/Focus.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/Particle.hpp	/^namespace mpe$/;"	n
mpe	include/MPE/System.hpp	/^namespace mpe$/;"	n
mpe	src/MPE/Emitter.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/Focus.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/Particle.cpp	/^namespace mpe$/;"	n	file:
mpe	src/MPE/System.cpp	/^namespace mpe$/;"	n	file:
nParticles	include/MPE/Focus.hpp	/^   Integer nParticles = 0;$/;"	l
nParticles	src/MPE/Focus.cpp	/^   Integer nParticles = drain(theElapsedTime);$/;"	l
setAngle	include/MPE/Focus.hpp	/^inline void Focus::setAngle(gt::Angle theAngle)$/;"	f	class:mpe::Focus
setDispersion	include/MPE/Emitter.hpp	/^inline void Emitter::setDispersion(Dispersion theDispersion) $/;"	f	class:mpe::Emitter
setHeight	include/MPE/Focus.hpp	/^inline void Focus::setHeight(Real theHeight)$/;"	f	class:mpe::Focus
setPosition	include/MPE/Focus.hpp	/^inline void Focus::setPosition(gt::Vec2D thePosition)$/;"	f	class:mpe::Focus
setRangeFocusNP	include/MPE/Emitter.hpp	/^inline void Emitter::setRangeFocusNP(Real theMin,Real theMax)$/;"	f	class:mpe::Emitter
setRangeFocusPPS	include/MPE/Emitter.hpp	/^inline void Emitter::setRangeFocusPPS(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setRangeFocusPPS	include/MPE/Emitter.hpp	/^inline void setRangeFocusPPS(Real theMin,Real theMax)$/;"	f	namespace:mpe
setRangeFocusTOL	include/MPE/Emitter.hpp	/^inline void Emitter::setRangeFocusTOL(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setRangeParticlePOW	include/MPE/Emitter.hpp	/^inline void Emitter::setRangeParticlePOW(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setRangeParticleTOL	include/MPE/Emitter.hpp	/^inline void Emitter::setRangeParticleTOL(Real theMin, Real theMax)$/;"	f	class:mpe::Emitter
setShape	include/MPE/Emitter.hpp	/^inline void Emitter::setShape(Shape theShape)$/;"	f	class:mpe::Emitter
setTexture	include/MPE/Emitter.hpp	/^inline void Emitter::setTexture(std::string theFilename)$/;"	f	class:mpe::Emitter
setWidth	include/MPE/Focus.hpp	/^inline void Focus::setWidth(Real theWidth)$/;"	f	class:mpe::Focus
set	ext_libs/include/GT/Angle.hpp	/^         inline void set(Real theValue)$/;"	f	class:gt::Angle
thePosition	src/MPE/Emitter.cpp	/^                 thePosition,$/;"	l
theSystem	src/MPE/Emitter.cpp	/^                 theSystem,$/;"	l
toDegrees	ext_libs/include/GT/Angle.hpp	/^         static inline Real toDegrees(float theRadians)$/;"	f	class:gt::Angle
toRadians	ext_libs/include/GT/Angle.hpp	/^         static inline Real toRadians(float theDegrees)$/;"	f	class:gt::Angle
updateFocusses	src/MPE/System.cpp	/^void System::updateFocusses(Real theElapsedTime)$/;"	f	class:mpe::System
updateParticles	src/MPE/System.cpp	/^void System::updateParticles(Real theElapsedTime)$/;"	f	class:mpe::System
update	src/MPE/Focus.cpp	/^void Focus::update(Real theElapsedTime)$/;"	f	class:mpe::Focus
update	src/MPE/Particle.cpp	/^   void Particle::update(Real theElapsedTime)$/;"	f	class:mpe::Particle
update	src/MPE/System.cpp	/^void System::update (Real theElapsedTime)$/;"	f	class:mpe::System
x	ext_libs/include/GT/Vec2D.hpp	/^      Real x;$/;"	m	class:gt::Vec2D
y	ext_libs/include/GT/Vec2D.hpp	/^      Real y;$/;"	m	class:gt::Vec2D
~Particle	src/MPE/Particle.cpp	/^   Particle::~Particle(){};$/;"	f	class:mpe::Particle
