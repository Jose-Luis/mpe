!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AFFECTOR_INC	include/MPE/classes/Affector.hpp	7;"	kind:d
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	298;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	301;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	304;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	307;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	310;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	313;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	316;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	320;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	kind:d	file:
ARCHITECTURE_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	313;"	kind:d	file:
Affector	include/MPE/classes/Affector.hpp	/^   Affector(Real      theLifetime);$/;"	kind:p	class:mpe::Affector	access:protected	signature:(Real theLifetime)
Affector	include/MPE/classes/Affector.hpp	/^class Affector: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
Affector	src/MPE/classes/Affector.cpp	/^Affector::Affector(Real theLifetime):$/;"	kind:f	class:mpe::Affector	signature:(Real theLifetime)
AffectorPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Affector> AffectorPtr;$/;"	kind:t	namespace:mpe
CIRCLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	107;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	112;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	119;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	122;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	125;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	133;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	13;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	152;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	160;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	165;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	170;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	177;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	194;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	197;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	200;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	24;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	32;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	38;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	44;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	50;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	56;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	70;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	77;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	85;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	88;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	90;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	99;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	135;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	154;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	162;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	61;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	82;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	kind:d	file:
COMPILER_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	100;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	108;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	114;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	126;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	135;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	154;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	15;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	172;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	180;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	185;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	25;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	33;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	39;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	46;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	52;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	59;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	64;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	72;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	79;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	93;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	14;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	156;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	173;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	20;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	69;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	kind:d	file:
COMPILER_VERSION_MAJOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	101;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	109;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	115;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	127;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	136;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	155;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	16;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	173;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	181;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	186;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	26;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	34;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	40;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	47;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	53;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	60;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	65;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	73;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	80;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	94;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	114;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	31;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	39;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	kind:d	file:
COMPILER_VERSION_MINOR	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	103;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	116;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	129;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	140;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	143;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	156;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	174;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	17;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	182;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	187;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	28;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	35;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	41;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	61;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	66;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	74;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	81;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	95;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	121;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	kind:d	file:
COMPILER_VERSION_PATCH	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	86;"	kind:d	file:
COMPILER_VERSION_TWEAK	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	147;"	kind:d	file:
COMPILER_VERSION_TWEAK	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	20;"	kind:d	file:
COMPILER_VERSION_TWEAK	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	kind:d	file:
COMPILER_VERSION_TWEAK	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	kind:d	file:
CONFIG_MPE_INC	include/MPE/Config.hpp	8;"	kind:d
Color	include/MPE/Config.hpp	/^struct Color$/;"	kind:s	namespace:mpe
DEC	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	324;"	kind:d	file:
DEC	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	317;"	kind:d	file:
DUMMY	include/MPE/classes/Emitter.hpp	/^   static Emitter DUMMY;$/;"	kind:m	class:mpe::Emitter	access:public
DUMMY	src/MPE/classes/Emitter.cpp	/^Emitter Emitter::DUMMY = Emitter("DUMMY");$/;"	kind:m	class:mpe::Emitter	file:
Dispersion	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:g	class:mpe::Emitter	access:public
EMITTER_INC	include/MPE/classes/Emitter.hpp	9;"	kind:d
Emitter	include/MPE/classes/Emitter.hpp	/^   Emitter(EmitterID theID);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(EmitterID theID)
Emitter	include/MPE/classes/Emitter.hpp	/^class Emitter$/;"	kind:c	namespace:mpe
Emitter	src/MPE/classes/Emitter.cpp	/^Emitter::Emitter(EmitterID theID):$/;"	kind:f	class:mpe::Emitter	signature:(EmitterID theID)
EmitterID	include/MPE/Config.hpp	/^typedef std::string EmitterID;$/;"	kind:t	namespace:mpe
FOCUS_INC	include/MPE/classes/Focus.hpp	7;"	kind:d
Focus	include/MPE/classes/Focus.hpp	/^   Focus(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
Focus	include/MPE/classes/Focus.hpp	/^class Focus: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
Focus	src/MPE/classes/Focus.cpp	/^Focus::Focus(Real           theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
FocusPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Focus> FocusPtr;$/;"	kind:t	namespace:mpe
GROUP_A	include/MPE/Config.hpp	/^const GroupID GROUP_A = 0x01;$/;"	kind:m	namespace:mpe
GROUP_B	include/MPE/Config.hpp	/^const GroupID GROUP_B = 0x02;$/;"	kind:m	namespace:mpe
GROUP_C	include/MPE/Config.hpp	/^const GroupID GROUP_C = 0x04;$/;"	kind:m	namespace:mpe
GROUP_D	include/MPE/Config.hpp	/^const GroupID GROUP_D = 0x08;$/;"	kind:m	namespace:mpe
GROUP_E	include/MPE/Config.hpp	/^const GroupID GROUP_E = 0x10;$/;"	kind:m	namespace:mpe
GROUP_F	include/MPE/Config.hpp	/^const GroupID GROUP_F = 0x20;$/;"	kind:m	namespace:mpe
GROUP_G	include/MPE/Config.hpp	/^const GroupID GROUP_G = 0x40;$/;"	kind:m	namespace:mpe
GROUP_H	include/MPE/Config.hpp	/^const GroupID GROUP_H = 0x80;$/;"	kind:m	namespace:mpe
GroupID	include/MPE/Config.hpp	/^typedef unsigned char GroupID;$/;"	kind:t	namespace:mpe
HEX	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	335;"	kind:d	file:
HEX	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	kind:d	file:
ID_VOID_MAIN	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	9;"	kind:d	file:
Integer	include/MPE/Config.hpp	/^typedef int Integer;$/;"	kind:t	namespace:mpe
LINEAR	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
MAX_INTEGER	include/MPE/Config.hpp	/^const Integer MAX_INTEGER = std::numeric_limits<Integer>::max();$/;"	kind:m	namespace:mpe
MORTAL_INC	include/MPE/classes/Mortal.hpp	8;"	kind:d
MPE_INC	include/MPE/MPE.hpp	7;"	kind:d
Mortal	include/MPE/classes/Mortal.hpp	/^   Mortal(Real theLifetime);$/;"	kind:p	class:mpe::Mortal	access:protected	signature:(Real theLifetime)
Mortal	include/MPE/classes/Mortal.hpp	/^class Mortal$/;"	kind:c	namespace:mpe
Mortal	src/MPE/classes/Mortal.cpp	/^Mortal::Mortal(Real theLifetime):$/;"	kind:f	class:mpe::Mortal	signature:(Real theLifetime)
NO_GROUP	include/MPE/Config.hpp	/^const GroupID NO_GROUP = 0x00;$/;"	kind:m	namespace:mpe
PARTICLE_INC	include/MPE/classes/Particle.hpp	8;"	kind:d
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	212;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	215;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	218;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	221;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	224;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	227;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	230;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	233;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	236;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	239;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	242;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	245;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	248;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	251;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	254;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	257;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	260;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	263;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	266;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	269;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	272;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	275;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	278;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	281;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	284;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	287;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	256;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	259;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	262;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	268;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	271;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	kind:d	file:
PLATFORM_ID	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	kind:d	file:
Particle	include/MPE/classes/Particle.hpp	/^   Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
Particle	include/MPE/classes/Particle.hpp	/^   Particle(Real    theTLL,$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theTLL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor = Color{255, 255, 255, 255}, GroupID theGroups = mpe::NO_GROUP)
Particle	include/MPE/classes/Particle.hpp	/^class Particle: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle():$/;"	kind:f	class:mpe::Particle	signature:()
Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle(Real     theTTL,$/;"	kind:f	class:mpe::Particle	signature:(Real theTTL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor, GroupID theGroups)
RADIAL	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
RANDOM	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
RANDOMIZER_TL9DCTRC	include/MPE/classes/Randomizer.hpp	2;"	kind:d
REAL_INFINITY	include/MPE/Config.hpp	/^const Real REAL_INFINITY = std::numeric_limits<Real>::infinity();$/;"	kind:m	namespace:mpe
RECTANGLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
REFLECT	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
Randomizer	include/MPE/classes/Randomizer.hpp	/^   Randomizer();$/;"	kind:p	class:mpe::Randomizer	access:public	signature:()
Randomizer	include/MPE/classes/Randomizer.hpp	/^   Randomizer(T min, T max);$/;"	kind:p	class:mpe::Randomizer	access:public	signature:(T min, T max)
Randomizer	include/MPE/classes/Randomizer.hpp	/^class Randomizer$/;"	kind:c	namespace:mpe
Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Integer>::Randomizer():$/;"	kind:f	class:mpe::Randomizer	signature:()
Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Integer>::Randomizer(Integer theMin, Integer theMax):$/;"	kind:f	class:mpe::Randomizer	signature:(Integer theMin, Integer theMax)
Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Real>::Randomizer():$/;"	kind:f	class:mpe::Randomizer	signature:()
Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Real>::Randomizer(Real theMin, Real theMax):$/;"	kind:f	class:mpe::Randomizer	signature:(Real theMin, Real theMax)
Real	include/MPE/Config.hpp	/^typedef float Real;$/;"	kind:t	namespace:mpe
STATIC	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
SYSTEM_INC	include/MPE/classes/System.hpp	7;"	kind:d
Shape	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:g	class:mpe::Emitter	access:public
System	include/MPE/classes/System.hpp	/^   System();$/;"	kind:p	class:mpe::System	access:public	signature:()
System	include/MPE/classes/System.hpp	/^class System$/;"	kind:c	namespace:mpe
System	src/MPE/classes/System.cpp	/^System::System ():$/;"	kind:f	class:mpe::System	signature:()
TextRect	include/MPE/Config.hpp	/^struct TextRect$/;"	kind:s	namespace:mpe
VEC2_GSAIH2DS	include/MPE/classes/Vec2.hpp	7;"	kind:d
Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(): x(0), y(0) {}$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(Real theX, Real theY):$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
Vec2	include/MPE/classes/Vec2.hpp	/^class Vec2$/;"	kind:c	namespace:mpe
a	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
aCosine	include/MPE/classes/Vec2.hpp	/^   Real aCosine = std::cos(theAngle);$/;"	kind:l
aSine	include/MPE/classes/Vec2.hpp	/^   Real aSine = std::sin(theAngle);$/;"	kind:l
addAffector	include/MPE/classes/System.hpp	/^   void     addAffector(AffectorPtr theAffector);$/;"	kind:p	class:mpe::System	access:public	signature:(AffectorPtr theAffector)
addAffector	src/MPE/classes/System.cpp	/^void System::addAffector(AffectorPtr theAffector)$/;"	kind:f	class:mpe::System	signature:(AffectorPtr theAffector)
addEmitter	include/MPE/classes/System.hpp	/^   void     addEmitter(Emitter& theEmitter);$/;"	kind:p	class:mpe::System	access:public	signature:(Emitter& theEmitter)
addEmitter	src/MPE/classes/System.cpp	/^void System::addEmitter(Emitter& theEmitter)$/;"	kind:f	class:mpe::System	signature:(Emitter& theEmitter)
addFocus	include/MPE/classes/System.hpp	/^   void     addFocus(FocusPtr theFocus);$/;"	kind:p	class:mpe::System	access:public	signature:(FocusPtr theFocus)
addFocus	src/MPE/classes/System.cpp	/^void System::addFocus(FocusPtr theFocus)$/;"	kind:f	class:mpe::System	signature:(FocusPtr theFocus)
addParticle	include/MPE/classes/System.hpp	/^   void     addParticle(Particle& theParticle);$/;"	kind:p	class:mpe::System	access:public	signature:(Particle& theParticle)
addParticle	src/MPE/classes/Focus.cpp	/^      anSystem->addParticle(anParticle);$/;"	kind:p	file:	signature:(anParticle)
addParticle	src/MPE/classes/System.cpp	/^void System::addParticle (Particle& theParticle)$/;"	kind:f	class:mpe::System	signature:(Particle& theParticle)
affect	include/MPE/classes/Affector.hpp	/^   virtual void affect(Particle& theParticle, Real theElapsedTime) = 0;$/;"	kind:p	class:mpe::Affector	access:public	signature:(Particle& theParticle, Real theElapsedTime)
age	include/MPE/classes/Mortal.hpp	/^   inline void age(Real theElapsedTime)$/;"	kind:f	class:mpe::Mortal	access:protected	signature:(Real theElapsedTime)
anEmitterID	src/MPE/classes/System.cpp	/^   EmitterID anEmitterID = theEmitter.getID();$/;"	kind:l
anFocus	src/MPE/classes/Emitter.cpp	/^   FocusPtr anFocus = Focus::create(getFocusWidth(),$/;"	kind:l
anLength	include/MPE/classes/Vec2.hpp	/^      Real anLength = length();$/;"	kind:l
anParticle	src/MPE/classes/Focus.cpp	/^      Particle anParticle = createParticle();$/;"	kind:l
anParticle	src/MPE/classes/Focus.cpp	/^   Particle  anParticle = Particle( mEmitter.getParticleTOL(),$/;"	kind:l
anPosition	src/MPE/classes/Emitter.cpp	/^   Vec2 anPosition;$/;"	kind:l
anPosition	src/MPE/classes/Focus.cpp	/^   Vec2 anPosition = mEmitter.generatePosition(*this);$/;"	kind:l
anSystem	src/MPE/classes/Focus.cpp	/^   System* anSystem = mEmitter.getSystem();$/;"	kind:l
anVelocity	src/MPE/classes/Emitter.cpp	/^   Vec2 anVelocity;$/;"	kind:l
b	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
belongToGroup	include/MPE/classes/Particle.hpp	/^   bool belongToGroup(const GroupID theGroups) const;$/;"	kind:p	class:mpe::Particle	access:public	signature:(const GroupID theGroups) const
belongToGroup	src/MPE/classes/Particle.cpp	/^bool Particle::belongToGroup(const GroupID theGroups) const$/;"	kind:f	class:mpe::Particle	signature:(const GroupID theGroups) const
create	include/MPE/classes/Focus.hpp	/^   static FocusPtr create(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
create	src/MPE/classes/Focus.cpp	/^FocusPtr Focus::create(Real    theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
createFocus	include/MPE/classes/Emitter.hpp	/^   FocusPtr createFocus(Vec2 thePosition,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP) const
createFocus	include/MPE/classes/System.hpp	/^   FocusPtr   createFocus(EmitterID theEmitter,$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitter, Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP)
createFocus	src/MPE/classes/Emitter.cpp	/^FocusPtr Emitter::createFocus(Vec2   thePosition,$/;"	kind:f	class:mpe::Emitter	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups) const
createFocus	src/MPE/classes/System.cpp	/^FocusPtr System::createFocus(EmitterID theEmitterID,$/;"	kind:f	class:mpe::System	signature:(EmitterID theEmitterID, Vec2 thePosition, Real theAngle, GroupID theGroups)
createParticle	include/MPE/classes/Focus.hpp	/^   Particle createParticle();$/;"	kind:p	class:mpe::Focus	access:private	signature:()
createParticle	src/MPE/classes/Focus.cpp	/^Particle Focus::createParticle ()$/;"	kind:f	class:mpe::Focus	signature:()
die	include/MPE/classes/Mortal.hpp	/^   inline void die()$/;"	kind:f	class:mpe::Mortal	access:private	signature:()
drain	include/MPE/classes/Focus.hpp	/^   Integer drain(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theElapsedTime)
drain	src/MPE/classes/Focus.cpp	/^Integer Focus::drain(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
emit	include/MPE/classes/Focus.hpp	/^   void emit(Integer theNParticles);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Integer theNParticles)
emit	src/MPE/classes/Focus.cpp	/^void Focus::emit(Integer theNParticles)$/;"	kind:f	class:mpe::Focus	signature:(Integer theNParticles)
g	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
generatePosition	include/MPE/classes/Emitter.hpp	/^   Vec2 generatePosition(const Focus& theFocus) const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus) const
generatePosition	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generatePosition(const Focus& theFocus) const$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus) const
generateVelocity	include/MPE/classes/Emitter.hpp	/^   Vec2 generateVelocity(const Focus& theFocus,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
generateVelocity	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generateVelocity(const Focus& theFocus,$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
getAge	include/MPE/classes/Mortal.hpp	/^   inline Real getAge() const$/;"	kind:f	class:mpe::Mortal	access:public	signature:() const
getAngle	include/MPE/classes/Focus.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getAngle	include/MPE/classes/Particle.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getAngle	src/MPE/classes/Focus.cpp	/^Real Focus::getAngle() const$/;"	kind:f	class:mpe::Focus	signature:() const
getAngle	src/MPE/classes/Particle.cpp	/^Real Particle::getAngle() const$/;"	kind:f	class:mpe::Particle	signature:() const
getAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real getAngularVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getAngularVelocity	src/MPE/classes/Particle.cpp	/^Real Particle::getAngularVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
getColor	include/MPE/classes/Particle.hpp	/^   Color getColor() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getColor	src/MPE/classes/Particle.cpp	/^Color Particle::getColor() const$/;"	kind:f	class:mpe::Particle	signature:() const
getEmitter	include/MPE/classes/System.hpp	/^   Emitter& getEmitter(EmitterID theEmitterID);$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitterID)
getEmitter	src/MPE/classes/System.cpp	/^Emitter& System::getEmitter ( EmitterID theEmitterID )$/;"	kind:f	class:mpe::System	signature:( EmitterID theEmitterID )
getFocusHeight	include/MPE/classes/Emitter.hpp	/^   Real getFocusHeight() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusHeight() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusNP	include/MPE/classes/Emitter.hpp	/^   Integer getFocusNP() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusNP	src/MPE/classes/Emitter.cpp	/^Integer Emitter::getFocusNP() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusPPS	include/MPE/classes/Emitter.hpp	/^   Real getFocusPPS() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusPPS	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusPPS() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusTOL	include/MPE/classes/Emitter.hpp	/^   Real getFocusTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getFocusWidth	include/MPE/classes/Emitter.hpp	/^   Real getFocusWidth() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getFocusWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusWidth() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getHeight	include/MPE/classes/Focus.hpp	/^   Real getHeight() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getHeight	include/MPE/classes/Particle.hpp	/^   Real getHeight() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getHeight	src/MPE/classes/Focus.cpp	/^Real Focus::getHeight() const$/;"	kind:f	class:mpe::Focus	signature:() const
getHeight	src/MPE/classes/Particle.cpp	/^Real Particle::getHeight() const$/;"	kind:f	class:mpe::Particle	signature:() const
getID	include/MPE/classes/Emitter.hpp	/^   EmitterID getID() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getID	src/MPE/classes/Emitter.cpp	/^EmitterID Emitter::getID() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2 getLinearVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getLinearVelocity	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getLinearVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
getPPS	include/MPE/classes/Focus.hpp	/^   Real getPPS();$/;"	kind:p	class:mpe::Focus	access:public	signature:()
getPPS	src/MPE/classes/Focus.cpp	/^Real Focus::getPPS ()$/;"	kind:f	class:mpe::Focus	signature:()
getParticleAV	include/MPE/classes/Emitter.hpp	/^   Real getParticleAV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleAV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleAngle	include/MPE/classes/Emitter.hpp	/^   Real getParticleAngle() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleAngle	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAngle() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleHeight	include/MPE/classes/Emitter.hpp	/^   Real getParticleHeight() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleHeight() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleLV	include/MPE/classes/Emitter.hpp	/^   Real getParticleLV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleLV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleLV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleTOL	include/MPE/classes/Emitter.hpp	/^   Real getParticleTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getParticleWidth	include/MPE/classes/Emitter.hpp	/^   Real getParticleWidth() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getParticleWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleWidth() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getPosition	include/MPE/classes/Focus.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getPosition	include/MPE/classes/Particle.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getPosition	src/MPE/classes/Focus.cpp	/^Vec2 Focus::getPosition() const$/;"	kind:f	class:mpe::Focus	signature:() const
getPosition	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getPosition() const$/;"	kind:f	class:mpe::Particle	signature:() const
getSystem	include/MPE/classes/Emitter.hpp	/^   System* getSystem() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getSystem	src/MPE/classes/Emitter.cpp	/^System* Emitter::getSystem() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getTextRect	include/MPE/classes/Emitter.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
getTextRect	include/MPE/classes/Particle.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getTextRect	src/MPE/classes/Emitter.cpp	/^TextRect Emitter::getTextRect() const$/;"	kind:f	class:mpe::Emitter	signature:() const
getTextRect	src/MPE/classes/Particle.cpp	/^TextRect Particle::getTextRect() const$/;"	kind:f	class:mpe::Particle	signature:() const
getWidth	include/MPE/classes/Focus.hpp	/^   Real getWidth() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
getWidth	include/MPE/classes/Particle.hpp	/^   Real getWidth() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
getWidth	src/MPE/classes/Focus.cpp	/^Real Focus::getWidth() const$/;"	kind:f	class:mpe::Focus	signature:() const
getWidth	src/MPE/classes/Particle.cpp	/^Real Particle::getWidth() const$/;"	kind:f	class:mpe::Particle	signature:() const
getX	include/MPE/classes/Vec2.hpp	/^   Real getX()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
getXFactor	include/MPE/classes/System.hpp	/^   Real     getXFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
getXFactor	src/MPE/classes/System.cpp	/^Real System::getXFactor() const$/;"	kind:f	class:mpe::System	signature:() const
getY	include/MPE/classes/Vec2.hpp	/^   Real getY()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
getYFactor	include/MPE/classes/System.hpp	/^   Real     getYFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
getYFactor	src/MPE/classes/System.cpp	/^Real System::getYFactor() const$/;"	kind:f	class:mpe::System	signature:() const
height	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
info_arch	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	kind:v
info_arch	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	kind:v
info_compiler	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	kind:v
info_compiler	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	kind:v
info_platform	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	kind:v
info_platform	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	kind:v
info_version	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	kind:v
info_version	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	kind:v
init	include/MPE/classes/Particle.hpp	/^   void init(Real    theTLL,$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theTLL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor = Color{255, 255, 255, 255}, GroupID theGroups = mpe::NO_GROUP)
init	include/MPE/classes/Vec2.hpp	/^   void init(Real theX, Real theY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
init	src/MPE/classes/Particle.cpp	/^void Particle::init(Real    theTTL,$/;"	kind:f	class:mpe::Particle	signature:(Real theTTL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor, GroupID theGroups)
isAlive	include/MPE/classes/Mortal.hpp	/^   inline bool isAlive()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(anEmitterID);$/;"	kind:l
it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(theEmitterID);$/;"	kind:l
kill	include/MPE/classes/Mortal.hpp	/^   inline void kill()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
length	include/MPE/classes/Vec2.hpp	/^   Real length()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mAffectors	include/MPE/classes/System.hpp	/^   std::list<AffectorPtr>        mAffectors;$/;"	kind:m	class:mpe::System	access:protected
mAge	include/MPE/classes/Mortal.hpp	/^   Real mAge;$/;"	kind:m	class:mpe::Mortal	access:private
mAlive	include/MPE/classes/Mortal.hpp	/^   bool mAlive;$/;"	kind:m	class:mpe::Mortal	access:private
mAngle	include/MPE/classes/Focus.hpp	/^   Real      mAngle;   \/\/\/< Angle.$/;"	kind:m	class:mpe::Focus	access:private
mAngle	include/MPE/classes/Particle.hpp	/^   Real      mAngle;$/;"	kind:m	class:mpe::Particle	access:private
mAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real      mAngularVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mColor	include/MPE/classes/Particle.hpp	/^   Color     mColor;$/;"	kind:m	class:mpe::Particle	access:private
mDispersion	include/MPE/classes/Emitter.hpp	/^   Dispersion  mDispersion;    \/\/\/< Type of paricles' dispersion.$/;"	kind:m	class:mpe::Emitter	access:private
mEP	include/MPE/classes/Focus.hpp	/^   Integer   mEP;      \/\/\/< Particles already emitted by the focus.$/;"	kind:m	class:mpe::Focus	access:private
mEmitter	include/MPE/classes/Focus.hpp	/^   const Emitter&  mEmitter;\/\/\/< The emitter server for the focus.$/;"	kind:m	class:mpe::Focus	access:private
mEmitters	include/MPE/classes/System.hpp	/^   std::map<EmitterID, Emitter>   mEmitters;$/;"	kind:m	class:mpe::System	access:protected
mFocusses	include/MPE/classes/System.hpp	/^   std::list<FocusPtr>           mFocusses;$/;"	kind:m	class:mpe::System	access:protected
mGroups	include/MPE/classes/Focus.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Focus	access:private
mGroups	include/MPE/classes/Particle.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Particle	access:private
mHeight	include/MPE/classes/Focus.hpp	/^   Real      mHeight;  \/\/\/< Height.$/;"	kind:m	class:mpe::Focus	access:private
mHeight	include/MPE/classes/Particle.hpp	/^   Real      mHeight;$/;"	kind:m	class:mpe::Particle	access:private
mID	include/MPE/classes/Emitter.hpp	/^   EmitterID   mID;            \/\/\/< Unique EmitterID for the emitter.$/;"	kind:m	class:mpe::Emitter	access:private
mLifetime	include/MPE/classes/Mortal.hpp	/^   Real mLifetime;$/;"	kind:m	class:mpe::Mortal	access:private
mLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2      mLinearVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mPPS	include/MPE/classes/Focus.hpp	/^   Real      mPPS;$/;"	kind:m	class:mpe::Focus	access:private
mParticles	include/MPE/classes/System.hpp	/^   std::list<Particle>           mParticles;$/;"	kind:m	class:mpe::System	access:protected
mPosition	include/MPE/classes/Focus.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Focus	access:private
mPosition	include/MPE/classes/Particle.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Particle	access:private
mRF_Height	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_Height;\/\/\/< Range of focus height.$/;"	kind:m	class:mpe::Emitter	access:private
mRF_NP	include/MPE/classes/Emitter.hpp	/^   Randomizer<Integer> mRF_NP; \/\/\/< Range of focus number of particles.$/;"	kind:m	class:mpe::Emitter	access:private
mRF_PPS	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_PPS;   \/\/\/< Range of focus particles per second.$/;"	kind:m	class:mpe::Emitter	access:private
mRF_TOL	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_TOL;   \/\/\/< Range of focus time of life.$/;"	kind:m	class:mpe::Emitter	access:private
mRF_Width	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_Width; \/\/\/< Range of focus width.$/;"	kind:m	class:mpe::Emitter	access:private
mRP_AV	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_AV;    \/\/\/< Range of particles angular velocity.$/;"	kind:m	class:mpe::Emitter	access:private
mRP_Angle	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_Angle; \/\/\/< Range of particles angle.$/;"	kind:m	class:mpe::Emitter	access:private
mRP_Height	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_Height;\/\/\/< Range of paricles height.$/;"	kind:m	class:mpe::Emitter	access:private
mRP_LV	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_LV;    \/\/\/< Range of paricles impulsion.$/;"	kind:m	class:mpe::Emitter	access:private
mRP_TOL	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_TOL;   \/\/\/< Range of particles lifetime.$/;"	kind:m	class:mpe::Emitter	access:private
mRP_Width	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_Width; \/\/\/< Range of paricles width.$/;"	kind:m	class:mpe::Emitter	access:private
mRandom	include/MPE/classes/Randomizer.hpp	/^   std::function<T()> mRandom;$/;"	kind:m	class:mpe::Randomizer	access:private
mRect	include/MPE/classes/Emitter.hpp	/^   TextRect    mRect;$/;"	kind:m	class:mpe::Emitter	access:private
mShape	include/MPE/classes/Emitter.hpp	/^   Shape       mShape;         \/\/\/< The emitter's shape.$/;"	kind:m	class:mpe::Emitter	access:private
mSystem	include/MPE/classes/Emitter.hpp	/^   System*     mSystem;$/;"	kind:m	class:mpe::Emitter	access:private
mTP	include/MPE/classes/Focus.hpp	/^   Integer   mTP;      \/\/\/< Total number of Particles. -1 = no number limits$/;"	kind:m	class:mpe::Focus	access:private
mTextRect	include/MPE/classes/Particle.hpp	/^   TextRect  mTextRect;$/;"	kind:m	class:mpe::Particle	access:private
mTimeAcum	include/MPE/classes/Focus.hpp	/^   Real      mTimeAcum;$/;"	kind:m	class:mpe::Focus	access:private
mWidth	include/MPE/classes/Focus.hpp	/^   Real      mWidth;   \/\/\/< Width.$/;"	kind:m	class:mpe::Focus	access:private
mWidth	include/MPE/classes/Particle.hpp	/^   Real      mWidth;$/;"	kind:m	class:mpe::Particle	access:private
mXFactor	include/MPE/classes/System.hpp	/^   Real mXFactor;$/;"	kind:m	class:mpe::System	access:protected
mYFactor	include/MPE/classes/System.hpp	/^   Real mYFactor;$/;"	kind:m	class:mpe::System	access:protected
main	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	kind:f	signature:(int argc, char* argv[])
main	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	kind:f
main	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	kind:f	signature:(int argc, char* argv[])
mpe	include/MPE/Config.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Affector.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Emitter.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Focus.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Mortal.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Particle.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Randomizer.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/System.hpp	/^namespace mpe$/;"	kind:n
mpe	include/MPE/classes/Vec2.hpp	/^namespace mpe$/;"	kind:n
mpe	src/MPE/classes/Affector.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Emitter.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Focus.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Mortal.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Particle.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/Randomizer.cpp	/^namespace mpe$/;"	kind:n	file:
mpe	src/MPE/classes/System.cpp	/^namespace mpe$/;"	kind:n	file:
mpe::Affector	include/MPE/classes/Affector.hpp	/^class Affector: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
mpe::Affector::Affector	include/MPE/classes/Affector.hpp	/^   Affector(Real      theLifetime);$/;"	kind:p	class:mpe::Affector	access:protected	signature:(Real theLifetime)
mpe::Affector::Affector	src/MPE/classes/Affector.cpp	/^Affector::Affector(Real theLifetime):$/;"	kind:f	class:mpe::Affector	signature:(Real theLifetime)
mpe::Affector::affect	include/MPE/classes/Affector.hpp	/^   virtual void affect(Particle& theParticle, Real theElapsedTime) = 0;$/;"	kind:p	class:mpe::Affector	access:public	signature:(Particle& theParticle, Real theElapsedTime)
mpe::Affector::update	include/MPE/classes/Affector.hpp	/^   virtual void update(Real theElapsedtime)$/;"	kind:f	class:mpe::Affector	access:public	signature:(Real theElapsedtime)
mpe::AffectorPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Affector> AffectorPtr;$/;"	kind:t	namespace:mpe
mpe::Color	include/MPE/Config.hpp	/^struct Color$/;"	kind:s	namespace:mpe
mpe::Color::a	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Color::b	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Color::g	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Color::r	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
mpe::Emitter	include/MPE/classes/Emitter.hpp	/^class Emitter$/;"	kind:c	namespace:mpe
mpe::Emitter::CIRCLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
mpe::Emitter::DUMMY	include/MPE/classes/Emitter.hpp	/^   static Emitter DUMMY;$/;"	kind:m	class:mpe::Emitter	access:public
mpe::Emitter::DUMMY	src/MPE/classes/Emitter.cpp	/^Emitter Emitter::DUMMY = Emitter("DUMMY");$/;"	kind:m	class:mpe::Emitter	file:
mpe::Emitter::Dispersion	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:g	class:mpe::Emitter	access:public
mpe::Emitter::Emitter	include/MPE/classes/Emitter.hpp	/^   Emitter(EmitterID theID);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(EmitterID theID)
mpe::Emitter::Emitter	src/MPE/classes/Emitter.cpp	/^Emitter::Emitter(EmitterID theID):$/;"	kind:f	class:mpe::Emitter	signature:(EmitterID theID)
mpe::Emitter::LINEAR	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::RADIAL	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::RANDOM	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::RECTANGLE	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:e	enum:mpe::Emitter::Shape
mpe::Emitter::REFLECT	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::STATIC	include/MPE/classes/Emitter.hpp	/^   enum Dispersion {LINEAR, RADIAL, REFLECT, RANDOM, STATIC};$/;"	kind:e	enum:mpe::Emitter::Dispersion
mpe::Emitter::Shape	include/MPE/classes/Emitter.hpp	/^   enum Shape {RECTANGLE, CIRCLE};$/;"	kind:g	class:mpe::Emitter	access:public
mpe::Emitter::createFocus	include/MPE/classes/Emitter.hpp	/^   FocusPtr createFocus(Vec2 thePosition,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP) const
mpe::Emitter::createFocus	src/MPE/classes/Emitter.cpp	/^FocusPtr Emitter::createFocus(Vec2   thePosition,$/;"	kind:f	class:mpe::Emitter	signature:(Vec2 thePosition, Real theAngle, GroupID theGroups) const
mpe::Emitter::generatePosition	include/MPE/classes/Emitter.hpp	/^   Vec2 generatePosition(const Focus& theFocus) const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus) const
mpe::Emitter::generatePosition	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generatePosition(const Focus& theFocus) const$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus) const
mpe::Emitter::generateVelocity	include/MPE/classes/Emitter.hpp	/^   Vec2 generateVelocity(const Focus& theFocus,$/;"	kind:p	class:mpe::Emitter	access:public	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
mpe::Emitter::generateVelocity	src/MPE/classes/Emitter.cpp	/^Vec2 Emitter::generateVelocity(const Focus& theFocus,$/;"	kind:f	class:mpe::Emitter	signature:(const Focus& theFocus, const Vec2& theParticlePosition) const
mpe::Emitter::getFocusHeight	include/MPE/classes/Emitter.hpp	/^   Real getFocusHeight() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusHeight() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusNP	include/MPE/classes/Emitter.hpp	/^   Integer getFocusNP() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusNP	src/MPE/classes/Emitter.cpp	/^Integer Emitter::getFocusNP() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusPPS	include/MPE/classes/Emitter.hpp	/^   Real getFocusPPS() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusPPS	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusPPS() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusTOL	include/MPE/classes/Emitter.hpp	/^   Real getFocusTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getFocusWidth	include/MPE/classes/Emitter.hpp	/^   Real getFocusWidth() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getFocusWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getFocusWidth() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getID	include/MPE/classes/Emitter.hpp	/^   EmitterID getID() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getID	src/MPE/classes/Emitter.cpp	/^EmitterID Emitter::getID() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleAV	include/MPE/classes/Emitter.hpp	/^   Real getParticleAV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleAV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleAngle	include/MPE/classes/Emitter.hpp	/^   Real getParticleAngle() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleAngle	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleAngle() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleHeight	include/MPE/classes/Emitter.hpp	/^   Real getParticleHeight() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleHeight	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleHeight() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleLV	include/MPE/classes/Emitter.hpp	/^   Real getParticleLV() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleLV	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleLV() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleTOL	include/MPE/classes/Emitter.hpp	/^   Real getParticleTOL() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleTOL	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleTOL() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getParticleWidth	include/MPE/classes/Emitter.hpp	/^   Real getParticleWidth() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getParticleWidth	src/MPE/classes/Emitter.cpp	/^Real Emitter::getParticleWidth() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getSystem	include/MPE/classes/Emitter.hpp	/^   System* getSystem() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getSystem	src/MPE/classes/Emitter.cpp	/^System* Emitter::getSystem() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::getTextRect	include/MPE/classes/Emitter.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Emitter	access:public	signature:() const
mpe::Emitter::getTextRect	src/MPE/classes/Emitter.cpp	/^TextRect Emitter::getTextRect() const$/;"	kind:f	class:mpe::Emitter	signature:() const
mpe::Emitter::mDispersion	include/MPE/classes/Emitter.hpp	/^   Dispersion  mDispersion;    \/\/\/< Type of paricles' dispersion.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mID	include/MPE/classes/Emitter.hpp	/^   EmitterID   mID;            \/\/\/< Unique EmitterID for the emitter.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRF_Height	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_Height;\/\/\/< Range of focus height.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRF_NP	include/MPE/classes/Emitter.hpp	/^   Randomizer<Integer> mRF_NP; \/\/\/< Range of focus number of particles.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRF_PPS	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_PPS;   \/\/\/< Range of focus particles per second.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRF_TOL	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_TOL;   \/\/\/< Range of focus time of life.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRF_Width	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRF_Width; \/\/\/< Range of focus width.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRP_AV	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_AV;    \/\/\/< Range of particles angular velocity.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRP_Angle	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_Angle; \/\/\/< Range of particles angle.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRP_Height	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_Height;\/\/\/< Range of paricles height.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRP_LV	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_LV;    \/\/\/< Range of paricles impulsion.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRP_TOL	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_TOL;   \/\/\/< Range of particles lifetime.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRP_Width	include/MPE/classes/Emitter.hpp	/^   Randomizer<Real> mRP_Width; \/\/\/< Range of paricles width.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mRect	include/MPE/classes/Emitter.hpp	/^   TextRect    mRect;$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mShape	include/MPE/classes/Emitter.hpp	/^   Shape       mShape;         \/\/\/< The emitter's shape.$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::mSystem	include/MPE/classes/Emitter.hpp	/^   System*     mSystem;$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::sRealRandom	include/MPE/classes/Emitter.hpp	/^   static Randomizer<Real> sRealRandom;$/;"	kind:m	class:mpe::Emitter	access:private
mpe::Emitter::setDispersion	include/MPE/classes/Emitter.hpp	/^   void setDispersion(Dispersion theDispersion);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Dispersion theDispersion)
mpe::Emitter::setDispersion	src/MPE/classes/Emitter.cpp	/^void Emitter::setDispersion(Dispersion theDispersion)$/;"	kind:f	class:mpe::Emitter	signature:(Dispersion theDispersion)
mpe::Emitter::setRangeFocusHeight	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusHeight(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusHeight(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusNP	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusNP(Integer theMin, Integer theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Integer theMin, Integer theMax)
mpe::Emitter::setRangeFocusNP	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusNP(Integer theMin, Integer theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Integer theMin, Integer theMax)
mpe::Emitter::setRangeFocusPPS	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusPPS(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusPPS	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusPPS(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusTOL	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusWidth	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusWidth(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeFocusWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusWidth(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleAV	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleAV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleAV	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleAV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleAngle	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleAngle(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleAngle	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleAngle(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleHeight	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleHeight(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleHeight(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleLV	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleLV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleLV	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleLV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleTOL	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleWidth	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleWidth(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
mpe::Emitter::setRangeParticleWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleWidth(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
mpe::Emitter::setShape	include/MPE/classes/Emitter.hpp	/^   void setShape(Shape theShape);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Shape theShape)
mpe::Emitter::setShape	src/MPE/classes/Emitter.cpp	/^void Emitter::setShape(Shape theShape)$/;"	kind:f	class:mpe::Emitter	signature:(Shape theShape)
mpe::Emitter::setSystem	include/MPE/classes/Emitter.hpp	/^   void setSystem(System* theSystem);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(System* theSystem)
mpe::Emitter::setSystem	src/MPE/classes/Emitter.cpp	/^void Emitter::setSystem(System* theSystem)$/;"	kind:f	class:mpe::Emitter	signature:(System* theSystem)
mpe::Emitter::setTextRect	include/MPE/classes/Emitter.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(TextRect theTextRect)
mpe::Emitter::setTextRect	src/MPE/classes/Emitter.cpp	/^void Emitter::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Emitter	signature:(TextRect theTextRect)
mpe::EmitterID	include/MPE/Config.hpp	/^typedef std::string EmitterID;$/;"	kind:t	namespace:mpe
mpe::Focus	include/MPE/classes/Focus.hpp	/^class Focus: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
mpe::Focus::Focus	include/MPE/classes/Focus.hpp	/^   Focus(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::Focus	src/MPE/classes/Focus.cpp	/^Focus::Focus(Real           theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::create	include/MPE/classes/Focus.hpp	/^   static FocusPtr create(Real    theLifetime,$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::create	src/MPE/classes/Focus.cpp	/^FocusPtr Focus::create(Real    theLifetime,$/;"	kind:f	class:mpe::Focus	signature:(Real theLifetime, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Integer theTP, Real thePPS, GroupID theGroups, const Emitter& theEmitter)
mpe::Focus::createParticle	include/MPE/classes/Focus.hpp	/^   Particle createParticle();$/;"	kind:p	class:mpe::Focus	access:private	signature:()
mpe::Focus::createParticle	src/MPE/classes/Focus.cpp	/^Particle Focus::createParticle ()$/;"	kind:f	class:mpe::Focus	signature:()
mpe::Focus::drain	include/MPE/classes/Focus.hpp	/^   Integer drain(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Real theElapsedTime)
mpe::Focus::drain	src/MPE/classes/Focus.cpp	/^Integer Focus::drain(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
mpe::Focus::emit	include/MPE/classes/Focus.hpp	/^   void emit(Integer theNParticles);$/;"	kind:p	class:mpe::Focus	access:private	signature:(Integer theNParticles)
mpe::Focus::emit	src/MPE/classes/Focus.cpp	/^void Focus::emit(Integer theNParticles)$/;"	kind:f	class:mpe::Focus	signature:(Integer theNParticles)
mpe::Focus::getAngle	include/MPE/classes/Focus.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getAngle	src/MPE/classes/Focus.cpp	/^Real Focus::getAngle() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::getHeight	include/MPE/classes/Focus.hpp	/^   Real getHeight() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getHeight	src/MPE/classes/Focus.cpp	/^Real Focus::getHeight() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::getPPS	include/MPE/classes/Focus.hpp	/^   Real getPPS();$/;"	kind:p	class:mpe::Focus	access:public	signature:()
mpe::Focus::getPPS	src/MPE/classes/Focus.cpp	/^Real Focus::getPPS ()$/;"	kind:f	class:mpe::Focus	signature:()
mpe::Focus::getPosition	include/MPE/classes/Focus.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getPosition	src/MPE/classes/Focus.cpp	/^Vec2 Focus::getPosition() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::getWidth	include/MPE/classes/Focus.hpp	/^   Real getWidth() const;$/;"	kind:p	class:mpe::Focus	access:public	signature:() const
mpe::Focus::getWidth	src/MPE/classes/Focus.cpp	/^Real Focus::getWidth() const$/;"	kind:f	class:mpe::Focus	signature:() const
mpe::Focus::mAngle	include/MPE/classes/Focus.hpp	/^   Real      mAngle;   \/\/\/< Angle.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mEP	include/MPE/classes/Focus.hpp	/^   Integer   mEP;      \/\/\/< Particles already emitted by the focus.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mEmitter	include/MPE/classes/Focus.hpp	/^   const Emitter&  mEmitter;\/\/\/< The emitter server for the focus.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mGroups	include/MPE/classes/Focus.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mHeight	include/MPE/classes/Focus.hpp	/^   Real      mHeight;  \/\/\/< Height.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mPPS	include/MPE/classes/Focus.hpp	/^   Real      mPPS;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mPosition	include/MPE/classes/Focus.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mTP	include/MPE/classes/Focus.hpp	/^   Integer   mTP;      \/\/\/< Total number of Particles. -1 = no number limits$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mTimeAcum	include/MPE/classes/Focus.hpp	/^   Real      mTimeAcum;$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::mWidth	include/MPE/classes/Focus.hpp	/^   Real      mWidth;   \/\/\/< Width.$/;"	kind:m	class:mpe::Focus	access:private
mpe::Focus::setAngle	include/MPE/classes/Focus.hpp	/^   void setAngle(Real theAngle);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theAngle)
mpe::Focus::setAngle	src/MPE/classes/Focus.cpp	/^void Focus::setAngle(Real theAngle)$/;"	kind:f	class:mpe::Focus	signature:(Real theAngle)
mpe::Focus::setHeight	include/MPE/classes/Focus.hpp	/^   void setHeight(Real theHeight);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theHeight)
mpe::Focus::setHeight	src/MPE/classes/Focus.cpp	/^void Focus::setHeight(Real theHeight)$/;"	kind:f	class:mpe::Focus	signature:(Real theHeight)
mpe::Focus::setPPS	include/MPE/classes/Focus.hpp	/^   void setPPS(Real thePPS);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real thePPS)
mpe::Focus::setPPS	src/MPE/classes/Focus.cpp	/^void Focus::setPPS(Real thePPS)$/;"	kind:f	class:mpe::Focus	signature:(Real thePPS)
mpe::Focus::setPosition	include/MPE/classes/Focus.hpp	/^   void setPosition(Vec2 thePosition);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Vec2 thePosition)
mpe::Focus::setPosition	src/MPE/classes/Focus.cpp	/^void Focus::setPosition(Vec2 thePosition)$/;"	kind:f	class:mpe::Focus	signature:(Vec2 thePosition)
mpe::Focus::setWidth	include/MPE/classes/Focus.hpp	/^   void setWidth(Real theWidth);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theWidth)
mpe::Focus::setWidth	src/MPE/classes/Focus.cpp	/^void Focus::setWidth(Real theWidth)$/;"	kind:f	class:mpe::Focus	signature:(Real theWidth)
mpe::Focus::update	include/MPE/classes/Focus.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theElapsedTime)
mpe::Focus::update	src/MPE/classes/Focus.cpp	/^void Focus::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
mpe::FocusPtr	include/MPE/Config.hpp	/^typedef std::shared_ptr<Focus> FocusPtr;$/;"	kind:t	namespace:mpe
mpe::GROUP_A	include/MPE/Config.hpp	/^const GroupID GROUP_A = 0x01;$/;"	kind:m	namespace:mpe
mpe::GROUP_B	include/MPE/Config.hpp	/^const GroupID GROUP_B = 0x02;$/;"	kind:m	namespace:mpe
mpe::GROUP_C	include/MPE/Config.hpp	/^const GroupID GROUP_C = 0x04;$/;"	kind:m	namespace:mpe
mpe::GROUP_D	include/MPE/Config.hpp	/^const GroupID GROUP_D = 0x08;$/;"	kind:m	namespace:mpe
mpe::GROUP_E	include/MPE/Config.hpp	/^const GroupID GROUP_E = 0x10;$/;"	kind:m	namespace:mpe
mpe::GROUP_F	include/MPE/Config.hpp	/^const GroupID GROUP_F = 0x20;$/;"	kind:m	namespace:mpe
mpe::GROUP_G	include/MPE/Config.hpp	/^const GroupID GROUP_G = 0x40;$/;"	kind:m	namespace:mpe
mpe::GROUP_H	include/MPE/Config.hpp	/^const GroupID GROUP_H = 0x80;$/;"	kind:m	namespace:mpe
mpe::GroupID	include/MPE/Config.hpp	/^typedef unsigned char GroupID;$/;"	kind:t	namespace:mpe
mpe::Integer	include/MPE/Config.hpp	/^typedef int Integer;$/;"	kind:t	namespace:mpe
mpe::MAX_INTEGER	include/MPE/Config.hpp	/^const Integer MAX_INTEGER = std::numeric_limits<Integer>::max();$/;"	kind:m	namespace:mpe
mpe::Mortal	include/MPE/classes/Mortal.hpp	/^class Mortal$/;"	kind:c	namespace:mpe
mpe::Mortal::Mortal	include/MPE/classes/Mortal.hpp	/^   Mortal(Real theLifetime);$/;"	kind:p	class:mpe::Mortal	access:protected	signature:(Real theLifetime)
mpe::Mortal::Mortal	src/MPE/classes/Mortal.cpp	/^Mortal::Mortal(Real theLifetime):$/;"	kind:f	class:mpe::Mortal	signature:(Real theLifetime)
mpe::Mortal::age	include/MPE/classes/Mortal.hpp	/^   inline void age(Real theElapsedTime)$/;"	kind:f	class:mpe::Mortal	access:protected	signature:(Real theElapsedTime)
mpe::Mortal::die	include/MPE/classes/Mortal.hpp	/^   inline void die()$/;"	kind:f	class:mpe::Mortal	access:private	signature:()
mpe::Mortal::getAge	include/MPE/classes/Mortal.hpp	/^   inline Real getAge() const$/;"	kind:f	class:mpe::Mortal	access:public	signature:() const
mpe::Mortal::isAlive	include/MPE/classes/Mortal.hpp	/^   inline bool isAlive()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
mpe::Mortal::kill	include/MPE/classes/Mortal.hpp	/^   inline void kill()$/;"	kind:f	class:mpe::Mortal	access:public	signature:()
mpe::Mortal::mAge	include/MPE/classes/Mortal.hpp	/^   Real mAge;$/;"	kind:m	class:mpe::Mortal	access:private
mpe::Mortal::mAlive	include/MPE/classes/Mortal.hpp	/^   bool mAlive;$/;"	kind:m	class:mpe::Mortal	access:private
mpe::Mortal::mLifetime	include/MPE/classes/Mortal.hpp	/^   Real mLifetime;$/;"	kind:m	class:mpe::Mortal	access:private
mpe::Mortal::resetLife	include/MPE/classes/Mortal.hpp	/^   inline void resetLife(Real theLifetime)$/;"	kind:f	class:mpe::Mortal	access:protected	signature:(Real theLifetime)
mpe::NO_GROUP	include/MPE/Config.hpp	/^const GroupID NO_GROUP = 0x00;$/;"	kind:m	namespace:mpe
mpe::Particle	include/MPE/classes/Particle.hpp	/^class Particle: public Mortal$/;"	kind:c	namespace:mpe	inherits:Mortal
mpe::Particle::Particle	include/MPE/classes/Particle.hpp	/^   Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
mpe::Particle::Particle	include/MPE/classes/Particle.hpp	/^   Particle(Real    theTLL,$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theTLL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor = Color{255, 255, 255, 255}, GroupID theGroups = mpe::NO_GROUP)
mpe::Particle::Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle():$/;"	kind:f	class:mpe::Particle	signature:()
mpe::Particle::Particle	src/MPE/classes/Particle.cpp	/^Particle::Particle(Real     theTTL,$/;"	kind:f	class:mpe::Particle	signature:(Real theTTL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor, GroupID theGroups)
mpe::Particle::belongToGroup	include/MPE/classes/Particle.hpp	/^   bool belongToGroup(const GroupID theGroups) const;$/;"	kind:p	class:mpe::Particle	access:public	signature:(const GroupID theGroups) const
mpe::Particle::belongToGroup	src/MPE/classes/Particle.cpp	/^bool Particle::belongToGroup(const GroupID theGroups) const$/;"	kind:f	class:mpe::Particle	signature:(const GroupID theGroups) const
mpe::Particle::getAngle	include/MPE/classes/Particle.hpp	/^   Real getAngle() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getAngle	src/MPE/classes/Particle.cpp	/^Real Particle::getAngle() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real getAngularVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getAngularVelocity	src/MPE/classes/Particle.cpp	/^Real Particle::getAngularVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getColor	include/MPE/classes/Particle.hpp	/^   Color getColor() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getColor	src/MPE/classes/Particle.cpp	/^Color Particle::getColor() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getHeight	include/MPE/classes/Particle.hpp	/^   Real getHeight() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getHeight	src/MPE/classes/Particle.cpp	/^Real Particle::getHeight() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2 getLinearVelocity() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getLinearVelocity	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getLinearVelocity() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getPosition	include/MPE/classes/Particle.hpp	/^   Vec2 getPosition() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getPosition	src/MPE/classes/Particle.cpp	/^Vec2 Particle::getPosition() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getTextRect	include/MPE/classes/Particle.hpp	/^   TextRect getTextRect() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getTextRect	src/MPE/classes/Particle.cpp	/^TextRect Particle::getTextRect() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::getWidth	include/MPE/classes/Particle.hpp	/^   Real getWidth() const;$/;"	kind:p	class:mpe::Particle	access:public	signature:() const
mpe::Particle::getWidth	src/MPE/classes/Particle.cpp	/^Real Particle::getWidth() const$/;"	kind:f	class:mpe::Particle	signature:() const
mpe::Particle::init	include/MPE/classes/Particle.hpp	/^   void init(Real    theTLL,$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theTLL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor = Color{255, 255, 255, 255}, GroupID theGroups = mpe::NO_GROUP)
mpe::Particle::init	src/MPE/classes/Particle.cpp	/^void Particle::init(Real    theTTL,$/;"	kind:f	class:mpe::Particle	signature:(Real theTTL, Real theWidth, Real theHeight, Vec2 thePosition, Real theAngle, Vec2 theLinearVelocity, Real theAngularVelocity, TextRect theTextRect, Color theColor, GroupID theGroups)
mpe::Particle::mAngle	include/MPE/classes/Particle.hpp	/^   Real      mAngle;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mAngularVelocity	include/MPE/classes/Particle.hpp	/^   Real      mAngularVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mColor	include/MPE/classes/Particle.hpp	/^   Color     mColor;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mGroups	include/MPE/classes/Particle.hpp	/^   GroupID   mGroups;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mHeight	include/MPE/classes/Particle.hpp	/^   Real      mHeight;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mLinearVelocity	include/MPE/classes/Particle.hpp	/^   Vec2      mLinearVelocity;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mPosition	include/MPE/classes/Particle.hpp	/^   Vec2      mPosition;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mTextRect	include/MPE/classes/Particle.hpp	/^   TextRect  mTextRect;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::mWidth	include/MPE/classes/Particle.hpp	/^   Real      mWidth;$/;"	kind:m	class:mpe::Particle	access:private
mpe::Particle::setAngularVelocity	include/MPE/classes/Particle.hpp	/^   void setAngularVelocity(Real theAngularVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theAngularVelocity)
mpe::Particle::setAngularVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setAngularVelocity(Real theAngularVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Real theAngularVelocity)
mpe::Particle::setColor	include/MPE/classes/Particle.hpp	/^   void  setColor(Color theColor);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Color theColor)
mpe::Particle::setColor	src/MPE/classes/Particle.cpp	/^void Particle::setColor(Color theColor)$/;"	kind:f	class:mpe::Particle	signature:(Color theColor)
mpe::Particle::setHeight	include/MPE/classes/Particle.hpp	/^   void setHeight(Real theHeight);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theHeight)
mpe::Particle::setHeight	src/MPE/classes/Particle.cpp	/^void Particle::setHeight(Real theHeight)$/;"	kind:f	class:mpe::Particle	signature:(Real theHeight)
mpe::Particle::setLinearVelocity	include/MPE/classes/Particle.hpp	/^   void setLinearVelocity(Vec2 theLinearVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Vec2 theLinearVelocity)
mpe::Particle::setLinearVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setLinearVelocity(Vec2 theLinearVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Vec2 theLinearVelocity)
mpe::Particle::setTextRect	include/MPE/classes/Particle.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Particle	access:public	signature:(TextRect theTextRect)
mpe::Particle::setTextRect	src/MPE/classes/Particle.cpp	/^void Particle::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Particle	signature:(TextRect theTextRect)
mpe::Particle::setWidth	include/MPE/classes/Particle.hpp	/^   void setWidth(Real theWidth);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theWidth)
mpe::Particle::setWidth	src/MPE/classes/Particle.cpp	/^void Particle::setWidth(Real theWidth)$/;"	kind:f	class:mpe::Particle	signature:(Real theWidth)
mpe::Particle::update	include/MPE/classes/Particle.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theElapsedTime)
mpe::Particle::update	src/MPE/classes/Particle.cpp	/^void Particle::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Particle	signature:(Real theElapsedTime)
mpe::Particle::~Particle	include/MPE/classes/Particle.hpp	/^   ~Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
mpe::Particle::~Particle	src/MPE/classes/Particle.cpp	/^Particle::~Particle() {}$/;"	kind:f	class:mpe::Particle	signature:()
mpe::REAL_INFINITY	include/MPE/Config.hpp	/^const Real REAL_INFINITY = std::numeric_limits<Real>::infinity();$/;"	kind:m	namespace:mpe
mpe::Randomizer	include/MPE/classes/Randomizer.hpp	/^class Randomizer$/;"	kind:c	namespace:mpe
mpe::Randomizer::Randomizer	include/MPE/classes/Randomizer.hpp	/^   Randomizer();$/;"	kind:p	class:mpe::Randomizer	access:public	signature:()
mpe::Randomizer::Randomizer	include/MPE/classes/Randomizer.hpp	/^   Randomizer(T min, T max);$/;"	kind:p	class:mpe::Randomizer	access:public	signature:(T min, T max)
mpe::Randomizer::Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Integer>::Randomizer():$/;"	kind:f	class:mpe::Randomizer	signature:()
mpe::Randomizer::Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Integer>::Randomizer(Integer theMin, Integer theMax):$/;"	kind:f	class:mpe::Randomizer	signature:(Integer theMin, Integer theMax)
mpe::Randomizer::Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Real>::Randomizer():$/;"	kind:f	class:mpe::Randomizer	signature:()
mpe::Randomizer::Randomizer	src/MPE/classes/Randomizer.cpp	/^Randomizer<Real>::Randomizer(Real theMin, Real theMax):$/;"	kind:f	class:mpe::Randomizer	signature:(Real theMin, Real theMax)
mpe::Randomizer::mRandom	include/MPE/classes/Randomizer.hpp	/^   std::function<T()> mRandom;$/;"	kind:m	class:mpe::Randomizer	access:private
mpe::Randomizer::operator ()	include/MPE/classes/Randomizer.hpp	/^   T operator()() const;$/;"	kind:p	class:mpe::Randomizer	access:public	signature:() const
mpe::Randomizer::operator ()	src/MPE/classes/Randomizer.cpp	/^T Randomizer<T>::operator()() const$/;"	kind:f	class:mpe::Randomizer	signature:() const
mpe::Real	include/MPE/Config.hpp	/^typedef float Real;$/;"	kind:t	namespace:mpe
mpe::System	include/MPE/classes/System.hpp	/^class System$/;"	kind:c	namespace:mpe
mpe::System::System	include/MPE/classes/System.hpp	/^   System();$/;"	kind:p	class:mpe::System	access:public	signature:()
mpe::System::System	src/MPE/classes/System.cpp	/^System::System ():$/;"	kind:f	class:mpe::System	signature:()
mpe::System::addAffector	include/MPE/classes/System.hpp	/^   void     addAffector(AffectorPtr theAffector);$/;"	kind:p	class:mpe::System	access:public	signature:(AffectorPtr theAffector)
mpe::System::addAffector	src/MPE/classes/System.cpp	/^void System::addAffector(AffectorPtr theAffector)$/;"	kind:f	class:mpe::System	signature:(AffectorPtr theAffector)
mpe::System::addEmitter	include/MPE/classes/System.hpp	/^   void     addEmitter(Emitter& theEmitter);$/;"	kind:p	class:mpe::System	access:public	signature:(Emitter& theEmitter)
mpe::System::addEmitter	src/MPE/classes/System.cpp	/^void System::addEmitter(Emitter& theEmitter)$/;"	kind:f	class:mpe::System	signature:(Emitter& theEmitter)
mpe::System::addFocus	include/MPE/classes/System.hpp	/^   void     addFocus(FocusPtr theFocus);$/;"	kind:p	class:mpe::System	access:public	signature:(FocusPtr theFocus)
mpe::System::addFocus	src/MPE/classes/System.cpp	/^void System::addFocus(FocusPtr theFocus)$/;"	kind:f	class:mpe::System	signature:(FocusPtr theFocus)
mpe::System::addParticle	include/MPE/classes/System.hpp	/^   void     addParticle(Particle& theParticle);$/;"	kind:p	class:mpe::System	access:public	signature:(Particle& theParticle)
mpe::System::addParticle	src/MPE/classes/System.cpp	/^void System::addParticle (Particle& theParticle)$/;"	kind:f	class:mpe::System	signature:(Particle& theParticle)
mpe::System::createFocus	include/MPE/classes/System.hpp	/^   FocusPtr   createFocus(EmitterID theEmitter,$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitter, Vec2 thePosition, Real theAngle, GroupID theGroups = mpe::NO_GROUP)
mpe::System::createFocus	src/MPE/classes/System.cpp	/^FocusPtr System::createFocus(EmitterID theEmitterID,$/;"	kind:f	class:mpe::System	signature:(EmitterID theEmitterID, Vec2 thePosition, Real theAngle, GroupID theGroups)
mpe::System::getEmitter	include/MPE/classes/System.hpp	/^   Emitter& getEmitter(EmitterID theEmitterID);$/;"	kind:p	class:mpe::System	access:public	signature:(EmitterID theEmitterID)
mpe::System::getEmitter	src/MPE/classes/System.cpp	/^Emitter& System::getEmitter ( EmitterID theEmitterID )$/;"	kind:f	class:mpe::System	signature:( EmitterID theEmitterID )
mpe::System::getXFactor	include/MPE/classes/System.hpp	/^   Real     getXFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
mpe::System::getXFactor	src/MPE/classes/System.cpp	/^Real System::getXFactor() const$/;"	kind:f	class:mpe::System	signature:() const
mpe::System::getYFactor	include/MPE/classes/System.hpp	/^   Real     getYFactor() const;$/;"	kind:p	class:mpe::System	access:public	signature:() const
mpe::System::getYFactor	src/MPE/classes/System.cpp	/^Real System::getYFactor() const$/;"	kind:f	class:mpe::System	signature:() const
mpe::System::mAffectors	include/MPE/classes/System.hpp	/^   std::list<AffectorPtr>        mAffectors;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mEmitters	include/MPE/classes/System.hpp	/^   std::map<EmitterID, Emitter>   mEmitters;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mFocusses	include/MPE/classes/System.hpp	/^   std::list<FocusPtr>           mFocusses;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mParticles	include/MPE/classes/System.hpp	/^   std::list<Particle>           mParticles;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mXFactor	include/MPE/classes/System.hpp	/^   Real mXFactor;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::mYFactor	include/MPE/classes/System.hpp	/^   Real mYFactor;$/;"	kind:m	class:mpe::System	access:protected
mpe::System::setXFactor	include/MPE/classes/System.hpp	/^   void     setXFactor(Real theXFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theXFactor)
mpe::System::setXFactor	src/MPE/classes/System.cpp	/^void System::setXFactor(Real theXFactor)$/;"	kind:f	class:mpe::System	signature:(Real theXFactor)
mpe::System::setYFactor	include/MPE/classes/System.hpp	/^   void     setYFactor(Real theYFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theYFactor)
mpe::System::setYFactor	src/MPE/classes/System.cpp	/^void System::setYFactor(Real theYFactor)$/;"	kind:f	class:mpe::System	signature:(Real theYFactor)
mpe::System::update	include/MPE/classes/System.hpp	/^   void     update(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theElapsedTime)
mpe::System::update	src/MPE/classes/System.cpp	/^void System::update (Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
mpe::System::updateFocusses	include/MPE/classes/System.hpp	/^   void updateFocusses (Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
mpe::System::updateFocusses	src/MPE/classes/System.cpp	/^void System::updateFocusses(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
mpe::System::updateParticles	include/MPE/classes/System.hpp	/^   void updateParticles(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
mpe::System::updateParticles	src/MPE/classes/System.cpp	/^void System::updateParticles(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
mpe::TextRect	include/MPE/Config.hpp	/^struct TextRect$/;"	kind:s	namespace:mpe
mpe::TextRect::height	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::TextRect::width	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::TextRect::x	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::TextRect::y	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
mpe::Vec2	include/MPE/classes/Vec2.hpp	/^class Vec2$/;"	kind:c	namespace:mpe
mpe::Vec2::Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(): x(0), y(0) {}$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::Vec2	include/MPE/classes/Vec2.hpp	/^   Vec2(Real theX, Real theY):$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
mpe::Vec2::aCosine	include/MPE/classes/Vec2.hpp	/^   Real aCosine = std::cos(theAngle);$/;"	kind:l
mpe::Vec2::aSine	include/MPE/classes/Vec2.hpp	/^   Real aSine = std::sin(theAngle);$/;"	kind:l
mpe::Vec2::anLength	include/MPE/classes/Vec2.hpp	/^      Real anLength = length();$/;"	kind:l
mpe::Vec2::getX	include/MPE/classes/Vec2.hpp	/^   Real getX()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::getY	include/MPE/classes/Vec2.hpp	/^   Real getY()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::init	include/MPE/classes/Vec2.hpp	/^   void init(Real theX, Real theY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(Real theX, Real theY)
mpe::Vec2::length	include/MPE/classes/Vec2.hpp	/^   Real length()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::normalize	include/MPE/classes/Vec2.hpp	/^   void normalize()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::nx	include/MPE/classes/Vec2.hpp	/^   Real nx = x * aCosine - y * aSine;$/;"	kind:l
mpe::Vec2::ny	include/MPE/classes/Vec2.hpp	/^   Real ny = x * aSine + y * aCosine;$/;"	kind:l
mpe::Vec2::operator *	include/MPE/classes/Vec2.hpp	/^   Vec2 operator*(const Real& theScalar) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar) const
mpe::Vec2::operator *=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator*=(const Real& theScalar)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar)
mpe::Vec2::operator +	include/MPE/classes/Vec2.hpp	/^   Vec2 operator+(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
mpe::Vec2::operator +=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator +=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
mpe::Vec2::operator -	include/MPE/classes/Vec2.hpp	/^   Vec2 operator-(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
mpe::Vec2::operator -=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator -=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
mpe::Vec2::rotate	include/MPE/classes/Vec2.hpp	/^Vec2& rotate ( Real theAngle )$/;"	kind:f	class:mpe::Vec2	access:public	signature:( Real theAngle )
mpe::Vec2::scale	include/MPE/classes/Vec2.hpp	/^   Vec2& scale(const Real& theScalarX,const Real& theScalarY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalarX,const Real& theScalarY)
mpe::Vec2::squareLength	include/MPE/classes/Vec2.hpp	/^   Real squareLength()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
mpe::Vec2::x	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
mpe::Vec2::y	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
mpe::addParticle	src/MPE/classes/Focus.cpp	/^      anSystem->addParticle(anParticle);$/;"	kind:p	file:	signature:(anParticle)
mpe::anEmitterID	src/MPE/classes/System.cpp	/^   EmitterID anEmitterID = theEmitter.getID();$/;"	kind:l
mpe::anFocus	src/MPE/classes/Emitter.cpp	/^   FocusPtr anFocus = Focus::create(getFocusWidth(),$/;"	kind:l
mpe::anParticle	src/MPE/classes/Focus.cpp	/^      Particle anParticle = createParticle();$/;"	kind:l
mpe::anParticle	src/MPE/classes/Focus.cpp	/^   Particle  anParticle = Particle( mEmitter.getParticleTOL(),$/;"	kind:l
mpe::anPosition	src/MPE/classes/Emitter.cpp	/^   Vec2 anPosition;$/;"	kind:l
mpe::anPosition	src/MPE/classes/Focus.cpp	/^   Vec2 anPosition = mEmitter.generatePosition(*this);$/;"	kind:l
mpe::anSystem	src/MPE/classes/Focus.cpp	/^   System* anSystem = mEmitter.getSystem();$/;"	kind:l
mpe::anVelocity	src/MPE/classes/Emitter.cpp	/^   Vec2 anVelocity;$/;"	kind:l
mpe::it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(anEmitterID);$/;"	kind:l
mpe::it	src/MPE/classes/System.cpp	/^   auto it = mEmitters.find(theEmitterID);$/;"	kind:l
mpe::nParticles	src/MPE/classes/Focus.cpp	/^      Integer nParticles = drain(theElapsedTime);$/;"	kind:l
mpe::nParticles	src/MPE/classes/Focus.cpp	/^   Integer nParticles = mTimeAcum * mPPS;$/;"	kind:l
mpe::normalize	src/MPE/classes/Emitter.cpp	/^      anVelocity.normalize();$/;"	kind:p	file:	signature:()
mpe::pair	src/MPE/classes/System.cpp	/^      mEmitters.insert(std::pair<EmitterID, Emitter>(anEmitterID, theEmitter));$/;"	kind:p	file:	signature:(anEmitterID, theEmitter)
mpe::push_back	src/MPE/classes/System.cpp	/^   mAffectors.push_back(theAffector);$/;"	kind:p	file:	signature:(theAffector)
mpe::push_back	src/MPE/classes/System.cpp	/^   mFocusses.push_back(theFocus);$/;"	kind:p	file:	signature:(theFocus)
mpe::push_back	src/MPE/classes/System.cpp	/^   mParticles.push_back(theParticle);$/;"	kind:p	file:	signature:(theParticle)
mpe::rotate	src/MPE/classes/Emitter.cpp	/^   anPosition.rotate(theFocus.getAngle());$/;"	kind:p	file:	signature:(theFocus.getAngle())
mpe::sRealRandom	src/MPE/classes/Emitter.cpp	/^      anPosition.init(sRealRandom(),sRealRandom());$/;"	kind:p	file:	signature:()
mpe::scale	src/MPE/classes/Emitter.cpp	/^   anPosition.scale(theFocus.getWidth(), theFocus.getHeight());$/;"	kind:p	file:	signature:(theFocus.getWidth(), theFocus.getHeight())
mpe::setSystem	src/MPE/classes/System.cpp	/^      theEmitter.setSystem(this);$/;"	kind:p	file:	signature:(this)
mpe::update	src/MPE/classes/System.cpp	/^         (*affector)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
mpe::update	src/MPE/classes/System.cpp	/^         (*it)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
mpe::update	src/MPE/classes/System.cpp	/^         particle->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
nParticles	src/MPE/classes/Focus.cpp	/^      Integer nParticles = drain(theElapsedTime);$/;"	kind:l
nParticles	src/MPE/classes/Focus.cpp	/^   Integer nParticles = mTimeAcum * mPPS;$/;"	kind:l
normalize	include/MPE/classes/Vec2.hpp	/^   void normalize()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
normalize	src/MPE/classes/Emitter.cpp	/^      anVelocity.normalize();$/;"	kind:p	file:	signature:()
nx	include/MPE/classes/Vec2.hpp	/^   Real nx = x * aCosine - y * aSine;$/;"	kind:l
ny	include/MPE/classes/Vec2.hpp	/^   Real ny = x * aSine + y * aCosine;$/;"	kind:l
operator ()	include/MPE/classes/Randomizer.hpp	/^   T operator()() const;$/;"	kind:p	class:mpe::Randomizer	access:public	signature:() const
operator ()	src/MPE/classes/Randomizer.cpp	/^T Randomizer<T>::operator()() const$/;"	kind:f	class:mpe::Randomizer	signature:() const
operator *	include/MPE/classes/Vec2.hpp	/^   Vec2 operator*(const Real& theScalar) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar) const
operator *=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator*=(const Real& theScalar)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalar)
operator +	include/MPE/classes/Vec2.hpp	/^   Vec2 operator+(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
operator +=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator +=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
operator -	include/MPE/classes/Vec2.hpp	/^   Vec2 operator-(const Vec2& theVector) const$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector) const
operator -=	include/MPE/classes/Vec2.hpp	/^   Vec2& operator -=(const Vec2& theVector)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Vec2& theVector)
pair	src/MPE/classes/System.cpp	/^      mEmitters.insert(std::pair<EmitterID, Emitter>(anEmitterID, theEmitter));$/;"	kind:p	file:	signature:(anEmitterID, theEmitter)
push_back	src/MPE/classes/System.cpp	/^   mAffectors.push_back(theAffector);$/;"	kind:p	file:	signature:(theAffector)
push_back	src/MPE/classes/System.cpp	/^   mFocusses.push_back(theFocus);$/;"	kind:p	file:	signature:(theFocus)
push_back	src/MPE/classes/System.cpp	/^   mParticles.push_back(theParticle);$/;"	kind:p	file:	signature:(theParticle)
r	include/MPE/Config.hpp	/^   Integer r,g,b,a;$/;"	kind:m	struct:mpe::Color	access:public
require	build/debug/CMakeFiles/2.8.12/CompilerIdC/CMakeCCompilerId.c	/^  int require = 0;$/;"	kind:l
require	build/debug/CMakeFiles/2.8.12/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  int require = 0;$/;"	kind:l
resetLife	include/MPE/classes/Mortal.hpp	/^   inline void resetLife(Real theLifetime)$/;"	kind:f	class:mpe::Mortal	access:protected	signature:(Real theLifetime)
rotate	include/MPE/classes/Vec2.hpp	/^Vec2& rotate ( Real theAngle )$/;"	kind:f	class:mpe::Vec2	access:public	signature:( Real theAngle )
rotate	src/MPE/classes/Emitter.cpp	/^   anPosition.rotate(theFocus.getAngle());$/;"	kind:p	file:	signature:(theFocus.getAngle())
sRealRandom	include/MPE/classes/Emitter.hpp	/^   static Randomizer<Real> sRealRandom;$/;"	kind:m	class:mpe::Emitter	access:private
sRealRandom	src/MPE/classes/Emitter.cpp	/^      anPosition.init(sRealRandom(),sRealRandom());$/;"	kind:p	file:	signature:()
scale	include/MPE/classes/Vec2.hpp	/^   Vec2& scale(const Real& theScalarX,const Real& theScalarY)$/;"	kind:f	class:mpe::Vec2	access:public	signature:(const Real& theScalarX,const Real& theScalarY)
scale	src/MPE/classes/Emitter.cpp	/^   anPosition.scale(theFocus.getWidth(), theFocus.getHeight());$/;"	kind:p	file:	signature:(theFocus.getWidth(), theFocus.getHeight())
setAngle	include/MPE/classes/Focus.hpp	/^   void setAngle(Real theAngle);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theAngle)
setAngle	src/MPE/classes/Focus.cpp	/^void Focus::setAngle(Real theAngle)$/;"	kind:f	class:mpe::Focus	signature:(Real theAngle)
setAngularVelocity	include/MPE/classes/Particle.hpp	/^   void setAngularVelocity(Real theAngularVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theAngularVelocity)
setAngularVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setAngularVelocity(Real theAngularVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Real theAngularVelocity)
setColor	include/MPE/classes/Particle.hpp	/^   void  setColor(Color theColor);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Color theColor)
setColor	src/MPE/classes/Particle.cpp	/^void Particle::setColor(Color theColor)$/;"	kind:f	class:mpe::Particle	signature:(Color theColor)
setDispersion	include/MPE/classes/Emitter.hpp	/^   void setDispersion(Dispersion theDispersion);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Dispersion theDispersion)
setDispersion	src/MPE/classes/Emitter.cpp	/^void Emitter::setDispersion(Dispersion theDispersion)$/;"	kind:f	class:mpe::Emitter	signature:(Dispersion theDispersion)
setHeight	include/MPE/classes/Focus.hpp	/^   void setHeight(Real theHeight);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theHeight)
setHeight	include/MPE/classes/Particle.hpp	/^   void setHeight(Real theHeight);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theHeight)
setHeight	src/MPE/classes/Focus.cpp	/^void Focus::setHeight(Real theHeight)$/;"	kind:f	class:mpe::Focus	signature:(Real theHeight)
setHeight	src/MPE/classes/Particle.cpp	/^void Particle::setHeight(Real theHeight)$/;"	kind:f	class:mpe::Particle	signature:(Real theHeight)
setLinearVelocity	include/MPE/classes/Particle.hpp	/^   void setLinearVelocity(Vec2 theLinearVelocity);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Vec2 theLinearVelocity)
setLinearVelocity	src/MPE/classes/Particle.cpp	/^void Particle::setLinearVelocity(Vec2 theLinearVelocity)$/;"	kind:f	class:mpe::Particle	signature:(Vec2 theLinearVelocity)
setPPS	include/MPE/classes/Focus.hpp	/^   void setPPS(Real thePPS);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real thePPS)
setPPS	src/MPE/classes/Focus.cpp	/^void Focus::setPPS(Real thePPS)$/;"	kind:f	class:mpe::Focus	signature:(Real thePPS)
setPosition	include/MPE/classes/Focus.hpp	/^   void setPosition(Vec2 thePosition);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Vec2 thePosition)
setPosition	src/MPE/classes/Focus.cpp	/^void Focus::setPosition(Vec2 thePosition)$/;"	kind:f	class:mpe::Focus	signature:(Vec2 thePosition)
setRangeFocusHeight	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusHeight(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeFocusHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusHeight(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeFocusNP	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusNP(Integer theMin, Integer theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Integer theMin, Integer theMax)
setRangeFocusNP	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusNP(Integer theMin, Integer theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Integer theMin, Integer theMax)
setRangeFocusPPS	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusPPS(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeFocusPPS	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusPPS(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeFocusTOL	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeFocusTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeFocusWidth	include/MPE/classes/Emitter.hpp	/^   void setRangeFocusWidth(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeFocusWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeFocusWidth(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeParticleAV	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleAV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeParticleAV	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleAV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeParticleAngle	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleAngle(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeParticleAngle	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleAngle(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeParticleHeight	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleHeight(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeParticleHeight	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleHeight(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeParticleLV	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleLV(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeParticleLV	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleLV(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeParticleTOL	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleTOL(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeParticleTOL	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleTOL(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setRangeParticleWidth	include/MPE/classes/Emitter.hpp	/^   void setRangeParticleWidth(Real theMin, Real theMax);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Real theMin, Real theMax)
setRangeParticleWidth	src/MPE/classes/Emitter.cpp	/^void Emitter::setRangeParticleWidth(Real theMin, Real theMax)$/;"	kind:f	class:mpe::Emitter	signature:(Real theMin, Real theMax)
setShape	include/MPE/classes/Emitter.hpp	/^   void setShape(Shape theShape);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(Shape theShape)
setShape	src/MPE/classes/Emitter.cpp	/^void Emitter::setShape(Shape theShape)$/;"	kind:f	class:mpe::Emitter	signature:(Shape theShape)
setSystem	include/MPE/classes/Emitter.hpp	/^   void setSystem(System* theSystem);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(System* theSystem)
setSystem	src/MPE/classes/Emitter.cpp	/^void Emitter::setSystem(System* theSystem)$/;"	kind:f	class:mpe::Emitter	signature:(System* theSystem)
setSystem	src/MPE/classes/System.cpp	/^      theEmitter.setSystem(this);$/;"	kind:p	file:	signature:(this)
setTextRect	include/MPE/classes/Emitter.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Emitter	access:public	signature:(TextRect theTextRect)
setTextRect	include/MPE/classes/Particle.hpp	/^   void setTextRect(TextRect theTextRect);$/;"	kind:p	class:mpe::Particle	access:public	signature:(TextRect theTextRect)
setTextRect	src/MPE/classes/Emitter.cpp	/^void Emitter::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Emitter	signature:(TextRect theTextRect)
setTextRect	src/MPE/classes/Particle.cpp	/^void Particle::setTextRect(TextRect theTextRect)$/;"	kind:f	class:mpe::Particle	signature:(TextRect theTextRect)
setWidth	include/MPE/classes/Focus.hpp	/^   void setWidth(Real theWidth);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theWidth)
setWidth	include/MPE/classes/Particle.hpp	/^   void setWidth(Real theWidth);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theWidth)
setWidth	src/MPE/classes/Focus.cpp	/^void Focus::setWidth(Real theWidth)$/;"	kind:f	class:mpe::Focus	signature:(Real theWidth)
setWidth	src/MPE/classes/Particle.cpp	/^void Particle::setWidth(Real theWidth)$/;"	kind:f	class:mpe::Particle	signature:(Real theWidth)
setXFactor	include/MPE/classes/System.hpp	/^   void     setXFactor(Real theXFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theXFactor)
setXFactor	src/MPE/classes/System.cpp	/^void System::setXFactor(Real theXFactor)$/;"	kind:f	class:mpe::System	signature:(Real theXFactor)
setYFactor	include/MPE/classes/System.hpp	/^   void     setYFactor(Real theYFactor);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theYFactor)
setYFactor	src/MPE/classes/System.cpp	/^void System::setYFactor(Real theYFactor)$/;"	kind:f	class:mpe::System	signature:(Real theYFactor)
squareLength	include/MPE/classes/Vec2.hpp	/^   Real squareLength()$/;"	kind:f	class:mpe::Vec2	access:public	signature:()
update	include/MPE/classes/Affector.hpp	/^   virtual void update(Real theElapsedtime)$/;"	kind:f	class:mpe::Affector	access:public	signature:(Real theElapsedtime)
update	include/MPE/classes/Focus.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Focus	access:public	signature:(Real theElapsedTime)
update	include/MPE/classes/Particle.hpp	/^   void update(Real theElapsedTime);$/;"	kind:p	class:mpe::Particle	access:public	signature:(Real theElapsedTime)
update	include/MPE/classes/System.hpp	/^   void     update(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:public	signature:(Real theElapsedTime)
update	src/MPE/classes/Focus.cpp	/^void Focus::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Focus	signature:(Real theElapsedTime)
update	src/MPE/classes/Particle.cpp	/^void Particle::update(Real theElapsedTime)$/;"	kind:f	class:mpe::Particle	signature:(Real theElapsedTime)
update	src/MPE/classes/System.cpp	/^         (*affector)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
update	src/MPE/classes/System.cpp	/^         (*it)->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
update	src/MPE/classes/System.cpp	/^         particle->update(theElapsedTime);$/;"	kind:p	file:	signature:(theElapsedTime)
update	src/MPE/classes/System.cpp	/^void System::update (Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
updateFocusses	include/MPE/classes/System.hpp	/^   void updateFocusses (Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
updateFocusses	src/MPE/classes/System.cpp	/^void System::updateFocusses(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
updateParticles	include/MPE/classes/System.hpp	/^   void updateParticles(Real theElapsedTime);$/;"	kind:p	class:mpe::System	access:protected	signature:(Real theElapsedTime)
updateParticles	src/MPE/classes/System.cpp	/^void System::updateParticles(Real theElapsedTime)$/;"	kind:f	class:mpe::System	signature:(Real theElapsedTime)
width	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
x	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
x	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
y	include/MPE/Config.hpp	/^   Integer x,y,width,height;$/;"	kind:m	struct:mpe::TextRect	access:public
y	include/MPE/classes/Vec2.hpp	/^   Real x, y;$/;"	kind:m	class:mpe::Vec2	access:private
~Particle	include/MPE/classes/Particle.hpp	/^   ~Particle();$/;"	kind:p	class:mpe::Particle	access:public	signature:()
~Particle	src/MPE/classes/Particle.cpp	/^Particle::~Particle() {}$/;"	kind:f	class:mpe::Particle	signature:()
